{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/shared/interceptors/error-handler.interceptor.ts","./src/app/shared/interceptors/index.ts","./src/app/shared/interceptors/session-postfix.interceptor.ts","./src/app/shared/services/auth.guard.ts","./src/app/shared/services/auth.service.ts","./src/app/shared/services/http.service.ts","./src/app/shared/services/snackbar.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<router-outlet></router-outlet>\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import {NgModule, Provider} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {RouterModule} from '@angular/router';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {ErrorHandlerInterceptor, SessionPostfixInterceptor} from './shared/interceptors';\r\nimport {AuthGuard} from './shared/services';\r\nimport {SnackbarService} from './shared/services/snackbar.service';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\n\r\nconst SESSION_POSTFIX_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: SessionPostfixInterceptor,\r\n  multi: true\r\n};\r\n\r\nconst ERROR_HANDLER_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: ErrorHandlerInterceptor,\r\n  multi: true\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n\r\n    RouterModule.forRoot([\r\n      {path: '', redirectTo: 'profile', pathMatch: 'full'},\r\n      {\r\n        path: 'authorization',\r\n        loadChildren: () => import('./authorization/authorization.module').then(m => m.AuthorizationModule)\r\n      },\r\n      {\r\n        path: 'profile',\r\n        canActivateChild: [AuthGuard],\r\n        loadChildren: () => import('./profile/profile.module').then(m => m.ProfileModule)\r\n      },\r\n    ]),\r\n\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    SESSION_POSTFIX_INTERCEPTOR_PROVIDER,\r\n    ERROR_HANDLER_INTERCEPTOR_PROVIDER,\r\n\r\n    SnackbarService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n\r\n}\r\n","import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\nimport {Injectable} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AuthService} from '../services';\r\n\r\n@Injectable()\r\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req)\r\n      .pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 401 || error.statusText === \"Unknown Error\") {\r\n            this.auth.signOut();\r\n            this.router.navigate(['/authorization', 'sign-in']);\r\n          }\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n}\r\n","export {ErrorHandlerInterceptor} from './error-handler.interceptor';\r\nexport {SessionPostfixInterceptor} from './session-postfix.interceptor';\r\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\n\r\nimport {AuthService} from '../services';\r\n\r\n@Injectable()\r\nexport class SessionPostfixInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private auth: AuthService\r\n  ) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (this.auth.jSessionId) {\r\n      req = req.clone({\r\n        url: req.url + ';jsessionid=' + this.auth.jSessionId,\r\n      });\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n","import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\n\r\nimport {AuthService} from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanActivateChild {\r\n\r\n  constructor(\r\n    private auth: AuthService\r\n  ) {\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    console.log(\"AUTH GUARD\");\r\n    return this.auth.isSignedIn();\r\n  }\r\n\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.canActivate(childRoute, state);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {environment} from '../../../environments/environment';\r\nimport {catchError, switchMap, tap} from 'rxjs/operators';\r\nimport {Observable, of} from 'rxjs';\r\nimport {HttpErrorResponse} from '@angular/common/http';\r\n\r\nimport {HttpService} from './http.service';\r\nimport {User} from '../interfaces';\r\nimport {Router} from '@angular/router';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  get userLogin(): string {\r\n    return localStorage.getItem('user-login');\r\n  }\r\n\r\n  get jSessionId(): string {\r\n    return localStorage.getItem('jsessionid');\r\n  }\r\n\r\n  isSignedIn(): Observable<boolean> {\r\n    return this.http.get(`${environment.serverUrl}/CheckSession`, {})\r\n      .pipe(\r\n        switchMap(() => of(true)),\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 401) {\r\n            return of(false);\r\n          }\r\n        }),\r\n      );\r\n  }\r\n\r\n  signIn(user: User): Observable<any> {\r\n    const signInParams = {\r\n      action: 'sign-in',\r\n      ...user\r\n    };\r\n\r\n    return this.http.post(`${environment.serverUrl}/UserServlet`, signInParams)\r\n      .pipe(\r\n        tap(jsessionid => localStorage.setItem('jsessionid', jsessionid)),\r\n        tap(() => localStorage.setItem('user-login', user.login))\r\n      );\r\n  }\r\n\r\n  signUp(user: User): Observable<any> {\r\n    const signUpParams = {\r\n      action: 'sign-up',\r\n      ...user\r\n    };\r\n\r\n    return this.http.post(`${environment.serverUrl}/UserServlet`, signUpParams)\r\n      .pipe(\r\n        tap(jsessionid => localStorage.setItem('jsessionid', jsessionid)),\r\n        tap(() => localStorage.setItem('user-login', user.login))\r\n      );\r\n  }\r\n\r\n  signOut() {\r\n    const signOutParams = {\r\n      action: 'sign-out'\r\n    };\r\n\r\n    localStorage.clear();\r\n    this.router.navigate(['authorization', 'sign-in']);\r\n    // this.http.post(`${environment.serverUrl}/UserServlet`, signOutParams)\r\n    //   .pipe(map(response => {\r\n    //     let parser: DOMParser = new DOMParser();\r\n    //     let responseDOM = parser.parseFromString(response, 'text/xml');\r\n    //     return responseDOM.querySelector('result').innerHTML;\r\n    //   }))\r\n    //   .subscribe(result => {\r\n    //     if (result === 'true') {\r\n    //       localStorage.clear();\r\n    //     }\r\n    //   })\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class HttpService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  public get(url: string, params: object): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n    for (let key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        httpParams = httpParams.append(key, params[key]);\r\n      }\r\n    }\r\n    return this.http.get(url, {responseType: 'text', params: httpParams});\r\n  }\r\n\r\n  public post(url: string, params: object | string): Observable<any> {\r\n    const headers =\r\n      new HttpHeaders()\r\n        .set(\r\n          'Content-Type',\r\n          'application/x-www-form-urlencoded;charset=UTF-8');\r\n\r\n    let paramsStr = '';\r\n\r\n    if (typeof params === 'object') {\r\n      paramsStr =\r\n        Object.entries(params)\r\n          .map(([key, value]) => `${key}=${value}`)\r\n          .join('&');\r\n    } else {\r\n      paramsStr = params;\r\n    }\r\n\r\n    return this.http.post(url, paramsStr, {\r\n      responseType: 'text',\r\n      headers\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\n@Injectable()\r\nexport class SnackbarService {\r\n\r\n  constructor(\r\n    private _snackbar: MatSnackBar\r\n  ) {\r\n\r\n  }\r\n\r\n  openSnackBar(message: string) {\r\n    this._snackbar.open(message, 'Hide', {\r\n      duration: 3000\r\n    });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  serverUrl: 'http://localhost:8181/web-task-manager'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}