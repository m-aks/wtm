{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/shared/interceptors/error-handler.interceptor.ts","webpack:///src/app/shared/interceptors/index.ts","webpack:///src/app/shared/interceptors/session-postfix.interceptor.ts","webpack:///src/app/shared/services/auth.guard.ts","webpack:///src/app/shared/services/auth.service.ts","webpack:///src/app/shared/services/http.service.ts","webpack:///src/app/shared/services/snackbar.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","SESSION_POSTFIX_INTERCEPTOR_PROVIDER","provide","useClass","multi","ERROR_HANDLER_INTERCEPTOR_PROVIDER","m","AppModule","ErrorHandlerInterceptor","auth","router","next","handle","pipe","error","status","statusText","signOut","navigate","SessionPostfixInterceptor","jSessionId","clone","url","AuthGuard","route","state","console","log","isSignedIn","childRoute","canActivate","AuthService","http","get","serverUrl","user","signInParams","action","post","jsessionid","localStorage","setItem","login","signUpParams","signOutParams","clear","getItem","HttpService","params","httpParams","key","hasOwnProperty","append","responseType","headers","set","paramsStr","Object","entries","map","value","join","SnackbarService","_snackbar","message","open","duration","environment","production","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<router-outlet></router-outlet>\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import {NgModule, Provider} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {RouterModule} from '@angular/router';\r\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\r\n\r\nimport {AppComponent} from './app.component';\r\nimport {ErrorHandlerInterceptor, SessionPostfixInterceptor} from './shared/interceptors';\r\nimport {AuthGuard} from './shared/services';\r\nimport {SnackbarService} from './shared/services/snackbar.service';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\n\r\nconst SESSION_POSTFIX_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: SessionPostfixInterceptor,\r\n  multi: true\r\n};\r\n\r\nconst ERROR_HANDLER_INTERCEPTOR_PROVIDER: Provider = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: ErrorHandlerInterceptor,\r\n  multi: true\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    HttpClientModule,\r\n\r\n    RouterModule.forRoot([\r\n      {path: '', redirectTo: 'profile', pathMatch: 'full'},\r\n      {\r\n        path: 'authorization',\r\n        loadChildren: () => import('./authorization/authorization.module').then(m => m.AuthorizationModule)\r\n      },\r\n      {\r\n        path: 'profile',\r\n        canActivateChild: [AuthGuard],\r\n        loadChildren: () => import('./profile/profile.module').then(m => m.ProfileModule)\r\n      },\r\n    ]),\r\n\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    SESSION_POSTFIX_INTERCEPTOR_PROVIDER,\r\n    ERROR_HANDLER_INTERCEPTOR_PROVIDER,\r\n\r\n    SnackbarService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n\r\n}\r\n","import {HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {catchError} from 'rxjs/operators';\r\nimport {Injectable} from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {AuthService} from '../services';\r\n\r\n@Injectable()\r\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private auth: AuthService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req)\r\n      .pipe(\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 401 || error.statusText === \"Unknown Error\") {\r\n            this.auth.signOut();\r\n            this.router.navigate(['/authorization', 'sign-in']);\r\n          }\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n}\r\n","export {ErrorHandlerInterceptor} from './error-handler.interceptor';\r\nexport {SessionPostfixInterceptor} from './session-postfix.interceptor';\r\n","import {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\n\r\nimport {AuthService} from '../services';\r\n\r\n@Injectable()\r\nexport class SessionPostfixInterceptor implements HttpInterceptor {\r\n\r\n  constructor(\r\n    private auth: AuthService\r\n  ) {\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (this.auth.jSessionId) {\r\n      req = req.clone({\r\n        url: req.url + ';jsessionid=' + this.auth.jSessionId,\r\n      });\r\n    }\r\n    return next.handle(req);\r\n  }\r\n}\r\n","import {ActivatedRouteSnapshot, CanActivate, CanActivateChild, RouterStateSnapshot} from '@angular/router';\r\nimport {Observable} from 'rxjs';\r\nimport {Injectable} from '@angular/core';\r\n\r\nimport {AuthService} from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate, CanActivateChild {\r\n\r\n  constructor(\r\n    private auth: AuthService\r\n  ) {\r\n  }\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    console.log(\"AUTH GUARD\");\r\n    return this.auth.isSignedIn();\r\n  }\r\n\r\n  canActivateChild(\r\n    childRoute: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    return this.canActivate(childRoute, state);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {environment} from '../../../environments/environment';\r\nimport {catchError, switchMap, tap} from 'rxjs/operators';\r\nimport {Observable, of} from 'rxjs';\r\nimport {HttpErrorResponse} from '@angular/common/http';\r\n\r\nimport {HttpService} from './http.service';\r\nimport {User} from '../interfaces';\r\nimport {Router} from '@angular/router';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n  constructor(\r\n    private http: HttpService,\r\n    private router: Router\r\n  ) {\r\n  }\r\n\r\n  get userLogin(): string {\r\n    return localStorage.getItem('user-login');\r\n  }\r\n\r\n  get jSessionId(): string {\r\n    return localStorage.getItem('jsessionid');\r\n  }\r\n\r\n  isSignedIn(): Observable<boolean> {\r\n    return this.http.get(`${environment.serverUrl}/CheckSession`, {})\r\n      .pipe(\r\n        switchMap(() => of(true)),\r\n        catchError((error: HttpErrorResponse) => {\r\n          if (error.status === 401) {\r\n            return of(false);\r\n          }\r\n        }),\r\n      );\r\n  }\r\n\r\n  signIn(user: User): Observable<any> {\r\n    const signInParams = {\r\n      action: 'sign-in',\r\n      ...user\r\n    };\r\n\r\n    return this.http.post(`${environment.serverUrl}/UserServlet`, signInParams)\r\n      .pipe(\r\n        tap(jsessionid => localStorage.setItem('jsessionid', jsessionid)),\r\n        tap(() => localStorage.setItem('user-login', user.login))\r\n      );\r\n  }\r\n\r\n  signUp(user: User): Observable<any> {\r\n    const signUpParams = {\r\n      action: 'sign-up',\r\n      ...user\r\n    };\r\n\r\n    return this.http.post(`${environment.serverUrl}/UserServlet`, signUpParams)\r\n      .pipe(\r\n        tap(jsessionid => localStorage.setItem('jsessionid', jsessionid)),\r\n        tap(() => localStorage.setItem('user-login', user.login))\r\n      );\r\n  }\r\n\r\n  signOut() {\r\n    const signOutParams = {\r\n      action: 'sign-out'\r\n    };\r\n\r\n    localStorage.clear();\r\n    this.router.navigate(['authorization', 'sign-in']);\r\n    // this.http.post(`${environment.serverUrl}/UserServlet`, signOutParams)\r\n    //   .pipe(map(response => {\r\n    //     let parser: DOMParser = new DOMParser();\r\n    //     let responseDOM = parser.parseFromString(response, 'text/xml');\r\n    //     return responseDOM.querySelector('result').innerHTML;\r\n    //   }))\r\n    //   .subscribe(result => {\r\n    //     if (result === 'true') {\r\n    //       localStorage.clear();\r\n    //     }\r\n    //   })\r\n  }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class HttpService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) {\r\n  }\r\n\r\n  public get(url: string, params: object): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n    for (let key in params) {\r\n      if (params.hasOwnProperty(key)) {\r\n        httpParams = httpParams.append(key, params[key]);\r\n      }\r\n    }\r\n    return this.http.get(url, {responseType: 'text', params: httpParams});\r\n  }\r\n\r\n  public post(url: string, params: object | string): Observable<any> {\r\n    const headers =\r\n      new HttpHeaders()\r\n        .set(\r\n          'Content-Type',\r\n          'application/x-www-form-urlencoded;charset=UTF-8');\r\n\r\n    let paramsStr = '';\r\n\r\n    if (typeof params === 'object') {\r\n      paramsStr =\r\n        Object.entries(params)\r\n          .map(([key, value]) => `${key}=${value}`)\r\n          .join('&');\r\n    } else {\r\n      paramsStr = params;\r\n    }\r\n\r\n    return this.http.post(url, paramsStr, {\r\n      responseType: 'text',\r\n      headers\r\n    });\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n\r\n@Injectable()\r\nexport class SnackbarService {\r\n\r\n  constructor(\r\n    private _snackbar: MatSnackBar\r\n  ) {\r\n\r\n  }\r\n\r\n  openSnackBar(message: string) {\r\n    this._snackbar.open(message, 'Hide', {\r\n      duration: 3000\r\n    });\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  serverUrl: 'http://localhost:8181/web-task-manager'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}