{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/text-field.js","webpack:///node_modules/@angular/forms/fesm2015/forms.js","webpack:///node_modules/@angular/material/dialog/index.d.ts.MatDialogContainer.html","webpack:///node_modules/@angular/material/fesm2015/card.js","webpack:///node_modules/@angular/material/fesm2015/checkbox.js","webpack:///node_modules/@angular/material/fesm2015/chips.js","webpack:///node_modules/@angular/material/fesm2015/dialog.js","webpack:///node_modules/@angular/material/fesm2015/divider.js","webpack:///node_modules/@angular/material/fesm2015/form-field.js","webpack:///node_modules/@angular/material/fesm2015/grid-list.js","webpack:///node_modules/@angular/material/fesm2015/icon.js","webpack:///node_modules/@angular/material/fesm2015/input.js","webpack:///node_modules/@angular/material/fesm2015/list.js","webpack:///node_modules/@angular/material/fesm2015/menu.js","webpack:///node_modules/@angular/material/fesm2015/sidenav.js","webpack:///node_modules/@angular/material/fesm2015/slide-toggle.js","webpack:///node_modules/@angular/material/fesm2015/tabs.js","webpack:///node_modules/@angular/material/fesm2015/toolbar.js","webpack:///src/app/shared/shared.module.ts"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","forEach","_info","stopMonitoring","decorators","type","args","providedIn","ctorParameters","ɵprov","factory","AutofillMonitor_Factory","token","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","selector","propDecorators","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","_measuringClass","FIREFOX","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","resizeToFitContent","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","value","_minRows","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","_maxRows","reset","exportAs","host","enabled","_noopInputHandler","TextFieldModule","declarations","imports","exports","ControlValueAccessor","NG_VALUE_ACCESSOR","CHECKBOX_VALUE_ACCESSOR","provide","useExisting","CheckboxControlValueAccessor","multi","_renderer","onChange","_","onTouched","setProperty","fn","isDisabled","providers","DEFAULT_VALUE_ACCESSOR","DefaultValueAccessor","_isAndroid","userAgent","getUserAgent","test","toLowerCase","COMPOSITION_BUFFER_MODE","_compositionMode","_composing","normalizedValue","Boolean","AbstractControlDirective","control","errorCode","path","hasError","getError","valid","invalid","pending","disabled","errors","pristine","dirty","touched","status","untouched","statusChanges","valueChanges","ControlContainer","unimplemented","Error","NgControl","arguments","_parent","name","valueAccessor","_rawValidators","_rawAsyncValidators","AbstractControlStatus","cd","_cd","ngControlStatusHost","NgControlStatus","NgControlStatusGroup","isEmptyInputValue","length","NG_VALIDATORS","NG_ASYNC_VALIDATORS","EMAIL_REGEXP","Validators","min","parseFloat","isNaN","max","minLength","maxLength","pattern","nullValidator","regex","regexStr","charAt","RegExp","toString","validators","presentValidators","filter","isPresent","_mergeErrors","_executeValidators","observables","_executeAsyncValidators","map","toObservable","o","r","obs","v","arrayOfErrors","res","Object","assign","keys","normalizeValidator","validator","validate","c","normalizeAsyncValidator","NUMBER_VALUE_ACCESSOR","NumberValueAccessor","RADIO_VALUE_ACCESSOR","RadioControlValueAccessor","RadioControlRegistry","_accessors","accessor","push","i","splice","_isSameGroup","fireUncheck","controlPair","_control","_registry","_injector","_checkName","_state","_fn","select","writeValue","formControlName","_throwNameError","RANGE_VALUE_ACCESSOR","RangeValueAccessor","FormErrorExamples","formGroupName","formArrayName","ngModelGroup","ngModelWithFormGroup","ReactiveErrors","console","warn","directiveName","SELECT_VALUE_ACCESSOR","SelectControlValueAccessor","_buildValueString","id","slice","_extractId","valueString","split","_optionMap","_idCounter","_compareWith","_getOptionId","_getOptionValue","Array","from","has","JSON","stringify","compareWith","NgSelectOption","_element","_select","_registerOption","_setElementValue","ngValue","SELECT_MULTIPLE_VALUE_ACCESSOR","SelectMultipleControlValueAccessor","_buildValueString$1","_extractId$1","HTMLOption","HTMLCollection","optionSelectedStateSetter","isArray","ids","opt","_setSelected","indexOf","selected","hasOwnProperty","options","selectedOptions","item","val","_value","ɵNgSelectMultipleOption","controlPath","parent","setUpControl","dir","_throwError","compose","asyncValidator","composeAsync","setUpViewChangePipeline","setUpModelChangePipeline","setUpBlurPipeline","setDisabledState","registerOnDisabledChange","registerOnValidatorChange","updateValueAndValidity","cleanUpControl","registerOnChange","_noControlError","registerOnTouched","_clearChangeFns","newValue","_pendingValue","_pendingChange","_pendingDirty","updateOn","updateControl","_pendingTouched","markAsTouched","markAsDirty","setValue","emitModelToViewChange","viewToModelUpdate","emitModelEvent","setUpFormContainer","message","messageEnd","join","composeValidators","composeAsyncValidators","isPropertyUpdated","changes","viewModel","change","isFirstChange","currentValue","BUILTIN_ACCESSORS","isBuiltInAccessor","some","a","constructor","syncPendingControls","form","directives","_syncPendingControls","selectValueAccessor","valueAccessors","defaultAccessor","builtinAccessor","customAccessor","removeDir","list","el","index","_ngModelWarning","instance","warningConfig","_ngModelWarningSentOnce","_ngModelWarningSent","ngModelWarning","VALID","INVALID","PENDING","DISABLED","_find","delimiter","controlToFind","FormGroup","controls","FormArray","at","coerceToValidator","validatorOrOpts","isOptionsObj","coerceToAsyncValidator","origAsyncValidator","asyncValidators","AbstractControlOptions","AbstractControl","_onCollectionChange","_onDisabledChange","newValidator","opts","onlySelf","_forEachChild","markAllAsTouched","markAsUntouched","_updateTouched","markAsPristine","_updatePristine","emitEvent","markAsPending","skipPristineCheck","_parentMarkedDirty","disable","_updateValue","_updateAncestors","changeFn","enable","_setInitialStatus","_cancelExistingSubscription","_runValidator","_calculateStatus","_runAsyncValidator","ctrl","_updateTreeValidity","_allControlsDisabled","_asyncValidationSubscription","setErrors","unsubscribe","_updateControlsErrors","_anyControlsHaveStatus","_anyControls","_anyControlsDirty","_anyControlsTouched","formState","_updateOn","parentDirty","x","FormControl","_onChange","_applyFormState","_setUpdateStrategy","_initObservables","emitViewToModelChange","condition","cb","_isBoxedValue","_setUpControls","setParent","_registerOnCollectionChange","registerControl","controlName","_checkAllValuesPresent","_throwIfControlMissing","patchValue","_reduceChildren","acc","getRawValue","subtreeUpdated","updated","child","k","_reduceValue","initValue","_registerControl","reduce","formDirectiveProvider","NgForm","ɵ0","Promise","resolve","resolvedPromise","submitted","_directives","ngSubmit","then","container","_findContainer","removeControl","group","$event","resetForm","pop","outputs","AbstractFormGroupDirective","_checkParentType","formDirective","addFormGroup","removeFormGroup","getFormGroup","_validators","_asyncValidators","TemplateDrivenErrors","modelGroupProvider","NgModelGroup","modelGroupParentException","formControlBinding","NgModel","ɵ0$1","resolvedPromise$1","_registered","update","_checkForErrors","_setUpControl","_updateDisabled","model","_isStandalone","_setUpStandalone","addControl","standalone","formGroupNameException","modelParentException","missingNameException","disabledValue","ɵNgNoValidate","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding$1","FormControlDirective","_ngModelWarningConfig","_isControlChanged","disabledAttrWarning","formDirectiveProvider$1","FormGroupDirective","_checkFormPresent","_updateValidators","_updateDomValue","_updateRegistrations","newCtrl","_oldForm","sync","async","missingFormException","formGroupNameProvider","FormGroupName","_hasInvalidParent","groupParentException","formArrayNameProvider","FormArrayName","addFormArray","removeFormArray","arrayParentException","getFormArray","controlNameBinding","FormControlName","_added","updateModel","ngModelGroupException","controlParentException","Validator","AsyncValidator","REQUIRED_VALIDATOR","RequiredValidator","CHECKBOX_REQUIRED_VALIDATOR","CheckboxRequiredValidator","required","_required","requiredTrue","EMAIL_VALIDATOR","EmailValidator","email","ValidatorFn","AsyncValidatorFn","MIN_LENGTH_VALIDATOR","MinLengthValidator","_createValidator","minlength","_validator","parseInt","MAX_LENGTH_VALIDATOR","MaxLengthValidator","maxlength","PATTERN_VALIDATOR","PatternValidator","SHARED_FORM_DIRECTIVES","TEMPLATE_DRIVEN_DIRECTIVES","REACTIVE_DRIVEN_DIRECTIVES","ɵInternalFormsSharedModule","isAbstractControlOptions","FormBuilder","controlsConfig","_reduceControls","_createControl","controlConfig","VERSION","FormsModule","ReactiveFormsModule","ngModule","useValue","warnOnNgModelWithFormControl","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","align","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","_animationMode","template","encapsulation","None","changeDetection","OnPush","styles","String","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCheckboxDefaultOptions","MAT_CHECKBOX_DEFAULT_OPTIONS","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","tabIndex","_clickAction","_options","ariaLabel","ariaLabelledby","_uniqueId","labelPosition","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","focusOrigin","markForCheck","_syncIndeterminate","disableRipple","detectChanges","checked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass","source","stopPropagation","toggle","_transitionCheckState","_emitChangeEvent","_inputElement","origin","focusVia","animSuffix","nativeCheckbox","changed","inputs","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","MatChipEvent","MatChipSelectionChange","isUserInput","MatChipBase","_MatChipMixinBase","MatChipAvatar","MatChipTrailingIcon","MatChip","platform","globalRippleOptions","animationMode","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","basicChipAttrName","hasAttribute","tagName","chip","_removeTriggerEvents","_dispatchSelectionChange","_markForCheck","focus","removable","preventDefault","keyCode","selectable","toggleSelected","onStable","coercedValue","textContent","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MatChipsDefaultOptions","MAT_CHIPS_DEFAULT_OPTIONS","MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatChipListMixinBase","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_uid","_tabIndex","_userTabIndex","_multiple","o1","o2","ariaOrientation","valueChange","_keyManager","chips","withWrap","withVerticalOrientation","withHorizontalOrientation","tabOut","_allowFocusEscape","_syncChipsState","_resetChips","_initializeSelection","_updateTabIndex","_updateFocusForDestroyedChips","stateChanges","_selectionModel","multiple","updateErrorState","_dropSubscriptions","inputElement","_chipInput","_ariaDescribedby","_setSelectionByValue","_originatesFromChip","focused","setFirstItemActive","_focusInput","_isInputEmpty","setLastItemActive","onKeydown","newChipIndex","Math","setActiveItem","input","_clearSelection","deselect","_selectValue","_sortValues","correspondingChip","find","selectViaInteraction","skip","clear","fallbackValue","valueToEmit","_hasFocusedChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","isSelected","_propagateChanges","chipFocusChanges","chipIndex","toArray","_isValidIndex","updateActiveItem","chipBlurChanges","_blur","chipRemoveChanges","currentElement","parentElement","empty","_placeholder","errorStateMatcher","descendants","MatChipInputEvent","nextUniqueId$1","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_keydown","_isSeparatorKey","separators","registerInput","chipList","CHIP_DECLARATIONS","MatChipsModule","DialogPosition","MatDialogConfig","role","panelClass","hasBackdrop","backdropClass","disableClose","width","maxWidth","data","ariaDescribedBy","ariaLabelledBy","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","MatDialogContainer","_focusTrapFactory","_config","_elementFocusedBeforeDialogWasOpened","_animationStateChanged","attachDomPortal","portal","_portalOutlet","hasAttached","_setupFocusTrap","_ariaLabelledBy","attachComponentPortal","attachTemplatePortal","_containsFocus","focusWasTrapped","_focusTrap","focusInitialElement","focusInitialElementWhenReady","toFocus","body","destroy","create","toState","_trapFocus","_restoreFocus","Default","animations","uniqueId","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_overlayRef","_containerInstance","_afterOpened","_afterClosed","_beforeClosed","_id","phaseName","clearTimeout","_closeFallbackTimeout","_finishDialogClose","detachments","_result","componentInstance","dispose","keydownEvents","close","backdropClick","_recaptureFocus","dialogResult","detachBackdrop","totalTime","_startExitAnimation","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updatePosition","classes","addPanelClass","removePanelClass","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","deps","useFactory","MatDialog","_overlay","_location","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","_scrollStrategy","componentOrTemplateRef","config","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","afterClosed","_removeOpenDialog","afterOpened","_closeDialogs","dialog","overlayConfig","_getOverlayConfig","dialogConfig","state","global","direction","minWidth","disposeOnNavigation","userInjector","viewContainerRef","injector","containerPortal","componentFactoryResolver","containerRef","attach","$implicit","_createInjector","contentRef","updateSize","previousValue","removeAttribute","overlayContainer","getContainerElement","siblings","children","sibling","getAttribute","dialogs","defaultOptions","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_dialogRef","MatDialogContent","MatDialogActions","MatDialogModule","entryComponents","MatDivider","_vertical","_inset","vertical","inset","MatDividerModule","MatError","matFormFieldAnimations","transitionMessages","MatFormFieldControl","getMatFormFieldPlaceholderConflictError","getMatFormFieldDuplicatedHintError","getMatFormFieldMissingControlError","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","nextUniqueId$2","floatingLabelScale","outlineGapPadding","MatFormFieldBase","_MatFormFieldMixinBase","MatFormFieldDefaultOptions","MAT_FORM_FIELD_DEFAULT_OPTIONS","MAT_FORM_FIELD","MatFormField","labelOptions","_defaults","_outlineGapCalculationNeededImmediately","_outlineGapCalculationNeededOnStable","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelId","_labelOptions","floatLabel","_getDefaultFloatLabelState","_animationsEnabled","appearance","_hideRequiredMarker","hideRequiredMarker","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","updateOutlineGap","_prefixChildren","_suffixChildren","_hintChildren","_processHints","_errorChildren","prop","_placeholderChild","_labelChild","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hasLabel","_shouldLabelFloat","_hasPlaceholder","errorState","_hasFloatingLabel","_label","_validateHints","startHint","endHint","hint","hintLabel","_getDisplayedMessages","error","setDescribedByIds","labelEl","trim","_isAttachedToDOM","startWidth","gapWidth","startEls","querySelectorAll","gapEls","containerRect","getBoundingClientRect","containerStart","_getStartEnd","labelStart","labelWidth","offsetWidth","abs","rect","getRootNode","rootNode","documentElement","_appearance","oldValue","_floatLabel","_explicitFormFieldControl","_controlNonStatic","_controlStatic","_labelChildNonStatic","_labelChildStatic","underlineRef","_inputContainerRef","MatFormFieldModule","MAT_GRID_LIST","MatGridListBase","MatGridTile","_gridList","_rowspan","_colspan","property","round","rowspan","colspan","MatGridTileText","_lines","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","Tile","TileCoordinator","columnIndex","rowIndex","numColumns","tiles","tracker","fill","positions","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","start","lastRowMax","rowCount","row","col","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","side","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","getTileSpan","getGutterSpan","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","exp","match","MAT_FIT_MODE","MatGridList","_gutter","_checkCols","_checkRowHeight","_layoutTiles","_rowHeight","_setTileStyler","rowHeight","_tileStyler","_tileCoordinator","init","pos","setStyle","getComputedHeight","MatGridListModule","getMatIconNameNotFoundError","iconName","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","IconOptions","SvgIconConfig","svgElement","MatIconRegistry","_httpClient","_sanitizer","_errorHandler","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","svg","key","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","handleError","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","_toSvgElement","str","div","innerHTML","attributes","childNodes","nodeType","ELEMENT_NODE","viewBox","inProgressFetch","req","responseType","configNamespace","MatIconRegistry_Factory","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","MatIconLocation","location","getPathname","pathname","search","funcIriAttributes","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","parts","svgIconChanges","svgIcon","_splitIconName","getNamedSvgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","_cacheChildrenWithExternalReferences","layoutElement","childCount","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","inline","_fontSet","_cleanupFontValue","_fontIcon","MatIconModule","MatTextareaAutosize","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","getMatInputUnsupportedTypeError","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","ngZone","autofilled","_type","_readonly","_neverEmptyInputTypes","t","_inputValueAccessor","_previousNativeValue","IOS","_isServer","_isNativeSelect","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","validity","badInput","_validateType","_isNeverEmpty","_isBadInput","selectElement","firstOption","selectedIndex","label","_focusChanged","_onInput","MatInputModule","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatNavList","_stateChanges","MatList","_getListType","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatListItem","navList","_isInteractiveList","_list","_getHostElement","_avatar","_icon","MatSelectionListBase","_MatSelectionListMixinBase","MatListOptionBase","_MatListOptionMixinBase","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatSelectionListChange","option","MatListOption","_changeDetector","selectionList","checkboxPosition","_inputsInitialized","wasSelected","hadFocus","newActiveItem","_removeOptionFromList","_text","_setFocusedOption","_color","_reportValueChange","_contentInitialized","a1","a2","withTypeAhead","skipPredicate","withAllowedModifierKeys","_setOptionsFromValues","added","disableRippleChanges","colorChanges","firstChange","_markOptionsForCheck","_isDestroyed","_setAllOptionsSelected","optionIndex","_getOptionIndex","activeItemIndex","activeItem","manager","previousFocusIndex","hasModifier","isTyping","_toggleFocusedOption","shouldSelect","shiftKey","_getSelectedOptionValues","activeIndex","values","correspondingOption","focusedIndex","focusedOption","skipDisabled","hasChanged","MatListModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuContent","_template","_componentFactoryResolver","_appRef","_viewContainerRef","_attached","context","_portal","detach","_outlet","insertBefore","outletElement","isAttached","throwMatMenuMissingError","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","MAT_MENU_PANEL","MatMenuPanel","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","removeItem","textNodeType","TEXT_NODE","output","_checkDisabled","_handleMouseEnter","MatMenuDefaultOptions","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","MAT_MENU_BASE_ELEVATION","menuPanelUid","_MatMenuBase","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","_classList","_panelAnimationState","_animationDone","_overlapTrigger","_hasBackdrop","closed","panelId","setPositionClasses","_updateDirectDescendants","items","focusedItem","itemChanges","_item","parentMenu","setFocusOrigin","lazyContent","_focusFirstItem","first","depth","elevation","newElevation","customElevation","startsWith","_previousElevation","posX","posY","_isAnimating","scrollTop","_allItems","notifyOnChanges","previousPanelClass","_previousPanelClass","ariaDescribedby","templateRef","MatMenu","_MatMenu","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","MatMenuTrigger","_menuItemInstance","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","_checkMenu","_handleHover","closeMenu","openMenu","_setPosition","menu","_getPortal","menuData","_menuClosingActions","_initMenu","_startAnimation","menuOpen","_resetAnimation","_setIsMenuOpen","_setMenuElevation","focusFirstItem","setElevation","isOpen","_subscribeToPositions","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","positionChanges","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","parentClose","hover","active","button","toggleMenu","_menu","reason","_destroyMenu","_deprecatedMatMenuTriggerFor","_MatMenuDirectivesModule","MatMenuModule","matDrawerAnimations","transformDrawer","throwMatDuplicatedDrawerError","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","MAT_DRAWER_CONTAINER","MatDrawerContent","_container","scrollDispatcher","_contentMarginChanges","MatDrawerContainer","MatDrawer","_doc","_elementFocusedBeforeDrawerWasOpened","_enableAnimations","_position","_mode","_disableClose","_opened","_animationStarted","_animationEnd","_animationState","openedChange","onPositionChanged","_modeChanged","opened","_takeFocus","y","fromState","hasMovedFocus","activeEl","_openedVia","blur","_updateFocusTrapState","openedVia","open","mode","_autoFocus","e","_openedStream","openedStart","_closedStream","closedStart","_animationStartListener","_animationDoneListener","viewportRuler","defaultAutosize","_drawers","_doCheckSubject","_contentMargins","_validateDrawers","updateContentMargins","_autosize","_allDrawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_left","_width","_right","_isPushed","_setContainerClass","onMicrotaskEmpty","isAdd","_closeModalDrawer","_canHaveBackdrop","_backdropOverride","_userContent","_content","autosize","MatSidenavContent","changeDetectorRef","MatSidenavContainer","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","fixedInViewport","fixedTopGap","fixedBottomGap","MatSidenavModule","MatSlideToggleDefaultOptions","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","MatSlideToggle","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","toggleChange","dragChange","_thumbEl","_thumbBarEl","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","_MatInkBarPositioner","_MAT_INK_BAR_POSITIONER","_MAT_INK_BAR_POSITIONER_FACTORY","method","offsetLeft","MatInkBar","_inkBarPositioner","show","_setStyles","inkBar","MatTabContent","MatTabLabel","MatTabBase","_MatTabMixinBase","MAT_TAB_GROUP","MatTab","_closestTabGroup","textLabel","_contentPortal","isActive","_explicitContent","_implicitContent","_templateLabel","templateLabel","read","matTabsAnimations","translateTab","MatTabBodyPortal","_host","_centeringSub","_leavingSub","_beforeCentering","_isCenterPosition","isCentering","_afterLeavingCenter","MatTabBody","_MatTabBodyBase","_dirChangeSubscription","_translateTabComplete","_onCentering","_onCentered","animationDuration","_computePositionAnimationState","_computePositionFromOrigin","_getLayoutDirection","_positionIndex","_portalHost","MatTabsConfig","MAT_TABS_CONFIG","nextId","MatTabChangeEvent","MatTabGroupMixinBase","_MatTabGroupMixinBase","MatTabGroupBaseHeader","_MatTabGroupBase","defaultConfig","_tabs","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","disablePagination","indexToSelect","_clampTabIndex","isFirstRun","_createChangeEvent","tab","_subscribeToAllTabChanges","_subscribeToTabLabels","tabs","_allTabs","_tabHeader","_alignInkBarToSelectedTab","tabHeight","wrapper","_tabBodyWrapper","offsetHeight","tabHeader","focusIndex","idx","_animationDuration","_backgroundColor","backgroundColor","dynamicHeight","MatTabGroup","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","EXAGGERATED_OVERSCROLL","HEADER_SCROLL_DELAY","HEADER_SCROLL_INTERVAL","MatPaginatedTabHeader","_viewportRuler","_scrollDistance","_selectedIndexChanged","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_stopScrolling","selectFocusedIndex","indexFocused","_stopInterval","_previousPaginator","_handlePaginatorPress","_nextPaginator","dirChange","resize","realign","updatePagination","_items","newFocusIndex","_setTabFocus","_tabLabelCount","_scrollToLabel","_checkScrollingControls","_scrollDistanceChanged","_updateTabScrollPosition","_itemSelected","_currentTextContent","_checkPaginationEnabled","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","TRIDENT","EDGE","viewLength","scrollAmount","_scrollTo","_scrollHeader","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","_getMaxScrollDistance","lengthOfTabList","selectedItem","selectedLabelWrapper","_inkBar","alignToElement","hide","mouseEvent","maxScrollDistance","distance","_MatTabHeaderBase","_disableRipple","MatTabHeader","_MatTabNavBase","updateActiveLink","MatTabNav","MatTabLink","MatTabLinkMixinBase","_MatTabLinkMixinBase","_MatTabLinkBase","_tabNavBar","_isActive","animation","enterDuration","exitDuration","tabNavBar","focusMonitor","_tabLinkRipple","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_checkToolbarMixedModes","_toolbarRows","isCombinedUsage","node","COMMENT_NODE","throwToolbarMixedModesError","MatToolbarModule","SharedModule"],"mappings":"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","file":"default~authorization-authorization-module-ngfactory~profile-profile-module-ngfactory-es5.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autofill.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n * @type {?}\n */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    /**\n     * @param {?} _platform\n     * @param {?} _ngZone\n     */\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        /** @type {?} */\n        const result = new Subject();\n        /** @type {?} */\n        const cssClass = 'cdk-text-field-autofilled';\n        /** @type {?} */\n        const listener = (/** @type {?} */ (((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true })));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false })));\n            }\n        }))));\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        }));\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: (/**\n             * @return {?}\n             */\n            () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            })\n        });\n        return result.asObservable();\n    }\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    stopMonitoring(elementOrRef) {\n        /** @type {?} */\n        const element = coerceElement(elementOrRef);\n        /** @type {?} */\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._monitoredElements.forEach((/**\n         * @param {?} _info\n         * @param {?} element\n         * @return {?}\n         */\n        (_info, element) => this.stopMonitoring(element)));\n    }\n}\nAutofillMonitor.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/** @nocollapse */ AutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._monitoredElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    AutofillMonitor.prototype._ngZone;\n}\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nclass CdkAutofill {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _autofillMonitor\n     */\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => this.cdkAutofill.emit(event)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkAutofill]',\n            },] }\n];\n/** @nocollapse */\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\nif (false) {\n    /**\n     * Emits when the autofill state of the element changes.\n     * @type {?}\n     */\n    CdkAutofill.prototype.cdkAutofill;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkAutofill.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nclass CdkTextareaAutosize {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?=} document\n     */\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /**\n     * Minimum amount of rows in the textarea.\n     * @return {?}\n     */\n    get minRows() { return this._minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /**\n     * Maximum amount of rows in the textarea.\n     * @return {?}\n     */\n    get maxRows() { return this._maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /**\n     * Whether autosizing is enabled or not\n     * @return {?}\n     */\n    get enabled() { return this._enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    _setMinHeight() {\n        /** @type {?} */\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    _setMaxHeight() {\n        /** @type {?} */\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.resizeToFitContent(true)));\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @private\n     * @return {?}\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        /** @type {?} */\n        let textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        /** @type {?} */\n        const textarea = (/** @type {?} */ (this._elementRef.nativeElement));\n        /** @type {?} */\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        /** @type {?} */\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        /** @type {?} */\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n            else {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => this._scrollToCaretPosition(textarea)));\n            }\n        }));\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     * @return {?}\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Access injected document if available or fallback to global document reference\n     * @private\n     * @return {?}\n     */\n    _getDocument() {\n        return this._document || document;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        /** @type {?} */\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     * @private\n     * @param {?} textarea\n     * @return {?}\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        /** @type {?} */\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                },\n            },] }\n];\n/** @nocollapse */\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\nif (false) {\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_minRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_maxRows;\n    /** @type {?} */\n    CdkTextareaAutosize.ngAcceptInputType_enabled;\n    /**\n     * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._initialHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._destroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._minRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._maxRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._enabled;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._previousMinRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._textareaElement;\n    /**\n     * Cached height of a textarea with a single row.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._cachedLineHeight;\n    /**\n     * Used to reference correct document/window\n     * @type {?}\n     * @protected\n     */\n    CdkTextareaAutosize.prototype._document;\n    /**\n     * Class that should be applied to the textarea while it's being measured.\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._measuringClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkTextareaAutosize.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/text-field-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TextFieldModule {\n}\nTextFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/text-field/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n//# sourceMappingURL=text-field.js.map\n","/**\n * @license Angular v9.0.7\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { InjectionToken, forwardRef, Directive, Renderer2, ElementRef, Optional, Inject, Self, ɵisPromise, ɵisObservable, Injectable, Injector, Input, ɵlooseIdentical, Host, isDevMode, EventEmitter, SkipSelf, Output, NgModule, Version } from '@angular/core';\nimport { ɵgetDOM } from '@angular/common';\nimport { forkJoin, from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/control_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * Defines an interface that acts as a bridge between the Angular forms API and a\n * native element in the DOM.\n *\n * Implement this interface to create a custom form control directive\n * that integrates with Angular forms.\n *\n * @see DefaultValueAccessor\n *\n * \\@publicApi\n * @record\n */\nfunction ControlValueAccessor() { }\nif (false) {\n    /**\n     * \\@description\n     * Writes a new value to the element.\n     *\n     * This method is called by the forms API to write to the view when programmatic\n     * changes from model to view are requested.\n     *\n     * \\@usageNotes\n     * ### Write a value to the element\n     *\n     * The following example writes a value to the native DOM element.\n     *\n     * ```ts\n     * writeValue(value: any): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'value', value);\n     * }\n     * ```\n     *\n     * @param {?} obj The new value for the element\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.writeValue = function (obj) { };\n    /**\n     * \\@description\n     * Registers a callback function that is called when the control's value\n     * changes in the UI.\n     *\n     * This method is called by the forms API on initialization to update the form\n     * model when values propagate from the view to the model.\n     *\n     * When implementing the `registerOnChange` method in your own value accessor,\n     * save the given function so your class calls it at the appropriate time.\n     *\n     * \\@usageNotes\n     * ### Store the change function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnChange(fn: (_: any) => void): void {\n     *   this._onChange = fn;\n     * }\n     * ```\n     *\n     * When the value changes in the UI, call the registered\n     * function to allow the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    '(change)': '_onChange($event.target.value)'\n     * }\n     * ```\n     *\n     * @param {?} fn The callback function to register\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.registerOnChange = function (fn) { };\n    /**\n     * \\@description\n     * Registers a callback function is called by the forms API on initialization\n     * to update the form model on blur.\n     *\n     * When implementing `registerOnTouched` in your own value accessor, save the given\n     * function so your class calls it when the control should be considered\n     * blurred or \"touched\".\n     *\n     * \\@usageNotes\n     * ### Store the callback function\n     *\n     * The following example stores the provided function as an internal method.\n     *\n     * ```ts\n     * registerOnTouched(fn: any): void {\n     *   this._onTouched = fn;\n     * }\n     * ```\n     *\n     * On blur (or equivalent), your class should call the registered function to allow\n     * the forms API to update itself:\n     *\n     * ```ts\n     * host: {\n     *    '(blur)': '_onTouched()'\n     * }\n     * ```\n     *\n     * @param {?} fn The callback function to register\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.registerOnTouched = function (fn) { };\n    /**\n     * \\@description\n     * Function that is called by the forms API when the control status changes to\n     * or from 'DISABLED'. Depending on the status, it enables or disables the\n     * appropriate DOM element.\n     *\n     * \\@usageNotes\n     * The following is an example of writing the disabled property to a native DOM element:\n     *\n     * ```ts\n     * setDisabledState(isDisabled: boolean): void {\n     *   this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n     * }\n     * ```\n     *\n     * @param {?} isDisabled The disabled status to set on the element\n     * @return {?}\n     */\n    ControlValueAccessor.prototype.setDisabledState = function (isDisabled) { };\n}\n/**\n * Used to provide a `ControlValueAccessor` for form controls.\n *\n * See `DefaultValueAccessor` for how to implement one.\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/checkbox_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => CheckboxControlValueAccessor)),\n    multi: true,\n};\n/**\n * \\@description\n * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input\n * element.\n *\n * \\@usageNotes\n *\n * ### Using a checkbox with a reactive form.\n *\n * The following example shows how to use a checkbox with a reactive form.\n *\n * ```ts\n * const rememberLoginControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"checkbox\" [formControl]=\"rememberLoginControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass CheckboxControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"checked\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nCheckboxControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                providers: [CHECKBOX_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nCheckboxControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    CheckboxControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    CheckboxControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    CheckboxControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CheckboxControlValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/default_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst DEFAULT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => DefaultValueAccessor)),\n    multi: true\n};\n/**\n * We must check whether the agent is Android because composition events\n * behave differently between iOS and Android.\n * @return {?}\n */\nfunction _isAndroid() {\n    /** @type {?} */\n    const userAgent = ɵgetDOM() ? ɵgetDOM().getUserAgent() : '';\n    return /android (\\d+)/.test(userAgent.toLowerCase());\n}\n/**\n * \\@description\n * Provide this token to control if form directives buffer IME input until\n * the \"compositionend\" event occurs.\n * \\@publicApi\n * @type {?}\n */\nconst COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');\n/**\n * \\@description\n * The default `ControlValueAccessor` for writing a value and listening to changes on input\n * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using the default value accessor\n *\n * The following example shows how to use an input element that activates the default value accessor\n * (in this case, a text field).\n *\n * ```ts\n * const firstNameControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"text\" [formControl]=\"firstNameControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass DefaultValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _compositionMode\n     */\n    constructor(_renderer, _elementRef, _compositionMode) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._compositionMode = _compositionMode;\n        /**\n         * \\@description\n         * The registered callback function called when an input event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Whether the user is creating a composition string (IME events).\n         */\n        this._composing = false;\n        if (this._compositionMode == null) {\n            this._compositionMode = !_isAndroid();\n        }\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) { this.onChange = fn; }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _handleInput(value) {\n        if (!this._compositionMode || (this._compositionMode && !this._composing)) {\n            this.onChange(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _compositionStart() { this._composing = true; }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _compositionEnd(value) {\n        this._composing = false;\n        this._compositionMode && this.onChange(value);\n    }\n}\nDefaultValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                // TODO: vsavkin replace the above selector with the one below it once\n                // https://github.com/angular/angular/issues/3011 is implemented\n                // selector: '[ngModel],[formControl],[formControlName]',\n                host: {\n                    '(input)': '$any(this)._handleInput($event.target.value)',\n                    '(blur)': 'onTouched()',\n                    '(compositionstart)': '$any(this)._compositionStart()',\n                    '(compositionend)': '$any(this)._compositionEnd($event.target.value)'\n                },\n                providers: [DEFAULT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nDefaultValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when an input event occurs on the input element.\n     * @type {?}\n     */\n    DefaultValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    DefaultValueAccessor.prototype.onTouched;\n    /**\n     * Whether the user is creating a composition string (IME events).\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._composing;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    DefaultValueAccessor.prototype._compositionMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/abstract_control_directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@description\n * Base class for control directives.\n *\n * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControlDirective {\n    /**\n     * \\@description\n     * Reports the value of the control if it is present, otherwise null.\n     * @return {?}\n     */\n    get value() { return this.control ? this.control.value : null; }\n    /**\n     * \\@description\n     * Reports whether the control is valid. A control is considered valid if no\n     * validation errors exist with the current value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valid() { return this.control ? this.control.valid : null; }\n    /**\n     * \\@description\n     * Reports whether the control is invalid, meaning that an error exists in the input value.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get invalid() { return this.control ? this.control.invalid : null; }\n    /**\n     * \\@description\n     * Reports whether a control is pending, meaning that that async validation is occurring and\n     * errors are not yet available for the input value. If the control is not present, null is\n     * returned.\n     * @return {?}\n     */\n    get pending() { return this.control ? this.control.pending : null; }\n    /**\n     * \\@description\n     * Reports whether the control is disabled, meaning that the control is disabled\n     * in the UI and is exempt from validation checks and excluded from aggregate\n     * values of ancestor controls. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get disabled() { return this.control ? this.control.disabled : null; }\n    /**\n     * \\@description\n     * Reports whether the control is enabled, meaning that the control is included in ancestor\n     * calculations of validity or value. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get enabled() { return this.control ? this.control.enabled : null; }\n    /**\n     * \\@description\n     * Reports the control's validation errors. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get errors() { return this.control ? this.control.errors : null; }\n    /**\n     * \\@description\n     * Reports whether the control is pristine, meaning that the user has not yet changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get pristine() { return this.control ? this.control.pristine : null; }\n    /**\n     * \\@description\n     * Reports whether the control is dirty, meaning that the user has changed\n     * the value in the UI. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get dirty() { return this.control ? this.control.dirty : null; }\n    /**\n     * \\@description\n     * Reports whether the control is touched, meaning that the user has triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get touched() { return this.control ? this.control.touched : null; }\n    /**\n     * \\@description\n     * Reports the validation status of the control. Possible values include:\n     * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get status() { return this.control ? this.control.status : null; }\n    /**\n     * \\@description\n     * Reports whether the control is untouched, meaning that the user has not yet triggered\n     * a `blur` event on it. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get untouched() { return this.control ? this.control.untouched : null; }\n    /**\n     * \\@description\n     * Returns a multicasting observable that emits a validation status whenever it is\n     * calculated for the control. If the control is not present, null is returned.\n     * @return {?}\n     */\n    get statusChanges() {\n        return this.control ? this.control.statusChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns a multicasting observable of value changes for the control that emits every time the\n     * value of the control changes in the UI or programmatically.\n     * If the control is not present, null is returned.\n     * @return {?}\n     */\n    get valueChanges() {\n        return this.control ? this.control.valueChanges : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return null; }\n    /**\n     * \\@description\n     * Resets the control with the provided value if the control is present.\n     * @param {?=} value\n     * @return {?}\n     */\n    reset(value = undefined) {\n        if (this.control)\n            this.control.reset(value);\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return this.control ? this.control.hasError(errorCode, path) : false;\n    }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        return this.control ? this.control.getError(errorCode, path) : null;\n    }\n}\nif (false) {\n    /**\n     * \\@description\n     * A reference to the underlying control.\n     *\n     * @abstract\n     * @return {?} the control that backs this directive. Most properties fall through to that instance.\n     */\n    AbstractControlDirective.prototype.control = function () { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/control_container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for directives that contain multiple registered instances of `NgControl`.\n * Only used by the forms module.\n *\n * \\@publicApi\n * @abstract\n */\nclass ControlContainer extends AbstractControlDirective {\n    /**\n     * \\@description\n     * The top-level form directive for the control.\n     * @return {?}\n     */\n    get formDirective() { return null; }\n    /**\n     * \\@description\n     * The path to this group.\n     * @return {?}\n     */\n    get path() { return null; }\n}\nif (false) {\n    /**\n     * \\@description\n     * The name for the control\n     * @type {?}\n     */\n    ControlContainer.prototype.name;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @return {?}\n */\nfunction unimplemented() {\n    throw new Error('unimplemented');\n}\n/**\n * \\@description\n * A base class that all control `FormControl`-based directives extend. It binds a `FormControl`\n * object to a DOM element.\n *\n * \\@publicApi\n * @abstract\n */\nclass NgControl extends AbstractControlDirective {\n    constructor() {\n        super(...arguments);\n        /**\n         * \\@description\n         * The parent form for the control.\n         *\n         * \\@internal\n         */\n        this._parent = null;\n        /**\n         * \\@description\n         * The name for the control\n         */\n        this.name = null;\n        /**\n         * \\@description\n         * The value accessor for the control\n         */\n        this.valueAccessor = null;\n        /**\n         * \\@description\n         * The uncomposed array of synchronous validators for the control\n         *\n         * \\@internal\n         */\n        this._rawValidators = [];\n        /**\n         * \\@description\n         * The uncomposed array of async validators for the control\n         *\n         * \\@internal\n         */\n        this._rawAsyncValidators = [];\n    }\n    /**\n     * \\@description\n     * The registered synchronous validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get validator() { return (/** @type {?} */ (unimplemented())); }\n    /**\n     * \\@description\n     * The registered async validator function for the control\n     *\n     * @throws An exception that this method is not implemented\n     * @return {?}\n     */\n    get asyncValidator() { return (/** @type {?} */ (unimplemented())); }\n}\nif (false) {\n    /**\n     * \\@description\n     * The parent form for the control.\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._parent;\n    /**\n     * \\@description\n     * The name for the control\n     * @type {?}\n     */\n    NgControl.prototype.name;\n    /**\n     * \\@description\n     * The value accessor for the control\n     * @type {?}\n     */\n    NgControl.prototype.valueAccessor;\n    /**\n     * \\@description\n     * The uncomposed array of synchronous validators for the control\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._rawValidators;\n    /**\n     * \\@description\n     * The uncomposed array of async validators for the control\n     *\n     * \\@internal\n     * @type {?}\n     */\n    NgControl.prototype._rawAsyncValidators;\n    /**\n     * \\@description\n     * The callback method to update the model from the view when requested\n     *\n     * @abstract\n     * @param {?} newValue The new value for the view\n     * @return {?}\n     */\n    NgControl.prototype.viewToModelUpdate = function (newValue) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_control_status.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) { this._cd = cd; }\n    /**\n     * @return {?}\n     */\n    get ngClassUntouched() { return this._cd.control ? this._cd.control.untouched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassTouched() { return this._cd.control ? this._cd.control.touched : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPristine() { return this._cd.control ? this._cd.control.pristine : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassDirty() { return this._cd.control ? this._cd.control.dirty : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassValid() { return this._cd.control ? this._cd.control.valid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassInvalid() { return this._cd.control ? this._cd.control.invalid : false; }\n    /**\n     * @return {?}\n     */\n    get ngClassPending() { return this._cd.control ? this._cd.control.pending : false; }\n}\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControlStatus.prototype._cd;\n}\n/** @type {?} */\nconst ngControlStatusHost = {\n    '[class.ng-untouched]': 'ngClassUntouched',\n    '[class.ng-touched]': 'ngClassTouched',\n    '[class.ng-pristine]': 'ngClassPristine',\n    '[class.ng-dirty]': 'ngClassDirty',\n    '[class.ng-valid]': 'ngClassValid',\n    '[class.ng-invalid]': 'ngClassInvalid',\n    '[class.ng-pending]': 'ngClassPending',\n};\n/**\n * \\@description\n * Directive automatically applied to Angular form controls that sets CSS classes\n * based on control status.\n *\n * \\@usageNotes\n *\n * ### CSS classes applied\n *\n * The following classes are applied as the properties become true:\n *\n * * ng-valid\n * * ng-invalid\n * * ng-pending\n * * ng-pristine\n * * ng-dirty\n * * ng-untouched\n * * ng-touched\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatus extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatus.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] }\n];\n/** @nocollapse */\nNgControlStatus.ctorParameters = () => [\n    { type: NgControl, decorators: [{ type: Self }] }\n];\n/**\n * \\@description\n * Directive automatically applied to Angular form groups that sets CSS classes\n * based on control status (valid/invalid/dirty/etc).\n *\n * @see `NgControlStatus`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgControlStatusGroup extends AbstractControlStatus {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        super(cd);\n    }\n}\nNgControlStatusGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                host: ngControlStatusHost\n            },] }\n];\n/** @nocollapse */\nNgControlStatusGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Self }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/validators.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isEmptyInputValue(value) {\n    // we don't check for string here so it also works with arrays\n    return value == null || value.length === 0;\n}\n/**\n * \\@description\n * An `InjectionToken` for registering additional synchronous validators used with `AbstractControl`s.\n *\n * @see `NG_ASYNC_VALIDATORS`\n *\n * \\@usageNotes\n *\n * ### Providing a custom validator\n *\n * The following example registers a custom validator directive. Adding the validator to the\n * existing collection of validators requires the `multi: true` option.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors | null {\n *     return { 'custom': true };\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_VALIDATORS = new InjectionToken('NgValidators');\n/**\n * \\@description\n * An `InjectionToken` for registering additional asynchronous validators used with `AbstractControl`s.\n *\n * @see `NG_VALIDATORS`\n *\n * \\@publicApi\n * @type {?}\n */\nconst NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');\n/**\n * A regular expression that matches valid e-mail addresses.\n *\n * At a high level, this regexp matches e-mail addresses of the format `local-part\\@tld`, where:\n * - `local-part` consists of one or more of the allowed characters (alphanumeric and some\n *   punctuation symbols).\n * - `local-part` cannot begin or end with a period (`.`).\n * - `local-part` cannot be longer than 64 characters.\n * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or\n *   `foo.com`.\n * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and\n *   periods (`.`)).\n * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).\n * - A `label` cannot be longer than 63 characters.\n * - The whole address cannot be longer than 254 characters.\n *\n * ## Implementation background\n *\n * This regexp was ported over from AngularJS (see there for git history):\n * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27\n * It is based on the\n * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with\n * some enhancements to incorporate more RFC rules (such as rules related to domain names and the\n * lengths of different parts of the address). The main differences from the WHATWG version are:\n *   - Disallow `local-part` to begin or end with a period (`.`).\n *   - Disallow `local-part` length to exceed 64 characters.\n *   - Disallow total address length to exceed 254 characters.\n *\n * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.\n * @type {?}\n */\nconst EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n/**\n * \\@description\n * Provides a set of built-in validators that can be used by form controls.\n *\n * A validator is a function that processes a `FormControl` or collection of\n * controls and returns an error map or null. A null map means that validation has passed.\n *\n * @see [Form Validation](/guide/form-validation)\n *\n * \\@publicApi\n */\nclass Validators {\n    /**\n     * \\@description\n     * Validator that requires the control's value to be greater than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a minimum of 3\n     *\n     * ```typescript\n     * const control = new FormControl(2, Validators.min(3));\n     *\n     * console.log(control.errors); // {min: {min: 3, actual: 2}}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} min\n     * @return {?} A validator function that returns an error map with the\n     * `min` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static min(min) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min\n            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to be less than or equal to the provided number.\n     * The validator exists only as a function and not as a directive.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate against a maximum of 15\n     *\n     * ```typescript\n     * const control = new FormControl(16, Validators.max(15));\n     *\n     * console.log(control.errors); // {max: {max: 15, actual: 16}}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} max\n     * @return {?} A validator function that returns an error map with the\n     * `max` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static max(max) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = parseFloat(control.value);\n            // Controls with NaN values after parsing should be treated as not having a\n            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max\n            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control have a non-empty value.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field is non-empty\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.required);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map with the `required` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static required(control) {\n        return isEmptyInputValue(control.value) ? { 'required': true } : null;\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value be true. This validator is commonly\n     * used for required checkboxes.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field value is true\n     *\n     * ```typescript\n     * const control = new FormControl('', Validators.requiredTrue);\n     *\n     * console.log(control.errors); // {required: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map that contains the `required` property\n     * set to `true` if the validation check fails, otherwise `null`.\n     *\n     */\n    static requiredTrue(control) {\n        return control.value === true ? null : { 'required': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value pass an email validation test.\n     *\n     * Tests the value using a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)\n     * pattern suitable for common usecases. The pattern is based on the definition of a valid email\n     * address in the [WHATWG HTML specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address)\n     * with some enhancements to incorporate more RFC rules (such as rules related to domain names and\n     * the lengths of different parts of the address).\n     *\n     * The differences from the WHATWG version include:\n     * - Disallow `local-part` (the part before the `\\@` symbol) to begin or end with a period (`.`).\n     * - Disallow `local-part` to be longer than 64 characters.\n     * - Disallow the whole address to be longer than 254 characters.\n     *\n     * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to\n     * validate the value against a different pattern.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field matches a valid email pattern\n     *\n     * ```typescript\n     * const control = new FormControl('bad\\@', Validators.email);\n     *\n     * console.log(control.errors); // {email: true}\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?} An error map with the `email` property\n     * if the validation check fails, otherwise `null`.\n     *\n     */\n    static email(control) {\n        if (isEmptyInputValue(control.value)) {\n            return null; // don't validate empty values to allow optional controls\n        }\n        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be greater than or equal\n     * to the provided minimum length. This validator is also provided by default if you use the\n     * the HTML5 `minlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has a minimum of 3 characters\n     *\n     * ```typescript\n     * const control = new FormControl('ng', Validators.minLength(3));\n     *\n     * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}\n     * ```\n     *\n     * ```html\n     * <input minlength=\"5\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} minLength\n     * @return {?} A validator function that returns an error map with the\n     * `minlength` if the validation check fails, otherwise `null`.\n     *\n     */\n    static minLength(minLength) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length < minLength ?\n                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :\n                null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the length of the control's value to be less than or equal\n     * to the provided maximum length. This validator is also provided by default if you use the\n     * the HTML5 `maxlength` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field has maximum of 5 characters\n     *\n     * ```typescript\n     * const control = new FormControl('Angular', Validators.maxLength(5));\n     *\n     * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}\n     * ```\n     *\n     * ```html\n     * <input maxlength=\"5\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} maxLength\n     * @return {?} A validator function that returns an error map with the\n     * `maxlength` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static maxLength(maxLength) {\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            /** @type {?} */\n            const length = control.value ? control.value.length : 0;\n            return length > maxLength ?\n                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :\n                null;\n        });\n    }\n    /**\n     * \\@description\n     * Validator that requires the control's value to match a regex pattern. This validator is also\n     * provided by default if you use the HTML5 `pattern` attribute.\n     *\n     * \\@usageNotes\n     *\n     * ### Validate that the field only contains letters or spaces\n     *\n     * ```typescript\n     * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));\n     *\n     * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}\n     * ```\n     *\n     * ```html\n     * <input pattern=\"[a-zA-Z ]*\">\n     * ```\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} pattern A regular expression to be used as is to test the values, or a string.\n     * If a string is passed, the `^` character is prepended and the `$` character is\n     * appended to the provided string (if not already present), and the resulting regular\n     * expression is used to test the values.\n     *\n     * @return {?} A validator function that returns an error map with the\n     * `pattern` property if the validation check fails, otherwise `null`.\n     *\n     */\n    static pattern(pattern) {\n        if (!pattern)\n            return Validators.nullValidator;\n        /** @type {?} */\n        let regex;\n        /** @type {?} */\n        let regexStr;\n        if (typeof pattern === 'string') {\n            regexStr = '';\n            if (pattern.charAt(0) !== '^')\n                regexStr += '^';\n            regexStr += pattern;\n            if (pattern.charAt(pattern.length - 1) !== '$')\n                regexStr += '$';\n            regex = new RegExp(regexStr);\n        }\n        else {\n            regexStr = pattern.toString();\n            regex = pattern;\n        }\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            if (isEmptyInputValue(control.value)) {\n                return null; // don't validate empty values to allow optional controls\n            }\n            /** @type {?} */\n            const value = control.value;\n            return regex.test(value) ? null :\n                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };\n        });\n    }\n    /**\n     * \\@description\n     * Validator that performs no operation.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} control\n     * @return {?}\n     */\n    static nullValidator(control) { return null; }\n    /**\n     * @param {?} validators\n     * @return {?}\n     */\n    static compose(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            return _mergeErrors(_executeValidators(control, presentValidators));\n        });\n    }\n    /**\n     * \\@description\n     * Compose multiple async validators into a single function that returns the union\n     * of the individual error objects for the provided control.\n     *\n     * @see `updateValueAndValidity()`\n     *\n     * @param {?} validators\n     * @return {?} A validator function that returns an error map with the\n     * merged error objects of the async validators if the validation check fails, otherwise `null`.\n     *\n     */\n    static composeAsync(validators) {\n        if (!validators)\n            return null;\n        /** @type {?} */\n        const presentValidators = (/** @type {?} */ (validators.filter(isPresent)));\n        if (presentValidators.length == 0)\n            return null;\n        return (/**\n         * @param {?} control\n         * @return {?}\n         */\n        function (control) {\n            /** @type {?} */\n            const observables = _executeAsyncValidators(control, presentValidators).map(toObservable);\n            return forkJoin(observables).pipe(map(_mergeErrors));\n        });\n    }\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPresent(o) {\n    return o != null;\n}\n/**\n * @param {?} r\n * @return {?}\n */\nfunction toObservable(r) {\n    /** @type {?} */\n    const obs = ɵisPromise(r) ? from(r) : r;\n    if (!(ɵisObservable(obs))) {\n        throw new Error(`Expected validator to return Promise or Observable.`);\n    }\n    return obs;\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeValidators(control, validators) {\n    return validators.map((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v(control)));\n}\n/**\n * @param {?} control\n * @param {?} validators\n * @return {?}\n */\nfunction _executeAsyncValidators(control, validators) {\n    return validators.map((/**\n     * @param {?} v\n     * @return {?}\n     */\n    v => v(control)));\n}\n/**\n * @param {?} arrayOfErrors\n * @return {?}\n */\nfunction _mergeErrors(arrayOfErrors) {\n    /** @type {?} */\n    let res = {};\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    arrayOfErrors.forEach((/**\n     * @param {?} errors\n     * @return {?}\n     */\n    (errors) => {\n        res = errors != null ? Object.assign(Object.assign({}, (/** @type {?} */ (res))), errors) : (/** @type {?} */ (res));\n    }));\n    return Object.keys(res).length === 0 ? null : res;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/normalize_validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => ((/** @type {?} */ (validator))).validate(c));\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n/**\n * @param {?} validator\n * @return {?}\n */\nfunction normalizeAsyncValidator(validator) {\n    if (((/** @type {?} */ (validator))).validate) {\n        return (/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => ((/** @type {?} */ (validator))).validate(c));\n    }\n    else {\n        return (/** @type {?} */ (validator));\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/number_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst NUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NumberValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a number value and listening to number input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a number input with a reactive form.\n *\n * The following example shows how to use a number input with a reactive form.\n *\n * ```ts\n * const totalCountControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"number\" [formControl]=\"totalCountControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NumberValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n        /** @type {?} */\n        const normalizedValue = value == null ? '' : value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => { fn(value == '' ? null : parseFloat(value)); });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nNumberValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [NUMBER_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nNumberValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change or input event occurs on the input\n     * element.\n     * @type {?}\n     */\n    NumberValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    NumberValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    NumberValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NumberValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/radio_control_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RADIO_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RadioControlValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * Class used by Angular to track radio buttons. For internal use only.\n */\nclass RadioControlRegistry {\n    constructor() {\n        this._accessors = [];\n    }\n    /**\n     * \\@description\n     * Adds a control to the internal registry. For internal use only.\n     * @param {?} control\n     * @param {?} accessor\n     * @return {?}\n     */\n    add(control, accessor) {\n        this._accessors.push([control, accessor]);\n    }\n    /**\n     * \\@description\n     * Removes a control from the internal registry. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    remove(accessor) {\n        for (let i = this._accessors.length - 1; i >= 0; --i) {\n            if (this._accessors[i][1] === accessor) {\n                this._accessors.splice(i, 1);\n                return;\n            }\n        }\n    }\n    /**\n     * \\@description\n     * Selects a radio button. For internal use only.\n     * @param {?} accessor\n     * @return {?}\n     */\n    select(accessor) {\n        this._accessors.forEach((/**\n         * @param {?} c\n         * @return {?}\n         */\n        (c) => {\n            if (this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].fireUncheck(accessor.value);\n            }\n        }));\n    }\n    /**\n     * @private\n     * @param {?} controlPair\n     * @param {?} accessor\n     * @return {?}\n     */\n    _isSameGroup(controlPair, accessor) {\n        if (!controlPair[0].control)\n            return false;\n        return controlPair[0]._parent === accessor._control._parent &&\n            controlPair[1].name === accessor.name;\n    }\n}\nRadioControlRegistry.decorators = [\n    { type: Injectable }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlRegistry.prototype._accessors;\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing radio control values and listening to radio control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using radio buttons with reactive form directives\n *\n * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in\n * a reactive form, radio buttons in the same group should have the same `formControlName`.\n * Providing a `name` attribute is optional.\n *\n * {\\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RadioControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     * @param {?} _registry\n     * @param {?} _injector\n     */\n    constructor(_renderer, _elementRef, _registry, _injector) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        this._registry = _registry;\n        this._injector = _injector;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive is initialized. For internal use only.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._control = this._injector.get(NgControl);\n        this._checkName();\n        this._registry.add(this._control, this);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this._registry.remove(this); }\n    /**\n     * \\@description\n     * Sets the \"checked\" property value on the radio input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._state = value === this.value;\n        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._fn = fn;\n        this.onChange = (/**\n         * @return {?}\n         */\n        () => {\n            fn(this.value);\n            this._registry.select(this);\n        });\n    }\n    /**\n     * Sets the \"value\" on the radio input element and unchecks it.\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    fireUncheck(value) { this.writeValue(value); }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this._throwNameError();\n        }\n        if (!this.name && this.formControlName)\n            this.name = this.formControlName;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _throwNameError() {\n        throw new Error(`\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    `);\n    }\n}\nRadioControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                providers: [RADIO_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRadioControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: RadioControlRegistry },\n    { type: Injector }\n];\nRadioControlValueAccessor.propDecorators = {\n    name: [{ type: Input }],\n    formControlName: [{ type: Input }],\n    value: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._state;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._control;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype._fn;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.onTouched;\n    /**\n     * \\@description\n     * Tracks the name of the radio input element.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.name;\n    /**\n     * \\@description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.formControlName;\n    /**\n     * \\@description\n     * Tracks the value of the radio input element\n     * @type {?}\n     */\n    RadioControlValueAccessor.prototype.value;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._registry;\n    /**\n     * @type {?}\n     * @private\n     */\n    RadioControlValueAccessor.prototype._injector;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/range_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst RANGE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RangeValueAccessor)),\n    multi: true\n};\n/**\n * \\@description\n * The `ControlValueAccessor` for writing a range value and listening to range input changes.\n * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`\n * directives.\n *\n * \\@usageNotes\n *\n * ### Using a range input with a reactive form\n *\n * The following example shows how to use a range input with a reactive form.\n *\n * ```ts\n * const ageControl = new FormControl();\n * ```\n *\n * ```\n * <input type=\"range\" [formControl]=\"ageControl\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass RangeValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@description\n         * The registered callback function called when a change or input event occurs on the input\n         * element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Sets the \"value\" property on the input element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} value\n         * @return {?}\n         */\n        (value) => { fn(value == '' ? null : parseFloat(value)); });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the range input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nRangeValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',\n                host: {\n                    '(change)': 'onChange($event.target.value)',\n                    '(input)': 'onChange($event.target.value)',\n                    '(blur)': 'onTouched()'\n                },\n                providers: [RANGE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nRangeValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * \\@description\n     * The registered callback function called when a change or input event occurs on the input\n     * element.\n     * @type {?}\n     */\n    RangeValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    RangeValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    RangeValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    RangeValueAccessor.prototype._elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/error_examples.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @type {?} */\nconst FormErrorExamples = {\n    formControlName: `\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });`,\n    formGroupName: `\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });`,\n    formArrayName: `\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });`,\n    ngModelGroup: `\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>`,\n    ngModelWithFormGroup: `\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  `\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/reactive_errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ReactiveErrors {\n    /**\n     * @return {?}\n     */\n    static controlParentException() {\n        throw new Error(`formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static ngModelGroupException() {\n        throw new Error(`formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        ${FormErrorExamples.formGroupName}\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingFormException() {\n        throw new Error(`formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       ${FormErrorExamples.formControlName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static groupParentException() {\n        throw new Error(`formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      ${FormErrorExamples.formGroupName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static arrayParentException() {\n        throw new Error(`formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        ${FormErrorExamples.formArrayName}`);\n    }\n    /**\n     * @return {?}\n     */\n    static disabledAttrWarning() {\n        console.warn(`\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    `);\n    }\n    /**\n     * @param {?} directiveName\n     * @return {?}\n     */\n    static ngModelWarning(directiveName) {\n        console.warn(`\n    It looks like you're using ngModel on the same form field as ${directiveName}. \n    Support for using the ngModel input property and ngModelChange event with \n    reactive form directives has been deprecated in Angular v6 and will be removed \n    in Angular v7.\n    \n    For more information on this, see our API docs here:\n    https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective'\n            : 'FormControlName'}#use-with-ngmodel\n    `);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/select_control_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => SelectControlValueAccessor)),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing select control values and listening to select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and\n * `NgModel` directives.\n *\n * \\@usageNotes\n *\n * ### Using select controls in a reactive form\n *\n * The following examples show how to use a select control in a reactive form.\n *\n * {\\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}\n *\n * ### Using select controls in a template-driven form\n *\n * To use a select in a template-driven form, simply add an `ngModel` and a `name`\n * attribute to the main `<select>` tag.\n *\n * {\\@example forms/ts/selectControl/select_control_example.ts region='Component'}\n *\n * ### Customizing option selection\n *\n * Angular uses object identity to select option. It's possible for the identities of items\n * to change while the data does not. This can happen, for example, if the items are produced\n * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the\n * second response will produce objects with different identities.\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.\n * If `compareWith` is given, Angular selects option by the return value of the function.\n *\n * ```ts\n * const selectedCountriesControl = new FormControl();\n * ```\n *\n * ```\n * <select [compareWith]=\"compareFn\"  [formControl]=\"selectedCountriesControl\">\n *     <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *         {{country.name}}\n *     </option>\n * </select>\n *\n * compareFn(c1: Country, c2: Country): boolean {\n *     return c1 && c2 ? c1.id === c2.id : c1 === c2;\n * }\n * ```\n *\n * **Note:** We listen to the 'change' event because 'input' events aren't fired\n * for selects in Firefox and IE:\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * Sets the \"value\" property on the input element. The \"selectedIndex\"\n     * property is also set if an ID is provided on the option element.\n     *\n     * @param {?} value The checked value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        const id = this._getOptionId(value);\n        if (id == null) {\n            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);\n        }\n        /** @type {?} */\n        const valueString = _buildValueString(id, value);\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} valueString\n         * @return {?}\n         */\n        (valueString) => {\n            this.value = this._getOptionValue(valueString);\n            fn(this.value);\n        });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _registerOption() { return (this._idCounter++).toString(); }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith(this._optionMap.get(id), value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId(valueString);\n        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;\n    }\n}\nSelectControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                providers: [SELECT_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    SelectControlValueAccessor.prototype.value;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype._optionMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype._idCounter;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    SelectControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._compareWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectControlValueAccessor.prototype._elementRef;\n}\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgSelectOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select)\n            this.id = this._select._registerOption();\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._select._optionMap.set(this.id, value);\n        this._setElementValue(_buildValueString(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this._setElementValue(value);\n        if (this._select)\n            this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nNgSelectOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nNgSelectOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nNgSelectOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * ID of the option element\n     * @type {?}\n     */\n    NgSelectOption.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgSelectOption.prototype._select;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/select_multiple_control_value_accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SELECT_MULTIPLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => SelectMultipleControlValueAccessor)),\n    multi: true\n};\n/**\n * @param {?} id\n * @param {?} value\n * @return {?}\n */\nfunction _buildValueString$1(id, value) {\n    if (id == null)\n        return `${value}`;\n    if (typeof value === 'string')\n        value = `'${value}'`;\n    if (value && typeof value === 'object')\n        value = 'Object';\n    return `${id}: ${value}`.slice(0, 50);\n}\n/**\n * @param {?} valueString\n * @return {?}\n */\nfunction _extractId$1(valueString) {\n    return valueString.split(':')[0];\n}\n/**\n * Mock interface for HTML Options\n * @record\n */\nfunction HTMLOption() { }\nif (false) {\n    /** @type {?} */\n    HTMLOption.prototype.value;\n    /** @type {?} */\n    HTMLOption.prototype.selected;\n}\n/**\n * Mock interface for HTMLCollection\n * @abstract\n */\nclass HTMLCollection {\n}\nif (false) {\n    /** @type {?} */\n    HTMLCollection.prototype.length;\n    /**\n     * @abstract\n     * @param {?} _\n     * @return {?}\n     */\n    HTMLCollection.prototype.item = function (_) { };\n}\n/**\n * \\@description\n * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select control\n * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`\n * directives.\n *\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using a multi-select control\n *\n * The follow example shows you how to use a multi-select control with a reactive form.\n *\n * ```ts\n * const countryControl = new FormControl();\n * ```\n *\n * ```\n * <select multiple name=\"countries\" [formControl]=\"countryControl\">\n *   <option *ngFor=\"let country of countries\" [ngValue]=\"country\">\n *     {{ country.name }}\n *   </option>\n * </select>\n * ```\n *\n * ### Customizing option selection\n *\n * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.\n * See the `SelectControlValueAccessor` for usage.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass SelectMultipleControlValueAccessor {\n    /**\n     * @param {?} _renderer\n     * @param {?} _elementRef\n     */\n    constructor(_renderer, _elementRef) {\n        this._renderer = _renderer;\n        this._elementRef = _elementRef;\n        /**\n         * \\@internal\n         */\n        this._optionMap = new Map();\n        /**\n         * \\@internal\n         */\n        this._idCounter = 0;\n        /**\n         * \\@description\n         * The registered callback function called when a change event occurs on the input element.\n         */\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * \\@description\n         * The registered callback function called when a blur event occurs on the input element.\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._compareWith = ɵlooseIdentical;\n    }\n    /**\n     * \\@description\n     * Tracks the option comparison algorithm for tracking identities when\n     * checking for changes.\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw new Error(`compareWith must be a function, but received ${JSON.stringify(fn)}`);\n        }\n        this._compareWith = fn;\n    }\n    /**\n     * \\@description\n     * Sets the \"value\" property on one or of more\n     * of the select's options.\n     *\n     * @param {?} value The value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        /** @type {?} */\n        let optionSelectedStateSetter;\n        if (Array.isArray(value)) {\n            // convert values to ids\n            /** @type {?} */\n            const ids = value.map((/**\n             * @param {?} v\n             * @return {?}\n             */\n            (v) => this._getOptionId(v)));\n            optionSelectedStateSetter = (/**\n             * @param {?} opt\n             * @param {?} o\n             * @return {?}\n             */\n            (opt, o) => { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        }\n        else {\n            optionSelectedStateSetter = (/**\n             * @param {?} opt\n             * @param {?} o\n             * @return {?}\n             */\n            (opt, o) => { opt._setSelected(false); });\n        }\n        this._optionMap.forEach(optionSelectedStateSetter);\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control value changes\n     * and writes an array of the selected options.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => {\n            /** @type {?} */\n            const selected = [];\n            if (_.hasOwnProperty('selectedOptions')) {\n                /** @type {?} */\n                const options = _.selectedOptions;\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    /** @type {?} */\n                    const val = this._getOptionValue(opt.value);\n                    selected.push(val);\n                }\n            }\n            // Degrade on IE\n            else {\n                /** @type {?} */\n                const options = (/** @type {?} */ (_.options));\n                for (let i = 0; i < options.length; i++) {\n                    /** @type {?} */\n                    const opt = options.item(i);\n                    if (opt.selected) {\n                        /** @type {?} */\n                        const val = this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n            }\n            this.value = selected;\n            fn(selected);\n        });\n    }\n    /**\n     * \\@description\n     * Registers a function called when the control is touched.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnTouched(fn) { this.onTouched = fn; }\n    /**\n     * Sets the \"disabled\" property on the select input element.\n     *\n     * @param {?} isDisabled The disabled value\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _registerOption(value) {\n        /** @type {?} */\n        const id = (this._idCounter++).toString();\n        this._optionMap.set(id, value);\n        return id;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _getOptionId(value) {\n        for (const id of Array.from(this._optionMap.keys())) {\n            if (this._compareWith((/** @type {?} */ (this._optionMap.get(id)))._value, value))\n                return id;\n        }\n        return null;\n    }\n    /**\n     * \\@internal\n     * @param {?} valueString\n     * @return {?}\n     */\n    _getOptionValue(valueString) {\n        /** @type {?} */\n        const id = _extractId$1(valueString);\n        return this._optionMap.has(id) ? (/** @type {?} */ (this._optionMap.get(id)))._value : valueString;\n    }\n}\nSelectMultipleControlValueAccessor.decorators = [\n    { type: Directive, args: [{\n                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n            },] }\n];\n/** @nocollapse */\nSelectMultipleControlValueAccessor.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nSelectMultipleControlValueAccessor.propDecorators = {\n    compareWith: [{ type: Input }]\n};\nif (false) {\n    /**\n     * \\@description\n     * The current value\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.value;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._optionMap;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype._idCounter;\n    /**\n     * \\@description\n     * The registered callback function called when a change event occurs on the input element.\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.onChange;\n    /**\n     * \\@description\n     * The registered callback function called when a blur event occurs on the input element.\n     * @type {?}\n     */\n    SelectMultipleControlValueAccessor.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._compareWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    SelectMultipleControlValueAccessor.prototype._elementRef;\n}\n/**\n * \\@description\n * Marks `<option>` as dynamic, so Angular can be notified when options change.\n *\n * @see `SelectMultipleControlValueAccessor`\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass ɵNgSelectMultipleOption {\n    /**\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _select\n     */\n    constructor(_element, _renderer, _select) {\n        this._element = _element;\n        this._renderer = _renderer;\n        this._select = _select;\n        if (this._select) {\n            this.id = this._select._registerOption(this);\n        }\n    }\n    /**\n     * \\@description\n     * Tracks the value bound to the option element. Unlike the value binding,\n     * ngValue supports binding to objects.\n     * @param {?} value\n     * @return {?}\n     */\n    set ngValue(value) {\n        if (this._select == null)\n            return;\n        this._value = value;\n        this._setElementValue(_buildValueString$1(this.id, value));\n        this._select.writeValue(this._select.value);\n    }\n    /**\n     * \\@description\n     * Tracks simple string values bound to the option element.\n     * For objects, use the `ngValue` input binding.\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._select) {\n            this._value = value;\n            this._setElementValue(_buildValueString$1(this.id, value));\n            this._select.writeValue(this._select.value);\n        }\n        else {\n            this._setElementValue(value);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _setElementValue(value) {\n        this._renderer.setProperty(this._element.nativeElement, 'value', value);\n    }\n    /**\n     * \\@internal\n     * @param {?} selected\n     * @return {?}\n     */\n    _setSelected(selected) {\n        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._select) {\n            this._select._optionMap.delete(this.id);\n            this._select.writeValue(this._select.value);\n        }\n    }\n}\nɵNgSelectMultipleOption.decorators = [\n    { type: Directive, args: [{ selector: 'option' },] }\n];\n/** @nocollapse */\nɵNgSelectMultipleOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host }] }\n];\nɵNgSelectMultipleOption.propDecorators = {\n    ngValue: [{ type: Input, args: ['ngValue',] }],\n    value: [{ type: Input, args: ['value',] }]\n};\nif (false) {\n    /** @type {?} */\n    ɵNgSelectMultipleOption.prototype.id;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ɵNgSelectMultipleOption.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    ɵNgSelectMultipleOption.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    ɵNgSelectMultipleOption.prototype._renderer;\n    /**\n     * @type {?}\n     * @private\n     */\n    ɵNgSelectMultipleOption.prototype._select;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/shared.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} name\n * @param {?} parent\n * @return {?}\n */\nfunction controlPath(name, parent) {\n    return [...(/** @type {?} */ (parent.path)), (/** @type {?} */ (name))];\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpControl(control, dir) {\n    if (!control)\n        _throwError(dir, 'Cannot find control with');\n    if (!dir.valueAccessor)\n        _throwError(dir, 'No value accessor for form control with');\n    control.validator = Validators.compose([(/** @type {?} */ (control.validator)), dir.validator]);\n    control.asyncValidator = Validators.composeAsync([(/** @type {?} */ (control.asyncValidator)), dir.asyncValidator]);\n    (/** @type {?} */ (dir.valueAccessor)).writeValue(control.value);\n    setUpViewChangePipeline(control, dir);\n    setUpModelChangePipeline(control, dir);\n    setUpBlurPipeline(control, dir);\n    if ((/** @type {?} */ (dir.valueAccessor)).setDisabledState) {\n        control.registerOnDisabledChange((/**\n         * @param {?} isDisabled\n         * @return {?}\n         */\n        (isDisabled) => { (/** @type {?} */ ((/** @type {?} */ (dir.valueAccessor)).setDisabledState))(isDisabled); }));\n    }\n    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n    dir._rawValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))((/**\n             * @return {?}\n             */\n            () => control.updateValueAndValidity()));\n    }));\n    dir._rawAsyncValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (((/** @type {?} */ (validator))).registerOnValidatorChange)\n            (/** @type {?} */ (((/** @type {?} */ (validator))).registerOnValidatorChange))((/**\n             * @return {?}\n             */\n            () => control.updateValueAndValidity()));\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction cleanUpControl(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((/**\n     * @return {?}\n     */\n    () => _noControlError(dir)));\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched((/**\n     * @return {?}\n     */\n    () => _noControlError(dir)));\n    dir._rawValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    }));\n    dir._rawAsyncValidators.forEach((/**\n     * @param {?} validator\n     * @return {?}\n     */\n    (validator) => {\n        if (validator.registerOnValidatorChange) {\n            validator.registerOnValidatorChange(null);\n        }\n    }));\n    if (control)\n        control._clearChangeFns();\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpViewChangePipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnChange((/**\n     * @param {?} newValue\n     * @return {?}\n     */\n    (newValue) => {\n        control._pendingValue = newValue;\n        control._pendingChange = true;\n        control._pendingDirty = true;\n        if (control.updateOn === 'change')\n            updateControl(control, dir);\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpBlurPipeline(control, dir) {\n    (/** @type {?} */ (dir.valueAccessor)).registerOnTouched((/**\n     * @return {?}\n     */\n    () => {\n        control._pendingTouched = true;\n        if (control.updateOn === 'blur' && control._pendingChange)\n            updateControl(control, dir);\n        if (control.updateOn !== 'submit')\n            control.markAsTouched();\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction updateControl(control, dir) {\n    if (control._pendingDirty)\n        control.markAsDirty();\n    control.setValue(control._pendingValue, { emitModelToViewChange: false });\n    dir.viewToModelUpdate(control._pendingValue);\n    control._pendingChange = false;\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpModelChangePipeline(control, dir) {\n    control.registerOnChange((/**\n     * @param {?} newValue\n     * @param {?} emitModelEvent\n     * @return {?}\n     */\n    (newValue, emitModelEvent) => {\n        // control -> view\n        (/** @type {?} */ (dir.valueAccessor)).writeValue(newValue);\n        // control -> ngModel\n        if (emitModelEvent)\n            dir.viewToModelUpdate(newValue);\n    }));\n}\n/**\n * @param {?} control\n * @param {?} dir\n * @return {?}\n */\nfunction setUpFormContainer(control, dir) {\n    if (control == null)\n        _throwError(dir, 'Cannot find control with');\n    control.validator = Validators.compose([control.validator, dir.validator]);\n    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n}\n/**\n * @param {?} dir\n * @return {?}\n */\nfunction _noControlError(dir) {\n    return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n}\n/**\n * @param {?} dir\n * @param {?} message\n * @return {?}\n */\nfunction _throwError(dir, message) {\n    /** @type {?} */\n    let messageEnd;\n    if ((/** @type {?} */ (dir.path)).length > 1) {\n        messageEnd = `path: '${(/** @type {?} */ (dir.path)).join(' -> ')}'`;\n    }\n    else if ((/** @type {?} */ (dir.path))[0]) {\n        messageEnd = `name: '${dir.path}'`;\n    }\n    else {\n        messageEnd = 'unspecified name attribute';\n    }\n    throw new Error(`${message} ${messageEnd}`);\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeValidators(validators) {\n    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;\n}\n/**\n * @param {?} validators\n * @return {?}\n */\nfunction composeAsyncValidators(validators) {\n    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n        null;\n}\n/**\n * @param {?} changes\n * @param {?} viewModel\n * @return {?}\n */\nfunction isPropertyUpdated(changes, viewModel) {\n    if (!changes.hasOwnProperty('model'))\n        return false;\n    /** @type {?} */\n    const change = changes['model'];\n    if (change.isFirstChange())\n        return true;\n    return !ɵlooseIdentical(viewModel, change.currentValue);\n}\n/** @type {?} */\nconst BUILTIN_ACCESSORS = [\n    CheckboxControlValueAccessor,\n    RangeValueAccessor,\n    NumberValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n];\n/**\n * @param {?} valueAccessor\n * @return {?}\n */\nfunction isBuiltInAccessor(valueAccessor) {\n    return BUILTIN_ACCESSORS.some((/**\n     * @param {?} a\n     * @return {?}\n     */\n    a => valueAccessor.constructor === a));\n}\n/**\n * @param {?} form\n * @param {?} directives\n * @return {?}\n */\nfunction syncPendingControls(form, directives) {\n    form._syncPendingControls();\n    directives.forEach((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => {\n        /** @type {?} */\n        const control = (/** @type {?} */ (dir.control));\n        if (control.updateOn === 'submit' && control._pendingChange) {\n            dir.viewToModelUpdate(control._pendingValue);\n            control._pendingChange = false;\n        }\n    }));\n}\n// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n/**\n * @param {?} dir\n * @param {?} valueAccessors\n * @return {?}\n */\nfunction selectValueAccessor(dir, valueAccessors) {\n    if (!valueAccessors)\n        return null;\n    if (!Array.isArray(valueAccessors))\n        _throwError(dir, 'Value accessor was not provided as an array for form control with');\n    /** @type {?} */\n    let defaultAccessor = undefined;\n    /** @type {?} */\n    let builtinAccessor = undefined;\n    /** @type {?} */\n    let customAccessor = undefined;\n    valueAccessors.forEach((/**\n     * @param {?} v\n     * @return {?}\n     */\n    (v) => {\n        if (v.constructor === DefaultValueAccessor) {\n            defaultAccessor = v;\n        }\n        else if (isBuiltInAccessor(v)) {\n            if (builtinAccessor)\n                _throwError(dir, 'More than one built-in value accessor matches form control with');\n            builtinAccessor = v;\n        }\n        else {\n            if (customAccessor)\n                _throwError(dir, 'More than one custom value accessor matches form control with');\n            customAccessor = v;\n        }\n    }));\n    if (customAccessor)\n        return customAccessor;\n    if (builtinAccessor)\n        return builtinAccessor;\n    if (defaultAccessor)\n        return defaultAccessor;\n    _throwError(dir, 'No valid value accessor for form control with');\n    return null;\n}\n/**\n * @template T\n * @param {?} list\n * @param {?} el\n * @return {?}\n */\nfunction removeDir(list, el) {\n    /** @type {?} */\n    const index = list.indexOf(el);\n    if (index > -1)\n        list.splice(index, 1);\n}\n// TODO(kara): remove after deprecation period\n/**\n * @param {?} name\n * @param {?} type\n * @param {?} instance\n * @param {?} warningConfig\n * @return {?}\n */\nfunction _ngModelWarning(name, type, instance, warningConfig) {\n    if (!isDevMode() || warningConfig === 'never')\n        return;\n    if (((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce) ||\n        (warningConfig === 'always' && !instance._ngModelWarningSent)) {\n        ReactiveErrors.ngModelWarning(name);\n        type._ngModelWarningSentOnce = true;\n        instance._ngModelWarningSent = true;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reports that a FormControl is valid, meaning that no errors exist in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst VALID = 'VALID';\n/**\n * Reports that a FormControl is invalid, meaning that an error exists in the input value.\n *\n * @see `status`\n * @type {?}\n */\nconst INVALID = 'INVALID';\n/**\n * Reports that a FormControl is pending, meaning that that async validation is occurring and\n * errors are not yet available for the input value.\n *\n * @see `markAsPending`\n * @see `status`\n * @type {?}\n */\nconst PENDING = 'PENDING';\n/**\n * Reports that a FormControl is disabled, meaning that the control is exempt from ancestor\n * calculations of validity or value.\n *\n * @see `markAsDisabled`\n * @see `status`\n * @type {?}\n */\nconst DISABLED = 'DISABLED';\n/**\n * @param {?} control\n * @param {?} path\n * @param {?} delimiter\n * @return {?}\n */\nfunction _find(control, path, delimiter) {\n    if (path == null)\n        return null;\n    if (!Array.isArray(path)) {\n        path = path.split(delimiter);\n    }\n    if (Array.isArray(path) && path.length === 0)\n        return null;\n    // Not using Array.reduce here due to a Chrome 80 bug\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982\n    /** @type {?} */\n    let controlToFind = control;\n    path.forEach((/**\n     * @param {?} name\n     * @return {?}\n     */\n    (name) => {\n        if (controlToFind instanceof FormGroup) {\n            controlToFind = controlToFind.controls.hasOwnProperty((/** @type {?} */ (name))) ?\n                controlToFind.controls[name] :\n                null;\n        }\n        else if (controlToFind instanceof FormArray) {\n            controlToFind = controlToFind.at((/** @type {?} */ (name))) || null;\n        }\n        else {\n            controlToFind = null;\n        }\n    }));\n    return controlToFind;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToValidator(validatorOrOpts) {\n    /** @type {?} */\n    const validator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).validators :\n        validatorOrOpts)));\n    return Array.isArray(validator) ? composeValidators(validator) : validator || null;\n}\n/**\n * @param {?=} asyncValidator\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction coerceToAsyncValidator(asyncValidator, validatorOrOpts) {\n    /** @type {?} */\n    const origAsyncValidator = (/** @type {?} */ ((isOptionsObj(validatorOrOpts) ? ((/** @type {?} */ (validatorOrOpts))).asyncValidators :\n        asyncValidator)));\n    return Array.isArray(origAsyncValidator) ? composeAsyncValidators(origAsyncValidator) :\n        origAsyncValidator || null;\n}\n/**\n * Interface for options provided to an `AbstractControl`.\n *\n * \\@publicApi\n * @record\n */\nfunction AbstractControlOptions() { }\nif (false) {\n    /**\n     * \\@description\n     * The list of validators applied to a control.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.validators;\n    /**\n     * \\@description\n     * The list of async validators applied to control.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.asyncValidators;\n    /**\n     * \\@description\n     * The event name for control to update upon.\n     * @type {?|undefined}\n     */\n    AbstractControlOptions.prototype.updateOn;\n}\n/**\n * @param {?=} validatorOrOpts\n * @return {?}\n */\nfunction isOptionsObj(validatorOrOpts) {\n    return validatorOrOpts != null && !Array.isArray(validatorOrOpts) &&\n        typeof validatorOrOpts === 'object';\n}\n/**\n * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.\n *\n * It provides some of the shared behavior that all controls and groups of controls have, like\n * running validators, calculating status, and resetting state. It also defines the properties\n * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n * instantiated directly.\n *\n * @see [Forms Guide](/guide/forms)\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n * @see [Dynamic Forms Guide](/guide/dynamic-form)\n *\n * \\@publicApi\n * @abstract\n */\nclass AbstractControl {\n    /**\n     * Initialize the AbstractControl instance.\n     *\n     * @param {?} validator The function that determines the synchronous validity of this control.\n     * @param {?} asyncValidator The function that determines the asynchronous validity of this\n     * control.\n     */\n    constructor(validator, asyncValidator) {\n        this.validator = validator;\n        this.asyncValidator = asyncValidator;\n        /**\n         * \\@internal\n         */\n        this._onCollectionChange = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * A control is `pristine` if the user has not yet changed\n         * the value in the UI.\n         *\n         * @return True if the user has not yet changed the value in the UI; compare `dirty`.\n         * Programmatic changes to a control's value do not mark it dirty.\n         */\n        this.pristine = true;\n        /**\n         * True if the control is marked as `touched`.\n         *\n         * A control is marked `touched` once the user has triggered\n         * a `blur` event on it.\n         */\n        this.touched = false;\n        /**\n         * \\@internal\n         */\n        this._onDisabledChange = [];\n    }\n    /**\n     * The parent control.\n     * @return {?}\n     */\n    get parent() { return this._parent; }\n    /**\n     * A control is `valid` when its `status` is `VALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has passed all of its validation tests,\n     * false otherwise.\n     */\n    get valid() { return this.status === VALID; }\n    /**\n     * A control is `invalid` when its `status` is `INVALID`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control has failed one or more of its validation checks,\n     * false otherwise.\n     */\n    get invalid() { return this.status === INVALID; }\n    /**\n     * A control is `pending` when its `status` is `PENDING`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if this control is in the process of conducting a validation check,\n     * false otherwise.\n     */\n    get pending() { return this.status == PENDING; }\n    /**\n     * A control is `disabled` when its `status` is `DISABLED`.\n     *\n     * Disabled controls are exempt from validation checks and\n     * are not included in the aggregate value of their ancestor\n     * controls.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control is disabled, false otherwise.\n     */\n    get disabled() { return this.status === DISABLED; }\n    /**\n     * A control is `enabled` as long as its `status` is not `DISABLED`.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @return {?} True if the control has any status other than 'DISABLED',\n     * false if the status is 'DISABLED'.\n     *\n     */\n    get enabled() { return this.status !== DISABLED; }\n    /**\n     * A control is `dirty` if the user has changed the value\n     * in the UI.\n     *\n     * @return {?} True if the user has changed the value of this control in the UI; compare `pristine`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     */\n    get dirty() { return !this.pristine; }\n    /**\n     * True if the control has not been marked as touched\n     *\n     * A control is `untouched` if the user has not yet triggered\n     * a `blur` event on it.\n     * @return {?}\n     */\n    get untouched() { return !this.touched; }\n    /**\n     * Reports the update strategy of the `AbstractControl` (meaning\n     * the event on which the control updates itself).\n     * Possible values: `'change'` | `'blur'` | `'submit'`\n     * Default value: `'change'`\n     * @return {?}\n     */\n    get updateOn() {\n        return this._updateOn ? this._updateOn : (this.parent ? this.parent.updateOn : 'change');\n    }\n    /**\n     * Sets the synchronous validators that are active on this control.  Calling\n     * this overwrites any existing sync validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setValidators(newValidator) {\n        this.validator = coerceToValidator(newValidator);\n    }\n    /**\n     * Sets the async validators that are active on this control. Calling this\n     * overwrites any existing async validators.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @param {?} newValidator\n     * @return {?}\n     */\n    setAsyncValidators(newValidator) {\n        this.asyncValidator = coerceToAsyncValidator(newValidator);\n    }\n    /**\n     * Empties out the sync validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @return {?}\n     */\n    clearValidators() { this.validator = null; }\n    /**\n     * Empties out the async validator list.\n     *\n     * When you add or remove a validator at run time, you must call\n     * `updateValueAndValidity()` for the new validation to take effect.\n     *\n     * @return {?}\n     */\n    clearAsyncValidators() { this.asyncValidator = null; }\n    /**\n     * Marks the control as `touched`. A control is touched by focus and\n     * blur events that do not change the value.\n     *\n     * @see `markAsUntouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = true;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsTouched(opts);\n        }\n    }\n    /**\n     * Marks the control and all its descendant controls as `touched`.\n     * @see `markAsTouched()`\n     * @return {?}\n     */\n    markAllAsTouched() {\n        this.markAsTouched({ onlySelf: true });\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.markAllAsTouched()));\n    }\n    /**\n     * Marks the control as `untouched`.\n     *\n     * If the control has any children, also marks all children as `untouched`\n     * and recalculates the `touched` status of all parent controls.\n     *\n     * @see `markAsTouched()` / `markAsDirty()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after the marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsUntouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = false;\n        this._pendingTouched = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.markAsUntouched({ onlySelf: true }); }));\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * Marks the control as `dirty`. A control becomes dirty when\n     * the control's value is changed through the UI; compare `markAsTouched`.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsPristine()`\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes\n     * and emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false.\n     * @return {?}\n     */\n    markAsDirty(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = false;\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsDirty(opts);\n        }\n    }\n    /**\n     * Marks the control as `pristine`.\n     *\n     * If the control has any children, marks all children as `pristine`,\n     * and recalculates the `pristine` status of all parent\n     * controls.\n     *\n     * @see `markAsTouched()` / `markAsUntouched()` / `markAsDirty()`\n     *\n     * @param {?=} opts Configuration options that determine how the control emits events after\n     * marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * @return {?}\n     */\n    markAsPristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = true;\n        this._pendingDirty = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.markAsPristine({ onlySelf: true }); }));\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * Marks the control as `pending`.\n     *\n     * A control is pending while the control performs async validation.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates changes and\n     * emits events after marking is applied.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), the `statusChanges`\n     * observable emits an event with the latest status the control is marked pending.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    markAsPending(opts = {}) {\n        ((/** @type {?} */ (this))).status = PENDING;\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.markAsPending(opts);\n        }\n    }\n    /**\n     * Disables the control. This means the control is exempt from validation checks and\n     * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n     *\n     * If the control has children, all children are also disabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configuration options that determine how the control propagates\n     * changes and emits events after the control is disabled.\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is disabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    disable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        /** @type {?} */\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        ((/** @type {?} */ (this))).status = DISABLED;\n        ((/** @type {?} */ (this))).errors = null;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.disable(Object.assign(Object.assign({}, opts), { onlySelf: true })); }));\n        this._updateValue();\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((/**\n         * @param {?} changeFn\n         * @return {?}\n         */\n        (changeFn) => changeFn(true)));\n    }\n    /**\n     * Enables the control. This means the control is included in validation checks and\n     * the aggregate value of its parent. Its status recalculates based on its value and\n     * its validators.\n     *\n     * By default, if the control has children, all children are enabled.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @param {?=} opts Configure options that control how the control propagates changes and\n     * emits events when marked as untouched\n     * * `onlySelf`: When true, mark only this control. When false or not supplied,\n     * marks all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is enabled.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    enable(opts = {}) {\n        // If parent has been marked artificially dirty we don't want to re-calculate the\n        // parent's dirtiness based on the children.\n        /** @type {?} */\n        const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);\n        ((/** @type {?} */ (this))).status = VALID;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => { control.enable(Object.assign(Object.assign({}, opts), { onlySelf: true })); }));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n        this._updateAncestors(Object.assign(Object.assign({}, opts), { skipPristineCheck }));\n        this._onDisabledChange.forEach((/**\n         * @param {?} changeFn\n         * @return {?}\n         */\n        (changeFn) => changeFn(false)));\n    }\n    /**\n     * @private\n     * @param {?} opts\n     * @return {?}\n     */\n    _updateAncestors(opts) {\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n            if (!opts.skipPristineCheck) {\n                this._parent._updatePristine();\n            }\n            this._parent._updateTouched();\n        }\n    }\n    /**\n     * @param {?} parent Sets the parent of the control\n     * @return {?}\n     */\n    setParent(parent) { this._parent = parent; }\n    /**\n     * Recalculates the value and validation status of the control.\n     *\n     * By default, it also updates the value and validity of its ancestors.\n     *\n     * @param {?=} opts Configuration options determine how the control propagates changes and emits events\n     * after updates and validity checks are applied.\n     * * `onlySelf`: When true, only update this control. When false or not supplied,\n     * update all direct ancestors. Default is false..\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    updateValueAndValidity(opts = {}) {\n        this._setInitialStatus();\n        this._updateValue();\n        if (this.enabled) {\n            this._cancelExistingSubscription();\n            ((/** @type {?} */ (this))).errors = this._runValidator();\n            ((/** @type {?} */ (this))).status = this._calculateStatus();\n            if (this.status === VALID || this.status === PENDING) {\n                this._runAsyncValidator(opts.emitEvent);\n            }\n        }\n        if (opts.emitEvent !== false) {\n            ((/** @type {?} */ (this.valueChanges))).emit(this.value);\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent && !opts.onlySelf) {\n            this._parent.updateValueAndValidity(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTreeValidity(opts = { emitEvent: true }) {\n        this._forEachChild((/**\n         * @param {?} ctrl\n         * @return {?}\n         */\n        (ctrl) => ctrl._updateTreeValidity(opts)));\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setInitialStatus() {\n        ((/** @type {?} */ (this))).status = this._allControlsDisabled() ? DISABLED : VALID;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _runValidator() {\n        return this.validator ? this.validator(this) : null;\n    }\n    /**\n     * @private\n     * @param {?=} emitEvent\n     * @return {?}\n     */\n    _runAsyncValidator(emitEvent) {\n        if (this.asyncValidator) {\n            ((/** @type {?} */ (this))).status = PENDING;\n            /** @type {?} */\n            const obs = toObservable(this.asyncValidator(this));\n            this._asyncValidationSubscription =\n                obs.subscribe((/**\n                 * @param {?} errors\n                 * @return {?}\n                 */\n                (errors) => this.setErrors(errors, { emitEvent })));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _cancelExistingSubscription() {\n        if (this._asyncValidationSubscription) {\n            this._asyncValidationSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Sets errors on a form control when running validations manually, rather than automatically.\n     *\n     * Calling `setErrors` also updates the validity of the parent control.\n     *\n     * \\@usageNotes\n     * ### Manually set the errors for a control\n     *\n     * ```\n     * const login = new FormControl('someLogin');\n     * login.setErrors({\n     *   notUnique: true\n     * });\n     *\n     * expect(login.valid).toEqual(false);\n     * expect(login.errors).toEqual({ notUnique: true });\n     *\n     * login.setValue('someOtherLogin');\n     *\n     * expect(login.valid).toEqual(true);\n     * ```\n     * @param {?} errors\n     * @param {?=} opts\n     * @return {?}\n     */\n    setErrors(errors, opts = {}) {\n        ((/** @type {?} */ (this))).errors = errors;\n        this._updateControlsErrors(opts.emitEvent !== false);\n    }\n    /**\n     * Retrieves a child control given the control's name or path.\n     *\n     * \\@usageNotes\n     * ### Retrieve a nested control\n     *\n     * For example, to get a `name` control nested within a `person` sub-group:\n     *\n     * * `this.form.get('person.name');`\n     *\n     * -OR-\n     *\n     * * `this.form.get(['person', 'name']);`\n     * @param {?} path A dot-delimited string or array of string/number values that define the path to the\n     * control.\n     *\n     * @return {?}\n     */\n    get(path) { return _find(this, path, '.'); }\n    /**\n     * \\@description\n     * Reports error data for the control with the given path.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} error data for that particular error. If the control or error is not present,\n     * null is returned.\n     */\n    getError(errorCode, path) {\n        /** @type {?} */\n        const control = path ? this.get(path) : this;\n        return control && control.errors ? control.errors[errorCode] : null;\n    }\n    /**\n     * \\@description\n     * Reports whether the control with the given path has the error specified.\n     *\n     * \\@usageNotes\n     * For example, for the following `FormGroup`:\n     *\n     * ```\n     * form = new FormGroup({\n     *   address: new FormGroup({ street: new FormControl() })\n     * });\n     * ```\n     *\n     * The path to the 'street' control from the root form would be 'address' -> 'street'.\n     *\n     * It can be provided to this method in one of two formats:\n     *\n     * 1. An array of string control names, e.g. `['address', 'street']`\n     * 1. A period-delimited list of control names in one string, e.g. `'address.street'`\n     *\n     * If no path is given, this method checks for the error on the current control.\n     *\n     * @param {?} errorCode The code of the error to check\n     * @param {?=} path A list of control names that designates how to move from the current control\n     * to the control that should be queried for errors.\n     *\n     * @return {?} whether the given error is present in the control at the given path.\n     *\n     * If the control is not present, false is returned.\n     */\n    hasError(errorCode, path) {\n        return !!this.getError(errorCode, path);\n    }\n    /**\n     * Retrieves the top-level ancestor of this control.\n     * @return {?}\n     */\n    get root() {\n        /** @type {?} */\n        let x = this;\n        while (x._parent) {\n            x = x._parent;\n        }\n        return x;\n    }\n    /**\n     * \\@internal\n     * @param {?} emitEvent\n     * @return {?}\n     */\n    _updateControlsErrors(emitEvent) {\n        ((/** @type {?} */ (this))).status = this._calculateStatus();\n        if (emitEvent) {\n            ((/** @type {?} */ (this.statusChanges))).emit(this.status);\n        }\n        if (this._parent) {\n            this._parent._updateControlsErrors(emitEvent);\n        }\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _initObservables() {\n        ((/** @type {?} */ (this))).valueChanges = new EventEmitter();\n        ((/** @type {?} */ (this))).statusChanges = new EventEmitter();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _calculateStatus() {\n        if (this._allControlsDisabled())\n            return DISABLED;\n        if (this.errors)\n            return INVALID;\n        if (this._anyControlsHaveStatus(PENDING))\n            return PENDING;\n        if (this._anyControlsHaveStatus(INVALID))\n            return INVALID;\n        return VALID;\n    }\n    /**\n     * \\@internal\n     * @param {?} status\n     * @return {?}\n     */\n    _anyControlsHaveStatus(status) {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.status === status));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsDirty() {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.dirty));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _anyControlsTouched() {\n        return this._anyControls((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.touched));\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updatePristine(opts = {}) {\n        ((/** @type {?} */ (this))).pristine = !this._anyControlsDirty();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updatePristine(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _updateTouched(opts = {}) {\n        ((/** @type {?} */ (this))).touched = this._anyControlsTouched();\n        if (this._parent && !opts.onlySelf) {\n            this._parent._updateTouched(opts);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} formState\n     * @return {?}\n     */\n    _isBoxedValue(formState) {\n        return typeof formState === 'object' && formState !== null &&\n            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;\n    }\n    /**\n     * \\@internal\n     * @param {?} fn\n     * @return {?}\n     */\n    _registerOnCollectionChange(fn) { this._onCollectionChange = fn; }\n    /**\n     * \\@internal\n     * @param {?=} opts\n     * @return {?}\n     */\n    _setUpdateStrategy(opts) {\n        if (isOptionsObj(opts) && ((/** @type {?} */ (opts))).updateOn != null) {\n            this._updateOn = (/** @type {?} */ (((/** @type {?} */ (opts))).updateOn));\n        }\n    }\n    /**\n     * Check to see if parent has been marked artificially dirty.\n     *\n     * \\@internal\n     * @private\n     * @param {?=} onlySelf\n     * @return {?}\n     */\n    _parentMarkedDirty(onlySelf) {\n        /** @type {?} */\n        const parentDirty = this._parent && this._parent.dirty;\n        return !onlySelf && parentDirty && !this._parent._anyControlsDirty();\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._pendingDirty;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._pendingTouched;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._onCollectionChange;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._updateOn;\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControl.prototype._parent;\n    /**\n     * @type {?}\n     * @private\n     */\n    AbstractControl.prototype._asyncValidationSubscription;\n    /**\n     * The current value of the control.\n     *\n     * * For a `FormControl`, the current value.\n     * * For an enabled `FormGroup`, the values of enabled controls as an object\n     * with a key-value pair for each member of the group.\n     * * For a disabled `FormGroup`, the values of all controls as an object\n     * with a key-value pair for each member of the group.\n     * * For a `FormArray`, the values of enabled controls as an array.\n     *\n     * @type {?}\n     */\n    AbstractControl.prototype.value;\n    /**\n     * The validation status of the control. There are four possible\n     * validation status values:\n     *\n     * * **VALID**: This control has passed all validation checks.\n     * * **INVALID**: This control has failed at least one validation check.\n     * * **PENDING**: This control is in the midst of conducting a validation check.\n     * * **DISABLED**: This control is exempt from validation checks.\n     *\n     * These status values are mutually exclusive, so a control cannot be\n     * both valid AND invalid or invalid AND disabled.\n     * @type {?}\n     */\n    AbstractControl.prototype.status;\n    /**\n     * An object containing any errors generated by failing validation,\n     * or null if there are no errors.\n     * @type {?}\n     */\n    AbstractControl.prototype.errors;\n    /**\n     * A control is `pristine` if the user has not yet changed\n     * the value in the UI.\n     *\n     * \\@return True if the user has not yet changed the value in the UI; compare `dirty`.\n     * Programmatic changes to a control's value do not mark it dirty.\n     * @type {?}\n     */\n    AbstractControl.prototype.pristine;\n    /**\n     * True if the control is marked as `touched`.\n     *\n     * A control is marked `touched` once the user has triggered\n     * a `blur` event on it.\n     * @type {?}\n     */\n    AbstractControl.prototype.touched;\n    /**\n     * A multicasting observable that emits an event every time the value of the control changes, in\n     * the UI or programmatically. It also emits an event each time you call enable() or disable()\n     * without passing along {emitEvent: false} as a function argument.\n     * @type {?}\n     */\n    AbstractControl.prototype.valueChanges;\n    /**\n     * A multicasting observable that emits an event every time the validation `status` of the control\n     * recalculates.\n     *\n     * @see {\\@link AbstractControl.status}\n     *\n     * @type {?}\n     */\n    AbstractControl.prototype.statusChanges;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    AbstractControl.prototype._onDisabledChange;\n    /** @type {?} */\n    AbstractControl.prototype.validator;\n    /** @type {?} */\n    AbstractControl.prototype.asyncValidator;\n    /**\n     * Sets the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.setValue = function (value, options) { };\n    /**\n     * Patches the value of the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.patchValue = function (value, options) { };\n    /**\n     * Resets the control. Abstract method (implemented in sub-classes).\n     * @abstract\n     * @param {?=} value\n     * @param {?=} options\n     * @return {?}\n     */\n    AbstractControl.prototype.reset = function (value, options) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._updateValue = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} cb\n     * @return {?}\n     */\n    AbstractControl.prototype._forEachChild = function (cb) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @param {?} condition\n     * @return {?}\n     */\n    AbstractControl.prototype._anyControls = function (condition) { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._allControlsDisabled = function () { };\n    /**\n     * \\@internal\n     * @abstract\n     * @return {?}\n     */\n    AbstractControl.prototype._syncPendingControls = function () { };\n}\n/**\n * Tracks the value and validation status of an individual form control.\n *\n * This is one of the three fundamental building blocks of Angular forms, along with\n * `FormGroup` and `FormArray`. It extends the `AbstractControl` class that\n * implements most of the base functionality for accessing the value, validation status,\n * user interactions and events.\n *\n * @see `AbstractControl`\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see [Usage Notes](#usage-notes)\n *\n * \\@usageNotes\n *\n * ### Initializing Form Controls\n *\n * Instantiate a `FormControl`, with an initial value.\n *\n * ```ts\n * const control = new FormControl('some value');\n * console.log(control.value);     // 'some value'\n * ```\n *\n * The following example initializes the control with a form state object. The `value`\n * and `disabled` keys are required in this case.\n *\n * ```ts\n * const control = new FormControl({ value: 'n/a', disabled: true });\n * console.log(control.value);     // 'n/a'\n * console.log(control.status);    // 'DISABLED'\n * ```\n *\n * The following example initializes the control with a sync validator.\n *\n * ```ts\n * const control = new FormControl('', Validators.required);\n * console.log(control.value);      // ''\n * console.log(control.status);     // 'INVALID'\n * ```\n *\n * The following example initializes the control using an options object.\n *\n * ```ts\n * const control = new FormControl('', {\n *    validators: Validators.required,\n *    asyncValidators: myAsyncValidator\n * });\n * ```\n *\n * ### Configure the control to update on a blur event\n *\n * Set the `updateOn` option to `'blur'` to update on the blur `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'blur' });\n * ```\n *\n * ### Configure the control to update on a submit event\n *\n * Set the `updateOn` option to `'submit'` to update on a submit `event`.\n *\n * ```ts\n * const control = new FormControl('', { updateOn: 'submit' });\n * ```\n *\n * ### Reset the control back to an initial value\n *\n * You reset to a specific form state by passing through a standalone\n * value or a form state object that contains both a value and a disabled state\n * (these are the only two properties that cannot be calculated).\n *\n * ```ts\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n *\n * control.reset('Drew');\n *\n * console.log(control.value); // 'Drew'\n * ```\n *\n * ### Reset the control back to an initial value and disabled\n *\n * ```\n * const control = new FormControl('Nancy');\n *\n * console.log(control.value); // 'Nancy'\n * console.log(control.status); // 'VALID'\n *\n * control.reset({ value: 'Drew', disabled: true });\n *\n * console.log(control.value); // 'Drew'\n * console.log(control.status); // 'DISABLED'\n * ```\n *\n * \\@publicApi\n */\nclass FormControl extends AbstractControl {\n    /**\n     * Creates a new `FormControl` instance.\n     *\n     * @param {?=} formState Initializes the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(formState = null, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        /**\n         * \\@internal\n         */\n        this._onChange = [];\n        this._applyFormState(formState);\n        this._setUpdateStrategy(validatorOrOpts);\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        this._initObservables();\n    }\n    /**\n     * Sets a new value for the form control.\n     *\n     * @param {?} value The new value for the control.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * * `emitModelToViewChange`: When true or not supplied  (the default), each change triggers an\n     * `onChange` event to\n     * update the view.\n     * * `emitViewToModelChange`: When true or not supplied (the default), each change triggers an\n     * `ngModelChange`\n     * event to update the model.\n     *\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        ((/** @type {?} */ (this))).value = this._pendingValue = value;\n        if (this._onChange.length && options.emitModelToViewChange !== false) {\n            this._onChange.forEach((/**\n             * @param {?} changeFn\n             * @return {?}\n             */\n            (changeFn) => changeFn(this.value, options.emitViewToModelChange !== false)));\n        }\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of a control.\n     *\n     * This function is functionally the same as {\\@link FormControl#setValue setValue} at this level.\n     * It exists for symmetry with {\\@link FormGroup#patchValue patchValue} on `FormGroups` and\n     * `FormArrays`, where it does behave differently.\n     *\n     * @see `setValue` for options\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        this.setValue(value, options);\n    }\n    /**\n     * Resets the form control, marking it `pristine` and `untouched`, and setting\n     * the value to null.\n     *\n     * @param {?=} formState Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     *\n     * @return {?}\n     */\n    reset(formState = null, options = {}) {\n        this._applyFormState(formState);\n        this.markAsPristine(options);\n        this.markAsUntouched(options);\n        this.setValue(this.value, options);\n        this._pendingChange = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) { return false; }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() { return this.disabled; }\n    /**\n     * Register a listener for change events.\n     *\n     * @param {?} fn The method that is called when the value changes\n     * @return {?}\n     */\n    registerOnChange(fn) { this._onChange.push(fn); }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _clearChangeFns() {\n        this._onChange = [];\n        this._onDisabledChange = [];\n        this._onCollectionChange = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Register a listener for disabled events.\n     *\n     * @param {?} fn The method that is called when the disabled status changes.\n     * @return {?}\n     */\n    registerOnDisabledChange(fn) {\n        this._onDisabledChange.push(fn);\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) { }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        if (this.updateOn === 'submit') {\n            if (this._pendingDirty)\n                this.markAsDirty();\n            if (this._pendingTouched)\n                this.markAsTouched();\n            if (this._pendingChange) {\n                this.setValue(this._pendingValue, { onlySelf: true, emitModelToViewChange: false });\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @private\n     * @param {?} formState\n     * @return {?}\n     */\n    _applyFormState(formState) {\n        if (this._isBoxedValue(formState)) {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState.value;\n            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                this.enable({ onlySelf: true, emitEvent: false });\n        }\n        else {\n            ((/** @type {?} */ (this))).value = this._pendingValue = formState;\n        }\n    }\n}\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._onChange;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._pendingValue;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormControl.prototype._pendingChange;\n}\n/**\n * Tracks the value and validity state of a group of `FormControl` instances.\n *\n * A `FormGroup` aggregates the values of each child `FormControl` into one object,\n * with each control name as the key.  It calculates its status by reducing the status values\n * of its children. For example, if one of the controls in a group is invalid, the entire\n * group becomes invalid.\n *\n * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormArray`.\n *\n * When instantiating a `FormGroup`, pass in a collection of child controls as the first\n * argument. The key for each child registers the name for the control.\n *\n * \\@usageNotes\n *\n * ### Create a form group with 2 controls\n *\n * ```\n * const form = new FormGroup({\n *   first: new FormControl('Nancy', Validators.minLength(2)),\n *   last: new FormControl('Drew'),\n * });\n *\n * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n * console.log(form.status);  // 'VALID'\n * ```\n *\n * ### Create a form group with a group-level validator\n *\n * You include group-level validators as the second arg, or group-level async\n * validators as the third arg. These come in handy when you want to perform validation\n * that considers the value of more than one child control.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('', Validators.minLength(2)),\n *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n * }, passwordMatchValidator);\n *\n *\n * function passwordMatchValidator(g: FormGroup) {\n *    return g.get('password').value === g.get('passwordConfirm').value\n *       ? null : {'mismatch': true};\n * }\n * ```\n *\n * Like `FormControl` instances, you choose to pass in\n * validators and async validators as part of an options object.\n *\n * ```\n * const form = new FormGroup({\n *   password: new FormControl('')\n *   passwordConfirm: new FormControl('')\n * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });\n * ```\n *\n * ### Set the updateOn property for all controls in a form group\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * group level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const c = new FormGroup({\n *   one: new FormControl()\n * }, { updateOn: 'blur' });\n * ```\n *\n * \\@publicApi\n */\nclass FormGroup extends AbstractControl {\n    /**\n     * Creates a new `FormGroup` instance.\n     *\n     * @param {?} controls A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Registers a control with the group's list of controls.\n     *\n     * This method does not update the value or validity of the control.\n     * Use {\\@link FormGroup#addControl addControl} instead.\n     *\n     * @param {?} name The control name to register in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    registerControl(name, control) {\n        if (this.controls[name])\n            return this.controls[name];\n        this.controls[name] = control;\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n        return control;\n    }\n    /**\n     * Add a control to this group.\n     *\n     * This method also updates the value and validity of the control.\n     *\n     * @param {?} name The control name to add to the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    addControl(name, control) {\n        this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Remove a control from this group.\n     *\n     * @param {?} name The control name to remove from the collection\n     * @return {?}\n     */\n    removeControl(name) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        delete (this.controls[name]);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} name The control name to replace in the collection\n     * @param {?} control Provides the control for the given name\n     * @return {?}\n     */\n    setControl(name, control) {\n        if (this.controls[name])\n            this.controls[name]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        delete (this.controls[name]);\n        if (control)\n            this.registerControl(name, control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Check whether there is an enabled control with the given name in the group.\n     *\n     * Reports false for disabled controls. If you'd like to check for existence in the group\n     * only, use {\\@link AbstractControl#get get} instead.\n     *\n     * @param {?} controlName The control name to check for existence in the collection\n     *\n     * @return {?} false for disabled controls, true otherwise.\n     */\n    contains(controlName) {\n        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n    }\n    /**\n     * Sets the value of the `FormGroup`. It accepts an object that matches\n     * the structure of the group, with control names as keys.\n     *\n     * \\@usageNotes\n     * ### Set the complete value for the form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl(),\n     *   last: new FormControl()\n     * });\n     *\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.setValue({first: 'Nancy', last: 'Drew'});\n     * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n     * ```\n     *\n     * @throws When strict checks fail, such as setting the value of a control\n     * that doesn't exist or if you exclude a value of a control that does exist.\n     *\n     * @param {?} value The new value for the control that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events after the value changes.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        Object.keys(value).forEach((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => {\n            this._throwIfControlMissing(name);\n            this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormGroup`. It accepts an object with control\n     * names as keys, and does its best to match the values to the correct controls\n     * in the group.\n     *\n     * It accepts both super-sets and sub-sets of the group without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the value for a form group\n     *\n     * ```\n     * const form = new FormGroup({\n     *    first: new FormControl(),\n     *    last: new FormControl()\n     * });\n     * console.log(form.value);   // {first: null, last: null}\n     *\n     * form.patchValue({first: 'Nancy'});\n     * console.log(form.value);   // {first: 'Nancy', last: null}\n     * ```\n     *\n     * @param {?} value The object that matches the structure of the group.\n     * @param {?=} options Configuration options that determine how the control propagates changes and\n     * emits events after the value is patched.\n     * * `onlySelf`: When true, each change only affects this control and not its parent. Default is\n     * true.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        Object.keys(value).forEach((/**\n         * @param {?} name\n         * @return {?}\n         */\n        name => {\n            if (this.controls[name]) {\n                this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormGroup`, marks all descendants are marked `pristine` and `untouched`, and\n     * the value of all descendants to null.\n     *\n     * You reset to a specific form state by passing in a map of states\n     * that matches the structure of your form, with control names as keys. The state\n     * is a standalone value or a form state object with both a value and a disabled\n     * status.\n     *\n     * \\@usageNotes\n     *\n     * ### Reset the form group values\n     *\n     * ```ts\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * console.log(form.value);  // {first: 'first name', last: 'last name'}\n     *\n     * form.reset({ first: 'name', last: 'last name' });\n     *\n     * console.log(form.value);  // {first: 'name', last: 'last name'}\n     * ```\n     *\n     * ### Reset the form group values and disabled status\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('first name'),\n     *   last: new FormControl('last name')\n     * });\n     *\n     * form.reset({\n     *   first: {value: 'name', disabled: true},\n     *   last: 'last'\n     * });\n     *\n     * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n     * console.log(this.form.get('first').status);  // 'DISABLED'\n     * ```\n     * @param {?=} value Resets the control with an initial value,\n     * or an object that defines the initial value and disabled state.\n     *\n     * @param {?=} options Configuration options that determine how the control propagates changes\n     * and emits events when the group is reset.\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is\n     * false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     *\n     * @return {?}\n     */\n    reset(value = {}, options = {}) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the `FormGroup`, including any disabled controls.\n     *\n     * Retrieves all values regardless of disabled status.\n     * The `value` property is the best way to get the value of the group, because\n     * it excludes disabled controls in the `FormGroup`.\n     * @return {?}\n     */\n    getRawValue() {\n        return this._reduceChildren({}, (/**\n         * @param {?} acc\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (acc, control, name) => {\n            acc[name] = control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n            return acc;\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this._reduceChildren(false, (/**\n         * @param {?} updated\n         * @param {?} child\n         * @return {?}\n         */\n        (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }));\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} name\n     * @return {?}\n     */\n    _throwIfControlMissing(name) {\n        if (!Object.keys(this.controls).length) {\n            throw new Error(`\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.controls[name]) {\n            throw new Error(`Cannot find form control with name: ${name}.`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        Object.keys(this.controls).forEach((/**\n         * @param {?} k\n         * @return {?}\n         */\n        k => cb(this.controls[k], k)));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() { ((/** @type {?} */ (this))).value = this._reduceValue(); }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        /** @type {?} */\n        let res = false;\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            res = res || (this.contains(name) && condition(control));\n        }));\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _reduceValue() {\n        return this._reduceChildren({}, (/**\n         * @param {?} acc\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (acc, control, name) => {\n            if (control.enabled || this.disabled) {\n                acc[name] = control.value;\n            }\n            return acc;\n        }));\n    }\n    /**\n     * \\@internal\n     * @param {?} initValue\n     * @param {?} fn\n     * @return {?}\n     */\n    _reduceChildren(initValue, fn) {\n        /** @type {?} */\n        let res = initValue;\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => { res = fn(res, control, name); }));\n        return res;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const controlName of Object.keys(this.controls)) {\n            if (this.controls[controlName].enabled) {\n                return false;\n            }\n        }\n        return Object.keys(this.controls).length > 0 || this.disabled;\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} name\n         * @return {?}\n         */\n        (control, name) => {\n            if (value[name] === undefined) {\n                throw new Error(`Must supply a value for form control with name: '${name}'.`);\n            }\n        }));\n    }\n}\nif (false) {\n    /** @type {?} */\n    FormGroup.prototype.controls;\n}\n/**\n * Tracks the value and validity state of an array of `FormControl`,\n * `FormGroup` or `FormArray` instances.\n *\n * A `FormArray` aggregates the values of each child `FormControl` into an array.\n * It calculates its status by reducing the status values of its children. For example, if one of\n * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n *\n * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n * along with `FormControl` and `FormGroup`.\n *\n * \\@usageNotes\n *\n * ### Create an array of form controls\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy', Validators.minLength(2)),\n *   new FormControl('Drew'),\n * ]);\n *\n * console.log(arr.value);   // ['Nancy', 'Drew']\n * console.log(arr.status);  // 'VALID'\n * ```\n *\n * ### Create a form array with array-level validators\n *\n * You include array-level validators and async validators. These come in handy\n * when you want to perform validation that considers the value of more than one child\n * control.\n *\n * The two types of validators are passed in separately as the second and third arg\n * respectively, or together as part of an options object.\n *\n * ```\n * const arr = new FormArray([\n *   new FormControl('Nancy'),\n *   new FormControl('Drew')\n * ], {validators: myValidator, asyncValidators: myAsyncValidator});\n * ```\n *\n * ### Set the updateOn property for all controls in a form array\n *\n * The options object is used to set a default value for each child\n * control's `updateOn` property. If you set `updateOn` to `'blur'` at the\n * array level, all child controls default to 'blur', unless the child\n * has explicitly specified a different `updateOn` value.\n *\n * ```ts\n * const arr = new FormArray([\n *    new FormControl()\n * ], {updateOn: 'blur'});\n * ```\n *\n * ### Adding or removing controls from a form array\n *\n * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods\n * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n * the `FormArray` directly, as that result in strange and unexpected behavior such\n * as broken change detection.\n *\n * \\@publicApi\n */\nclass FormArray extends AbstractControl {\n    /**\n     * Creates a new `FormArray` instance.\n     *\n     * @param {?} controls An array of child controls. Each child control is given an index\n     * where it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains validation functions\n     * and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator functions\n     *\n     */\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(coerceToValidator(validatorOrOpts), coerceToAsyncValidator(asyncValidator, validatorOrOpts));\n        this.controls = controls;\n        this._initObservables();\n        this._setUpdateStrategy(validatorOrOpts);\n        this._setUpControls();\n        this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n    }\n    /**\n     * Get the `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to retrieve the control\n     * @return {?}\n     */\n    at(index) { return this.controls[index]; }\n    /**\n     * Insert a new `AbstractControl` at the end of the array.\n     *\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    push(control) {\n        this.controls.push(control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Insert a new `AbstractControl` at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to insert the control\n     * @param {?} control Form control to be inserted\n     * @return {?}\n     */\n    insert(index, control) {\n        this.controls.splice(index, 0, control);\n        this._registerControl(control);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Remove the control at the given `index` in the array.\n     *\n     * @param {?} index Index in the array to remove the control\n     * @return {?}\n     */\n    removeAt(index) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this.controls.splice(index, 1);\n        this.updateValueAndValidity();\n    }\n    /**\n     * Replace an existing control.\n     *\n     * @param {?} index Index in the array to replace the control\n     * @param {?} control The `AbstractControl` control to replace the existing control\n     * @return {?}\n     */\n    setControl(index, control) {\n        if (this.controls[index])\n            this.controls[index]._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this.controls.splice(index, 1);\n        if (control) {\n            this.controls.splice(index, 0, control);\n            this._registerControl(control);\n        }\n        this.updateValueAndValidity();\n        this._onCollectionChange();\n    }\n    /**\n     * Length of the control array.\n     * @return {?}\n     */\n    get length() { return this.controls.length; }\n    /**\n     * Sets the value of the `FormArray`. It accepts an array that matches\n     * the structure of the control.\n     *\n     * This method performs strict checks, and throws an error if you try\n     * to set the value of a control that doesn't exist or if you exclude the\n     * value of a control.\n     *\n     * \\@usageNotes\n     * ### Set the values for the controls in the form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl(),\n     *   new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.setValue(['Nancy', 'Drew']);\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * ```\n     *\n     * @param {?} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    setValue(value, options = {}) {\n        this._checkAllValuesPresent(value);\n        value.forEach((/**\n         * @param {?} newValue\n         * @param {?} index\n         * @return {?}\n         */\n        (newValue, index) => {\n            this._throwIfControlMissing(index);\n            this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Patches the value of the `FormArray`. It accepts an array that matches the\n     * structure of the control, and does its best to match the values to the correct\n     * controls in the group.\n     *\n     * It accepts both super-sets and sub-sets of the array without throwing an error.\n     *\n     * \\@usageNotes\n     * ### Patch the values for controls in a form array\n     *\n     * ```\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.value);   // [null, null]\n     *\n     * arr.patchValue(['Nancy']);\n     * console.log(arr.value);   // ['Nancy', null]\n     * ```\n     *\n     * @param {?} value Array of latest values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control value is updated.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    patchValue(value, options = {}) {\n        value.forEach((/**\n         * @param {?} newValue\n         * @param {?} index\n         * @return {?}\n         */\n        (newValue, index) => {\n            if (this.at(index)) {\n                this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });\n            }\n        }));\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the\n     * value of all descendants to null or null maps.\n     *\n     * You reset to a specific form state by passing in an array of states\n     * that matches the structure of the control. The state is a standalone value\n     * or a form state object with both a value and a disabled status.\n     *\n     * \\@usageNotes\n     * ### Reset the values in a form array\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * arr.reset(['name', 'last name']);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * ```\n     *\n     * ### Reset the values in a form array and the disabled status for the first control\n     *\n     * ```\n     * this.arr.reset([\n     *   {value: 'name', disabled: true},\n     *   'last'\n     * ]);\n     *\n     * console.log(this.arr.value);  // ['name', 'last name']\n     * console.log(this.arr.get(0).status);  // 'DISABLED'\n     * ```\n     *\n     * @param {?=} value Array of values for the controls\n     * @param {?=} options Configure options that determine how the control propagates changes and\n     * emits events after the value changes\n     *\n     * * `onlySelf`: When true, each change only affects this control, and not its parent. Default\n     * is false.\n     * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and\n     * `valueChanges`\n     * observables emit events with the latest status and value when the control is reset.\n     * When false, no events are emitted.\n     * The configuration options are passed to the {\\@link AbstractControl#updateValueAndValidity\n     * updateValueAndValidity} method.\n     * @return {?}\n     */\n    reset(value = [], options = {}) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} index\n         * @return {?}\n         */\n        (control, index) => {\n            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });\n        }));\n        this._updatePristine(options);\n        this._updateTouched(options);\n        this.updateValueAndValidity(options);\n    }\n    /**\n     * The aggregate value of the array, including any disabled controls.\n     *\n     * Reports all values regardless of disabled status.\n     * For enabled controls only, the `value` property is the best way to get the value of the array.\n     * @return {?}\n     */\n    getRawValue() {\n        return this.controls.map((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => {\n            return control instanceof FormControl ? control.value : ((/** @type {?} */ (control))).getRawValue();\n        }));\n    }\n    /**\n     * Remove all controls in the `FormArray`.\n     *\n     * \\@usageNotes\n     * ### Remove all elements from a FormArray\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     * console.log(arr.length);  // 2\n     *\n     * arr.clear();\n     * console.log(arr.length);  // 0\n     * ```\n     *\n     * It's a simpler and more efficient alternative to removing all elements one by one:\n     *\n     * ```ts\n     * const arr = new FormArray([\n     *    new FormControl(),\n     *    new FormControl()\n     * ]);\n     *\n     * while (arr.length) {\n     *    arr.removeAt(0);\n     * }\n     * ```\n     * @return {?}\n     */\n    clear() {\n        if (this.controls.length < 1)\n            return;\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control._registerOnCollectionChange((/**\n         * @return {?}\n         */\n        () => { }))));\n        this.controls.splice(0);\n        this.updateValueAndValidity();\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _syncPendingControls() {\n        /** @type {?} */\n        let subtreeUpdated = this.controls.reduce((/**\n         * @param {?} updated\n         * @param {?} child\n         * @return {?}\n         */\n        (updated, child) => {\n            return child._syncPendingControls() ? true : updated;\n        }), false);\n        if (subtreeUpdated)\n            this.updateValueAndValidity({ onlySelf: true });\n        return subtreeUpdated;\n    }\n    /**\n     * \\@internal\n     * @param {?} index\n     * @return {?}\n     */\n    _throwIfControlMissing(index) {\n        if (!this.controls.length) {\n            throw new Error(`\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      `);\n        }\n        if (!this.at(index)) {\n            throw new Error(`Cannot find form control at index ${index}`);\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} cb\n     * @return {?}\n     */\n    _forEachChild(cb) {\n        this.controls.forEach((/**\n         * @param {?} control\n         * @param {?} index\n         * @return {?}\n         */\n        (control, index) => { cb(control, index); }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateValue() {\n        ((/** @type {?} */ (this))).value =\n            this.controls.filter((/**\n             * @param {?} control\n             * @return {?}\n             */\n            (control) => control.enabled || this.disabled))\n                .map((/**\n             * @param {?} control\n             * @return {?}\n             */\n            (control) => control.value));\n    }\n    /**\n     * \\@internal\n     * @param {?} condition\n     * @return {?}\n     */\n    _anyControls(condition) {\n        return this.controls.some((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => control.enabled && condition(control)));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _setUpControls() {\n        this._forEachChild((/**\n         * @param {?} control\n         * @return {?}\n         */\n        (control) => this._registerControl(control)));\n    }\n    /**\n     * \\@internal\n     * @param {?} value\n     * @return {?}\n     */\n    _checkAllValuesPresent(value) {\n        this._forEachChild((/**\n         * @param {?} control\n         * @param {?} i\n         * @return {?}\n         */\n        (control, i) => {\n            if (value[i] === undefined) {\n                throw new Error(`Must supply a value for form control at index: ${i}.`);\n            }\n        }));\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _allControlsDisabled() {\n        for (const control of this.controls) {\n            if (control.enabled)\n                return false;\n        }\n        return this.controls.length > 0 || this.disabled;\n    }\n    /**\n     * @private\n     * @param {?} control\n     * @return {?}\n     */\n    _registerControl(control) {\n        control.setParent(this);\n        control._registerOnCollectionChange(this._onCollectionChange);\n    }\n}\nif (false) {\n    /** @type {?} */\n    FormArray.prototype.controls;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_form.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgForm))\n};\nconst ɵ0 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/** @type {?} */\nconst resolvedPromise = ((ɵ0))();\n/**\n * \\@description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * \\@usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgForm extends ControlContainer {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * \\@description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * \\@description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /**\n     * \\@description\n     * Lifecycle method called after the view is initialized. For internal use only.\n     * @return {?}\n     */\n    ngAfterViewInit() { this._setUpdateStrategy(); }\n    /**\n     * \\@description\n     * The directive instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * The internal `FormGroup` instance.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Returns a map of the controls in this group.\n     * @return {?}\n     */\n    get controls() { return this.form.controls; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            ((/** @type {?} */ (dir))).control =\n                (/** @type {?} */ (container.registerControl(dir.name, dir.control)));\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        }));\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param {?} dir The `NgModel` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeDir(this._directives, dir);\n        }));\n    }\n    /**\n     * \\@description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            /** @type {?} */\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        }));\n    }\n    /**\n     * \\@description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        }));\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param {?} dir The `NgModelGroup` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param {?} dir The `NgControl` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const ctrl = (/** @type {?} */ (this.form.get((/** @type {?} */ (dir.path)))));\n            ctrl.setValue(value);\n        }));\n    }\n    /**\n     * \\@description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param {?} value The new value\n     * @return {?}\n     */\n    setValue(value) { this.control.setValue(value); }\n    /**\n     * \\@description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * \\@internal\n     * @param {?} path\n     * @return {?}\n     */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? (/** @type {?} */ (this.form.get(path))) : this.form;\n    }\n}\nNgForm.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]',\n                providers: [formDirectiveProvider],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                outputs: ['ngSubmit'],\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nNgForm.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgForm.propDecorators = {\n    options: [{ type: Input, args: ['ngFormOptions',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Returns whether the form submission has been triggered.\n     * @type {?}\n     */\n    NgForm.prototype.submitted;\n    /**\n     * @type {?}\n     * @private\n     */\n    NgForm.prototype._directives;\n    /**\n     * \\@description\n     * The `FormGroup` instance created for this form.\n     * @type {?}\n     */\n    NgForm.prototype.form;\n    /**\n     * \\@description\n     * Event emitter for the \"ngSubmit\" event\n     * @type {?}\n     */\n    NgForm.prototype.ngSubmit;\n    /**\n     * \\@description\n     * Tracks options for the `NgForm` instance.\n     *\n     * **updateOn**: Sets the default `updateOn` value for all child `NgModels` below it\n     * unless explicitly set by a child `NgModel` using `ngModelOptions`). Defaults to 'change'.\n     * Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     * @type {?}\n     */\n    NgForm.prototype.options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/abstract_form_group_directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.\n *\n * \\@publicApi\n */\nclass AbstractFormGroupDirective extends ControlContainer {\n    /**\n     * \\@description\n     * An internal callback method triggered on the instance after the inputs are set.\n     * Registers the group with its parent group.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormGroup(this);\n    }\n    /**\n     * \\@description\n     * An internal callback method triggered before the instance is destroyed.\n     * Removes the group from its parent group.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormGroup(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormGroup(this); }\n    /**\n     * \\@description\n     * The path to this group from the top-level directive.\n     * @return {?}\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * The synchronous validators registered with this group.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * The async validators registered with this group.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() { }\n}\nif (false) {\n    /**\n     * \\@description\n     * The parent control for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._parent;\n    /**\n     * \\@description\n     * An array of synchronous validators for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._validators;\n    /**\n     * \\@description\n     * An array of async validators for the group\n     *\n     * \\@internal\n     * @type {?}\n     */\n    AbstractFormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/template_driven_errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass TemplateDrivenErrors {\n    /**\n     * @return {?}\n     */\n    static modelParentException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      ${FormErrorExamples.formControlName}\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      ${FormErrorExamples.ngModelWithFormGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static formGroupNameException() {\n        throw new Error(`\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n    /**\n     * @return {?}\n     */\n    static missingNameException() {\n        throw new Error(`If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">`);\n    }\n    /**\n     * @return {?}\n     */\n    static modelGroupParentException() {\n        throw new Error(`\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      ${FormErrorExamples.formGroupName}\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      ${FormErrorExamples.ngModelGroup}`);\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_model_group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgModelGroup))\n};\n/**\n * \\@description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * \\@usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {\\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModelGroup extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.decorators = [\n    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] }\n];\n/** @nocollapse */\nNgModelGroup.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nNgModelGroup.propDecorators = {\n    name: [{ type: Input, args: ['ngModelGroup',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds\n     * to a key in the parent `NgForm`.\n     * @type {?}\n     */\n    NgModelGroup.prototype.name;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_model.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => NgModel))\n};\nconst ɵ0$1 = /**\n * @return {?}\n */\n() => Promise.resolve(null);\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have and old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel` have been changed.\n * - this is a general problem when using `exportAs` for directives!\n * @type {?}\n */\nconst resolvedPromise$1 = ((ɵ0$1))();\n/**\n * \\@description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex: `#myVar=\"ngModel\"`).\n * You then access the control using the directive's `control` property,\n * but most properties used (like `valid` and `dirty`) fall through to the control anyway for direct access.\n * See a full list of properties directly available in `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * \\@usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {\\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {\\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel name attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. The name attribute is used\n * within a custom form component, and the name `\\@Input` property serves a different purpose.\n *\n * ```html\n * <form>\n *   <my-person-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-person-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass NgModel extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /**\n         * \\@internal\n         */\n        this._registered = false;\n        /**\n         * \\@description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal\n     * use only.\n     * @return {?}\n     */\n    ngOnDestroy() { this.formDirective && this.formDirective.removeControl(this); }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * \\@description\n     * The top-level directive for this control if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value emitted by `ngModelChange`.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone() ? this._setUpStandalone() :\n            this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            TemplateDrivenErrors.formGroupNameException();\n        }\n        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n            TemplateDrivenErrors.modelParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() && !this.name) {\n            TemplateDrivenErrors.missingNameException();\n        }\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _updateValue(value) {\n        resolvedPromise$1.then((/**\n         * @return {?}\n         */\n        () => { this.control.setValue(value, { emitViewToModelChange: false }); }));\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _updateDisabled(changes) {\n        /** @type {?} */\n        const disabledValue = changes['isDisabled'].currentValue;\n        /** @type {?} */\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise$1.then((/**\n         * @return {?}\n         */\n        () => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        }));\n    }\n}\nNgModel.decorators = [\n    { type: Directive, args: [{\n                selector: '[ngModel]:not([formControlName]):not([formControl])',\n                providers: [formControlBinding],\n                exportAs: 'ngModel'\n            },] }\n];\n/** @nocollapse */\nNgModel.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] }\n];\nNgModel.propDecorators = {\n    name: [{ type: Input }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    options: [{ type: Input, args: ['ngModelOptions',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /**\n     * \\@nodoc\n     * @type {?}\n     */\n    NgModel.ngAcceptInputType_isDisabled;\n    /** @type {?} */\n    NgModel.prototype.control;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    NgModel.prototype._registered;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * @type {?}\n     */\n    NgModel.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the name bound to the directive. The parent form\n     * uses this name as a key to retrieve this control's value.\n     * @type {?}\n     */\n    NgModel.prototype.name;\n    /**\n     * \\@description\n     * Tracks whether the control is disabled.\n     * @type {?}\n     */\n    NgModel.prototype.isDisabled;\n    /**\n     * \\@description\n     * Tracks the value bound to this directive.\n     * @type {?}\n     */\n    NgModel.prototype.model;\n    /**\n     * \\@description\n     * Tracks the configuration options for this `ngModel` instance.\n     *\n     * **name**: An alternative to setting the name attribute on the form control element. See\n     * the [example](api/forms/NgModel#using-ngmodel-on-a-standalone-control) for using `NgModel`\n     * as a standalone control.\n     *\n     * **standalone**: When set to true, the `ngModel` will not register itself with its parent form,\n     * and acts as if it's not in the form. Defaults to false.\n     *\n     * **updateOn**: Defines the event upon which the form control value and validity update.\n     * Defaults to 'change'. Possible values: `'change'` | `'blur'` | `'submit'`.\n     *\n     * @type {?}\n     */\n    NgModel.prototype.options;\n    /**\n     * \\@description\n     * Event emitter for producing the `ngModelChange` event after\n     * the view model updates.\n     * @type {?}\n     */\n    NgModel.prototype.update;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/ng_no_validate_directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n *\n * Adds `novalidate` attribute to all forms by default.\n *\n * `novalidate` is used to disable browser's native form validation.\n *\n * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:\n *\n * ```\n * <form ngNativeValidate></form>\n * ```\n *\n * \\@publicApi\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n */\nclass ɵNgNoValidate {\n}\nɵNgNoValidate.decorators = [\n    { type: Directive, args: [{\n                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',\n                host: { 'novalidate': '' },\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/reactive_directives/form_control_directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n * @type {?}\n */\nconst NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\n/** @type {?} */\nconst formControlBinding$1 = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormControlDirective))\n};\n/**\n * \\@description\n * * Syncs a standalone `FormControl` instance to a form control element.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Registering a single form control\n *\n * The following examples shows how to register a standalone control and set its value.\n *\n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in a future version\n * of Angular.\n *\n * Now deprecated:\n *\n * ```html\n * <input [formControl]=\"control\" [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with`ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before support is removed, you'll want to decide whether to stick\n * with reactive form directives (and get/set values using reactive forms patterns) or\n * switch over to template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <input [formControl]=\"control\">\n * ```\n *\n * ```ts\n * this.control.setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'});\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlDirective extends NgControl {\n    /**\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            setUpControl(this.form, this);\n            if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n                (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._rawAsyncValidators);\n    }\n    /**\n     * \\@description\n     * The `FormControl` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @private\n     * @param {?} changes\n     * @return {?}\n     */\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.decorators = [\n    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] }\n];\n/** @nocollapse */\nFormControlDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlDirective.propDecorators = {\n    form: [{ type: Input, args: ['formControl',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlDirective. Used to support warning config of \"once\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlDirective._ngModelWarningSentOnce;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * @type {?}\n     */\n    FormControlDirective.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the `FormControl` instance bound to the directive.\n     * @type {?}\n     */\n    FormControlDirective.prototype.form;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlDirective.prototype.model;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlDirective.prototype.update;\n    /**\n     * \\@description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlDirective.prototype._ngModelWarningSent;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlDirective.prototype._ngModelWarningConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/reactive_directives/form_group_directive.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formDirectiveProvider$1 = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormGroupDirective))\n};\n/**\n * \\@description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupDirective extends ControlContainer {\n    /**\n     * @param {?} _validators\n     * @param {?} _asyncValidators\n     */\n    constructor(_validators, _asyncValidators) {\n        super();\n        this._validators = _validators;\n        this._asyncValidators = _asyncValidators;\n        /**\n         * \\@description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * \\@description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * \\@description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = (/** @type {?} */ (null));\n        /**\n         * \\@description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n        }\n    }\n    /**\n     * \\@description\n     * Returns this directive's instance.\n     * @return {?}\n     */\n    get formDirective() { return this; }\n    /**\n     * \\@description\n     * Returns the `FormGroup` bound to this directive.\n     * @return {?}\n     */\n    get control() { return this.form; }\n    /**\n     * \\@description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     * @return {?}\n     */\n    get path() { return []; }\n    /**\n     * \\@description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    addControl(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * \\@description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    getControl(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * \\@description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @return {?}\n     */\n    removeControl(dir) { removeDir(this.directives, dir); }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    addFormGroup(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form group.\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    removeFormGroup(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param {?} dir The `FormGroupName` directive instance.\n     * @return {?}\n     */\n    getFormGroup(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Adds a new `FormArrayName` directive instance to the form.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    addFormArray(dir) {\n        /** @type {?} */\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    /**\n     * No-op method to remove the form array.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    removeFormArray(dir) { }\n    /**\n     * \\@description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param {?} dir The `FormArrayName` directive instance.\n     * @return {?}\n     */\n    getFormArray(dir) { return (/** @type {?} */ (this.form.get(dir.path))); }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param {?} dir The `FormControlName` directive instance.\n     * @param {?} value The new value for the directive's control.\n     * @return {?}\n     */\n    updateModel(dir, value) {\n        /** @type {?} */\n        const ctrl = (/** @type {?} */ (this.form.get(dir.path)));\n        ctrl.setValue(value);\n    }\n    /**\n     * \\@description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param {?} $event The \"submit\" event object\n     * @return {?}\n     */\n    onSubmit($event) {\n        ((/** @type {?} */ (this))).submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * \\@description\n     * Method called when the \"reset\" event is triggered on the form.\n     * @return {?}\n     */\n    onReset() { this.resetForm(); }\n    /**\n     * \\@description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param {?=} value The new value for the form.\n     * @return {?}\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        ((/** @type {?} */ (this))).submitted = false;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _updateDomValue() {\n        this.directives.forEach((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        dir => {\n            /** @type {?} */\n            const newCtrl = this.form.get(dir.path);\n            if (dir.control !== newCtrl) {\n                cleanUpControl(dir.control, dir);\n                if (newCtrl)\n                    setUpControl(newCtrl, dir);\n                ((/** @type {?} */ (dir))).control = newCtrl;\n            }\n        }));\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange((/**\n         * @return {?}\n         */\n        () => this._updateDomValue()));\n        if (this._oldForm)\n            this._oldForm._registerOnCollectionChange((/**\n             * @return {?}\n             */\n            () => { }));\n        this._oldForm = this.form;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateValidators() {\n        /** @type {?} */\n        const sync = composeValidators(this._validators);\n        this.form.validator = Validators.compose([(/** @type {?} */ (this.form.validator)), (/** @type {?} */ (sync))]);\n        /** @type {?} */\n        const async = composeAsyncValidators(this._asyncValidators);\n        this.form.asyncValidator = Validators.composeAsync([(/** @type {?} */ (this.form.asyncValidator)), (/** @type {?} */ (async))]);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkFormPresent() {\n        if (!this.form) {\n            ReactiveErrors.missingFormException();\n        }\n    }\n}\nFormGroupDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[formGroup]',\n                providers: [formDirectiveProvider$1],\n                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },\n                exportAs: 'ngForm'\n            },] }\n];\n/** @nocollapse */\nFormGroupDirective.ctorParameters = () => [\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupDirective.propDecorators = {\n    form: [{ type: Input, args: ['formGroup',] }],\n    ngSubmit: [{ type: Output }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Reports whether the form submission has been triggered.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.submitted;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._oldForm;\n    /**\n     * \\@description\n     * Tracks the list of added `FormControlName` instances\n     * @type {?}\n     */\n    FormGroupDirective.prototype.directives;\n    /**\n     * \\@description\n     * Tracks the `FormGroup` bound to this directive.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.form;\n    /**\n     * \\@description\n     * Emits an event when the form submission has been triggered.\n     * @type {?}\n     */\n    FormGroupDirective.prototype.ngSubmit;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._validators;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormGroupDirective.prototype._asyncValidators;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/reactive_directives/form_group_name.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormGroupName))\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * \\@usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the {\\@link AbstractControl#get get} method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {\\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormGroupName extends AbstractFormGroupDirective {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.groupParentException();\n        }\n    }\n}\nFormGroupName.decorators = [\n    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] }\n];\n/** @nocollapse */\nFormGroupName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormGroupName.propDecorators = {\n    name: [{ type: Input, args: ['formGroupName',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Tracks the name of the `FormGroup` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form groups to be bound\n     * to indices when iterating over groups in a `FormArray`.\n     * @type {?}\n     */\n    FormGroupName.prototype.name;\n}\n/** @type {?} */\nconst formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormArrayName))\n};\n/**\n * \\@description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Example\n *\n * {\\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormArrayName extends ControlContainer {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     */\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._validators = validators;\n        this._asyncValidators = asyncValidators;\n    }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     *\n     * @throws If the directive does not have a valid parent.\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkParentType();\n        (/** @type {?} */ (this.formDirective)).addFormArray(this);\n    }\n    /**\n     * \\@description\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * \\@description\n     * The `FormArray` bound to this directive.\n     * @return {?}\n     */\n    get control() { return (/** @type {?} */ (this.formDirective)).getFormArray(this); }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() {\n        return this._parent ? (/** @type {?} */ (this._parent.formDirective)) : null;\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._validators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return composeAsyncValidators(this._asyncValidators);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent)) {\n            ReactiveErrors.arrayParentException();\n        }\n    }\n}\nFormArrayName.decorators = [\n    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] }\n];\n/** @nocollapse */\nFormArrayName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] }\n];\nFormArrayName.propDecorators = {\n    name: [{ type: Input, args: ['formArrayName',] }]\n};\nif (false) {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._parent;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._validators;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    FormArrayName.prototype._asyncValidators;\n    /**\n     * \\@description\n     * Tracks the name of the `FormArray` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form arrays to be bound\n     * to indices when iterating over arrays in a `FormArray`.\n     * @type {?}\n     */\n    FormArrayName.prototype.name;\n}\n/**\n * @param {?} parent\n * @return {?}\n */\nfunction _hasInvalidParent(parent) {\n    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/reactive_directives/form_control_name.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => FormControlName))\n};\n/**\n * \\@description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * \\@usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {\\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and will be removed in a future\n * version of Angular.\n *\n * Now deprecated:\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\" [(ngModel)]=\"value\">\n * </form>\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * This has been deprecated for a few reasons. First, developers have found this pattern\n * confusing. It seems like the actual `ngModel` directive is being used, but in fact it's\n * an input/output property named `ngModel` on the reactive form directive that simply\n * approximates (some of) its behavior. Specifically, it allows getting/setting the value\n * and intercepting value events. However, some of `ngModel`'s other features - like\n * delaying updates with `ngModelOptions` or exporting the directive - simply don't work,\n * which has understandably caused some confusion.\n *\n * In addition, this pattern mixes template-driven and reactive forms strategies, which\n * we generally don't recommend because it doesn't take advantage of the full benefits of\n * either strategy. Setting the value in the template violates the template-agnostic\n * principles behind reactive forms, whereas adding a `FormControl`/`FormGroup` layer in\n * the class removes the convenience of defining forms in the template.\n *\n * To update your code before support is removed, you'll want to decide whether to stick with\n * reactive form directives (and get/set values using reactive forms patterns) or switch over to\n * template-driven directives.\n *\n * After (choice 1 - use reactive forms):\n *\n * ```html\n * <form [formGroup]=\"form\">\n *   <input formControlName=\"first\">\n * </form>\n * ```\n *\n * ```ts\n * this.form.get('first').setValue('some value');\n * ```\n *\n * After (choice 2 - use template-driven forms):\n *\n * ```html\n * <input [(ngModel)]=\"value\">\n * ```\n *\n * ```ts\n * this.value = 'some value';\n * ```\n *\n * By default, when you use this pattern, you will see a deprecation warning once in dev\n * mode. You can choose to silence this warning by providing a config for\n * `ReactiveFormsModule` at import time:\n *\n * ```ts\n * imports: [\n *   ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'})\n * ]\n * ```\n *\n * Alternatively, you can choose to surface a separate warning for each instance of this\n * pattern with a config value of `\"always\"`. This may help to track down where in the code\n * the pattern is being used as the code is being updated.\n *\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass FormControlName extends NgControl {\n    /**\n     * @param {?} parent\n     * @param {?} validators\n     * @param {?} asyncValidators\n     * @param {?} valueAccessors\n     * @param {?} _ngModelWarningConfig\n     */\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /**\n         * @deprecated as of v6\n         */\n        this.update = new EventEmitter();\n        /**\n         * \\@description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * \\@internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._rawValidators = validators || [];\n        this._rawAsyncValidators = asyncValidators || [];\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * \\@description\n     * Triggers a warning that this input should not be used with reactive forms.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    set isDisabled(isDisabled) { ReactiveErrors.disabledAttrWarning(); }\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /**\n     * \\@description\n     * Lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * \\@description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param {?} newValue The new value for the view model.\n     * @return {?}\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * \\@description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     * @return {?}\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), (/** @type {?} */ (this._parent)));\n    }\n    /**\n     * \\@description\n     * The top-level directive for this group if present, otherwise null.\n     * @return {?}\n     */\n    get formDirective() { return this._parent ? this._parent.formDirective : null; }\n    /**\n     * \\@description\n     * Synchronous validator function composed of all the synchronous validators\n     * registered with this directive.\n     * @return {?}\n     */\n    get validator() { return composeValidators(this._rawValidators); }\n    /**\n     * \\@description\n     * Async validator function composed of all the async validators registered with this\n     * directive.\n     * @return {?}\n     */\n    get asyncValidator() {\n        return (/** @type {?} */ (composeAsyncValidators(this._rawAsyncValidators)));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _checkParentType() {\n        if (!(this._parent instanceof FormGroupName) &&\n            this._parent instanceof AbstractFormGroupDirective) {\n            ReactiveErrors.ngModelGroupException();\n        }\n        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n            !(this._parent instanceof FormArrayName)) {\n            ReactiveErrors.controlParentException();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _setUpControl() {\n        this._checkParentType();\n        ((/** @type {?} */ (this))).control = this.formDirective.addControl(this);\n        if (this.control.disabled && (/** @type {?} */ (this.valueAccessor)).setDisabledState) {\n            (/** @type {?} */ ((/** @type {?} */ (this.valueAccessor)).setDisabledState))(true);\n        }\n        this._added = true;\n    }\n}\n/**\n * \\@description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * \\@internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.decorators = [\n    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] }\n];\n/** @nocollapse */\nFormControlName.ctorParameters = () => [\n    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] }] },\n    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_MODEL_WITH_FORM_CONTROL_WARNING,] }] }\n];\nFormControlName.propDecorators = {\n    name: [{ type: Input, args: ['formControlName',] }],\n    isDisabled: [{ type: Input, args: ['disabled',] }],\n    model: [{ type: Input, args: ['ngModel',] }],\n    update: [{ type: Output, args: ['ngModelChange',] }]\n};\nif (false) {\n    /**\n     * \\@description\n     * Static property used to track whether any ngModel warnings have been sent across\n     * all instances of FormControlName. Used to support warning config of \"once\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName._ngModelWarningSentOnce;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlName.prototype._added;\n    /**\n     * \\@description\n     * Internal reference to the view model value.\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName.prototype.viewModel;\n    /**\n     * \\@description\n     * Tracks the `FormControl` instance bound to the directive.\n     * @type {?}\n     */\n    FormControlName.prototype.control;\n    /**\n     * \\@description\n     * Tracks the name of the `FormControl` bound to the directive. The name corresponds\n     * to a key in the parent `FormGroup` or `FormArray`.\n     * Accepts a name as a string or a number.\n     * The name in the form of a string is useful for individual forms,\n     * while the numerical form allows for form controls to be bound\n     * to indices when iterating over controls in a `FormArray`.\n     * @type {?}\n     */\n    FormControlName.prototype.name;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlName.prototype.model;\n    /**\n     * @deprecated as of v6\n     * @type {?}\n     */\n    FormControlName.prototype.update;\n    /**\n     * \\@description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular FormControlName instance. Used to support warning config of \"always\".\n     *\n     * \\@internal\n     * @type {?}\n     */\n    FormControlName.prototype._ngModelWarningSent;\n    /**\n     * @type {?}\n     * @private\n     */\n    FormControlName.prototype._ngModelWarningConfig;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives/validators.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@description\n * An interface implemented by classes that perform synchronous validation.\n *\n * \\@usageNotes\n *\n * ### Provide a custom validator\n *\n * The following example implements the `Validator` interface to create a\n * validator directive with a custom error key.\n *\n * ```typescript\n * \\@Directive({\n *   selector: '[customValidator]',\n *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n * })\n * class CustomValidatorDirective implements Validator {\n *   validate(control: AbstractControl): ValidationErrors|null {\n *     return {'custom': true};\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction Validator() { }\nif (false) {\n    /**\n     * \\@description\n     * Method that performs synchronous validation against the provided control.\n     *\n     * @param {?} control The control to validate against.\n     *\n     * @return {?} A map of validation errors if validation fails,\n     * otherwise null.\n     */\n    Validator.prototype.validate = function (control) { };\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    Validator.prototype.registerOnValidatorChange = function (fn) { };\n}\n/**\n * \\@description\n * An interface implemented by classes that perform asynchronous validation.\n *\n * \\@usageNotes\n *\n * ### Provide a custom async validator directive\n *\n * The following example implements the `AsyncValidator` interface to create an\n * async validator directive with a custom error key.\n *\n * ```typescript\n * import { of as observableOf } from 'rxjs';\n *\n * \\@Directive({\n *   selector: '[customAsyncValidator]',\n *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:\n * true}]\n * })\n * class CustomAsyncValidatorDirective implements AsyncValidator {\n *   validate(control: AbstractControl): Observable<ValidationErrors|null> {\n *     return observableOf({'custom': true});\n *   }\n * }\n * ```\n *\n * \\@publicApi\n * @record\n */\nfunction AsyncValidator() { }\nif (false) {\n    /**\n     * \\@description\n     * Method that performs async validation against the provided control.\n     *\n     * @param {?} control The control to validate against.\n     *\n     * @return {?} A promise or observable that resolves a map of validation errors\n     * if validation fails, otherwise null.\n     */\n    AsyncValidator.prototype.validate = function (control) { };\n}\n/**\n * \\@description\n * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => RequiredValidator)),\n    multi: true\n};\n/**\n * \\@description\n * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => CheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds the `required` validator to any controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required validator using template-driven forms\n *\n * ```\n * <input name=\"fullName\" ngModel required>\n * ```\n *\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n * \\@publicApi\n */\nclass RequiredValidator {\n    /**\n     * \\@description\n     * Tracks changes to the required attribute bound to this directive.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = value != null && value !== false && `${value}` !== 'false';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether the control is empty.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.required(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',\n                providers: [REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\nRequiredValidator.propDecorators = {\n    required: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    RequiredValidator.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    RequiredValidator.prototype._onChange;\n}\n/**\n * A Directive that adds the `required` validator to checkbox controls marked with the\n * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a required checkbox validator using template-driven forms\n *\n * The following example shows how to add a checkbox required validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"checkbox\" name=\"active\" ngModel required>\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass CheckboxRequiredValidator extends RequiredValidator {\n    /**\n     * \\@description\n     * Method that validates whether or not the checkbox has been checked.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.required ? Validators.requiredTrue(control) : null;\n    }\n}\nCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',\n                providers: [CHECKBOX_REQUIRED_VALIDATOR],\n                host: { '[attr.required]': 'required ? \"\" : null' }\n            },] }\n];\n/**\n * \\@description\n * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst EMAIL_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => EmailValidator)),\n    multi: true\n};\n/**\n * A directive that adds the `email` validator to controls marked with the\n * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding an email validator\n *\n * The following example shows how to add an email validator to an input attached to an ngModel binding.\n *\n * ```\n * <input type=\"email\" name=\"email\" ngModel email>\n * <input type=\"email\" name=\"email\" ngModel email=\"true\">\n * <input type=\"email\" name=\"email\" ngModel [email]=\"true\">\n * ```\n *\n * \\@publicApi\n * \\@ngModule FormsModule\n * \\@ngModule ReactiveFormsModule\n */\nclass EmailValidator {\n    /**\n     * \\@description\n     * Tracks changes to the email attribute bound to this directive.\n     * @param {?} value\n     * @return {?}\n     */\n    set email(value) {\n        this._enabled = value === '' || value === true || value === 'true';\n        if (this._onChange)\n            this._onChange();\n    }\n    /**\n     * \\@description\n     * Method that validates whether an email address is valid.\n     * Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this._enabled ? Validators.email(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n}\nEmailValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n                providers: [EMAIL_VALIDATOR]\n            },] }\n];\nEmailValidator.propDecorators = {\n    email: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    EmailValidator.prototype._enabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    EmailValidator.prototype._onChange;\n}\n/**\n * \\@description\n * A function that receives a control and synchronously returns a map of\n * validation errors if present, otherwise null.\n *\n * \\@publicApi\n * @record\n */\nfunction ValidatorFn() { }\n/**\n * \\@description\n * A function that receives a control and returns a Promise or observable\n * that emits validation errors if present, otherwise null.\n *\n * \\@publicApi\n * @record\n */\nfunction AsyncValidatorFn() { }\n/**\n * \\@description\n * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MIN_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MinLengthValidator)),\n    multi: true\n};\n/**\n * A directive that adds minimum length validation to controls marked with the\n * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a minimum length validator\n *\n * The following example shows how to add a minimum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel minlength=\"4\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MinLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('minlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value meets a minimum length\n     * requirement. Returns the validation result if enabled, otherwise null.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.minlength == null ? null : this._validator(control);\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.minLength(typeof this.minlength === 'number' ? this.minlength : parseInt(this.minlength, 10));\n    }\n}\nMinLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                providers: [MIN_LENGTH_VALIDATOR],\n                host: { '[attr.minlength]': 'minlength ? minlength : null' }\n            },] }\n];\nMinLengthValidator.propDecorators = {\n    minlength: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MinLengthValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    MinLengthValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the the minimum length bound to this directive.\n     * @type {?}\n     */\n    MinLengthValidator.prototype.minlength;\n}\n/**\n * \\@description\n * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst MAX_LENGTH_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MaxLengthValidator)),\n    multi: true\n};\n/**\n * A directive that adds max length validation to controls marked with the\n * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a maximum length validator\n *\n * The following example shows how to add a maximum length validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel maxlength=\"25\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass MaxLengthValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('maxlength' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value exceeds\n     * the maximum length requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) {\n        return this.maxlength != null ? this._validator(control) : null;\n    }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() {\n        this._validator = Validators.maxLength(typeof this.maxlength === 'number' ? this.maxlength : parseInt(this.maxlength, 10));\n    }\n}\nMaxLengthValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                providers: [MAX_LENGTH_VALIDATOR],\n                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }\n            },] }\n];\nMaxLengthValidator.propDecorators = {\n    maxlength: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MaxLengthValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    MaxLengthValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the the maximum length bound to this directive.\n     * @type {?}\n     */\n    MaxLengthValidator.prototype.maxlength;\n}\n/**\n * \\@description\n * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.\n * @type {?}\n */\nconst PATTERN_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => PatternValidator)),\n    multi: true\n};\n/**\n * \\@description\n * A directive that adds regex pattern validation to controls marked with the\n * `pattern` attribute. The regex must match the entire control value.\n * The directive is provided with the `NG_VALIDATORS` multi-provider list.\n *\n * @see [Form Validation](guide/form-validation)\n *\n * \\@usageNotes\n *\n * ### Adding a pattern validator\n *\n * The following example shows how to add a pattern validator to an input attached to an\n * ngModel binding.\n *\n * ```html\n * <input name=\"firstName\" ngModel pattern=\"[a-zA-Z ]*\">\n * ```\n *\n * \\@ngModule ReactiveFormsModule\n * \\@ngModule FormsModule\n * \\@publicApi\n */\nclass PatternValidator {\n    /**\n     * \\@description\n     * A lifecycle method called when the directive's inputs change. For internal use\n     * only.\n     *\n     * @param {?} changes A object of key/value pairs for the set of changed inputs.\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if ('pattern' in changes) {\n            this._createValidator();\n            if (this._onChange)\n                this._onChange();\n        }\n    }\n    /**\n     * \\@description\n     * Method that validates whether the value matches the\n     * the pattern requirement.\n     * @param {?} control\n     * @return {?}\n     */\n    validate(control) { return this._validator(control); }\n    /**\n     * \\@description\n     * Registers a callback function to call when the validator inputs change.\n     *\n     * @param {?} fn The callback function\n     * @return {?}\n     */\n    registerOnValidatorChange(fn) { this._onChange = fn; }\n    /**\n     * @private\n     * @return {?}\n     */\n    _createValidator() { this._validator = Validators.pattern(this.pattern); }\n}\nPatternValidator.decorators = [\n    { type: Directive, args: [{\n                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                providers: [PATTERN_VALIDATOR],\n                host: { '[attr.pattern]': 'pattern ? pattern : null' }\n            },] }\n];\nPatternValidator.propDecorators = {\n    pattern: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    PatternValidator.prototype._validator;\n    /**\n     * @type {?}\n     * @private\n     */\n    PatternValidator.prototype._onChange;\n    /**\n     * \\@description\n     * Tracks changes to the pattern bound to this directive.\n     * @type {?}\n     */\n    PatternValidator.prototype.pattern;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst SHARED_FORM_DIRECTIVES = [\n    ɵNgNoValidate,\n    NgSelectOption,\n    ɵNgSelectMultipleOption,\n    DefaultValueAccessor,\n    NumberValueAccessor,\n    RangeValueAccessor,\n    CheckboxControlValueAccessor,\n    SelectControlValueAccessor,\n    SelectMultipleControlValueAccessor,\n    RadioControlValueAccessor,\n    NgControlStatus,\n    NgControlStatusGroup,\n    RequiredValidator,\n    MinLengthValidator,\n    MaxLengthValidator,\n    PatternValidator,\n    CheckboxRequiredValidator,\n    EmailValidator,\n];\n/** @type {?} */\nconst TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n/** @type {?} */\nconst REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n/**\n * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n */\nclass ɵInternalFormsSharedModule {\n}\nɵInternalFormsSharedModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: SHARED_FORM_DIRECTIVES,\n                exports: SHARED_FORM_DIRECTIVES,\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/form_builder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} options\n * @return {?}\n */\nfunction isAbstractControlOptions(options) {\n    return ((/** @type {?} */ (options))).asyncValidators !== undefined ||\n        ((/** @type {?} */ (options))).validators !== undefined ||\n        ((/** @type {?} */ (options))).updateOn !== undefined;\n}\n/**\n * \\@description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a `FormControl`,\n * `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to build complex\n * forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass FormBuilder {\n    /**\n     * \\@description\n     * Construct a new `FormGroup` instance.\n     *\n     * @param {?} controlsConfig A collection of child controls. The key for each child is the name\n     * under which it is registered.\n     *\n     * @param {?=} options Configuration options object for the `FormGroup`. The object can\n     * have two shapes:\n     *\n     * 1) `AbstractControlOptions` object (preferred), which consists of:\n     * * `validators`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidators`: A single async validator or array of async validator functions\n     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur' |\n     * submit')\n     *\n     * 2) Legacy configuration object, which consists of:\n     * * `validator`: A synchronous validator function, or an array of validator functions\n     * * `asyncValidator`: A single async validator or array of async validator functions\n     *\n     * @return {?}\n     */\n    group(controlsConfig, options = null) {\n        /** @type {?} */\n        const controls = this._reduceControls(controlsConfig);\n        /** @type {?} */\n        let validators = null;\n        /** @type {?} */\n        let asyncValidators = null;\n        /** @type {?} */\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options['validator'] != null ? options['validator'] : null;\n                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    /**\n     * \\@description\n     * Construct a new `FormControl` with the given state, validators and options.\n     *\n     * \\@usageNotes\n     *\n     * ### Initialize a control as disabled\n     *\n     * The following example returns a control with an initial value in a disabled state.\n     *\n     * <code-example path=\"forms/ts/formBuilder/form_builder_example.ts\" region=\"disabled-control\">\n     * </code-example>\n     * @param {?} formState Initializes the control with an initial state value, or\n     * with an object that contains both a value and a disabled status.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     *\n     * @return {?}\n     */\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * @param {?} controlsConfig An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param {?=} validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param {?=} asyncValidator A single async validator or array of async validator\n     * functions.\n     * @return {?}\n     */\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        /** @type {?} */\n        const controls = controlsConfig.map((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => this._createControl(c)));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * \\@internal\n     * @param {?} controlsConfig\n     * @return {?}\n     */\n    _reduceControls(controlsConfig) {\n        /** @type {?} */\n        const controls = {};\n        Object.keys(controlsConfig).forEach((/**\n         * @param {?} controlName\n         * @return {?}\n         */\n        controlName => {\n            controls[controlName] = this._createControl(controlsConfig[controlName]);\n        }));\n        return controls;\n    }\n    /**\n     * \\@internal\n     * @param {?} controlConfig\n     * @return {?}\n     */\n    _createControl(controlConfig) {\n        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n            controlConfig instanceof FormArray) {\n            return controlConfig;\n        }\n        else if (Array.isArray(controlConfig)) {\n            /** @type {?} */\n            const value = controlConfig[0];\n            /** @type {?} */\n            const validator = controlConfig.length > 1 ? controlConfig[1] : null;\n            /** @type {?} */\n            const asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else {\n            return this.control(controlConfig);\n        }\n    }\n}\nFormBuilder.decorators = [\n    { type: Injectable }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/version.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@publicApi\n * @type {?}\n */\nconst VERSION = new Version('9.0.7');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/form_providers.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Exports the required providers and directives for template-driven forms,\n * making them available for import by NgModules that import this module.\n *\n * @see [Forms Guide](/guide/forms)\n *\n * \\@publicApi\n */\nclass FormsModule {\n}\nFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                providers: [RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n            },] }\n];\n/**\n * Exports the required infrastructure and directives for reactive forms,\n * making them available for import by NgModules that import this module.\n * @see [Forms](guide/reactive-forms)\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * \\@publicApi\n */\nclass ReactiveFormsModule {\n    /**\n     * \\@description\n     * Provides options for configuring the reactive forms module.\n     *\n     * @param {?} opts An object of configuration options\n     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`\n     * binding is used with reactive form directives.\n     * @return {?}\n     */\n    static withConfig(opts) {\n        return {\n            ngModule: ReactiveFormsModule,\n            providers: [{\n                    provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,\n                    useValue: opts.warnOnNgModelWithFormControl\n                }]\n        };\n    }\n}\nReactiveFormsModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                providers: [FormBuilder, RadioControlRegistry],\n                exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/src/forms.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/public_api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: packages/forms/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, DefaultValueAccessor, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControl, FormControlDirective, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormsModule, MaxLengthValidator, MinLengthValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgControlStatus, NgControlStatusGroup, NgForm, NgModel, NgModelGroup, NgSelectOption, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, ReactiveFormsModule, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, VERSION, Validators, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption, SHARED_FORM_DIRECTIVES as ɵangular_packages_forms_forms_a, TEMPLATE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_b, CHECKBOX_REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_ba, EMAIL_VALIDATOR as ɵangular_packages_forms_forms_bb, MIN_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bc, MAX_LENGTH_VALIDATOR as ɵangular_packages_forms_forms_bd, PATTERN_VALIDATOR as ɵangular_packages_forms_forms_be, REACTIVE_DRIVEN_DIRECTIVES as ɵangular_packages_forms_forms_c, ɵInternalFormsSharedModule as ɵangular_packages_forms_forms_d, CHECKBOX_VALUE_ACCESSOR as ɵangular_packages_forms_forms_e, DEFAULT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_f, AbstractControlStatus as ɵangular_packages_forms_forms_g, ngControlStatusHost as ɵangular_packages_forms_forms_h, formDirectiveProvider as ɵangular_packages_forms_forms_i, formControlBinding as ɵangular_packages_forms_forms_j, modelGroupProvider as ɵangular_packages_forms_forms_k, NUMBER_VALUE_ACCESSOR as ɵangular_packages_forms_forms_l, RADIO_VALUE_ACCESSOR as ɵangular_packages_forms_forms_m, RadioControlRegistry as ɵangular_packages_forms_forms_n, RANGE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_o, NG_MODEL_WITH_FORM_CONTROL_WARNING as ɵangular_packages_forms_forms_p, formControlBinding$1 as ɵangular_packages_forms_forms_q, controlNameBinding as ɵangular_packages_forms_forms_r, formDirectiveProvider$1 as ɵangular_packages_forms_forms_s, formGroupNameProvider as ɵangular_packages_forms_forms_t, formArrayNameProvider as ɵangular_packages_forms_forms_u, SELECT_VALUE_ACCESSOR as ɵangular_packages_forms_forms_v, SELECT_MULTIPLE_VALUE_ACCESSOR as ɵangular_packages_forms_forms_w, ɵNgSelectMultipleOption as ɵangular_packages_forms_forms_x, ɵNgNoValidate as ɵangular_packages_forms_forms_y, REQUIRED_VALIDATOR as ɵangular_packages_forms_forms_z };\n//# sourceMappingURL=forms.js.map\n","<ng-template cdkPortalOutlet></ng-template>\n","import { Directive, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, NgModule } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardContent {\n}\nMatCardContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-content, [mat-card-content], [matCardContent]',\n                host: { 'class': 'mat-card-content' }\n            },] }\n];\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardTitle {\n}\nMatCardTitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n                host: {\n                    'class': 'mat-card-title'\n                }\n            },] }\n];\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardSubtitle {\n}\nMatCardSubtitle.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n                host: {\n                    'class': 'mat-card-subtitle'\n                }\n            },] }\n];\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardActions {\n    constructor() {\n        /**\n         * Position of the actions inside the card.\n         */\n        this.align = 'start';\n    }\n}\nMatCardActions.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-actions',\n                exportAs: 'matCardActions',\n                host: {\n                    'class': 'mat-card-actions',\n                    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n                }\n            },] }\n];\nMatCardActions.propDecorators = {\n    align: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Position of the actions inside the card.\n     * @type {?}\n     */\n    MatCardActions.prototype.align;\n}\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nclass MatCardFooter {\n}\nMatCardFooter.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-card-footer',\n                host: { 'class': 'mat-card-footer' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardImage {\n}\nMatCardImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-image], [matCardImage]',\n                host: { 'class': 'mat-card-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardSmImage {\n}\nMatCardSmImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-sm-image], [matCardImageSmall]',\n                host: { 'class': 'mat-card-sm-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardMdImage {\n}\nMatCardMdImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-md-image], [matCardImageMedium]',\n                host: { 'class': 'mat-card-md-image' }\n            },] }\n];\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardLgImage {\n}\nMatCardLgImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-lg-image], [matCardImageLarge]',\n                host: { 'class': 'mat-card-lg-image' }\n            },] }\n];\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardXlImage {\n}\nMatCardXlImage.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-xl-image], [matCardImageXLarge]',\n                host: { 'class': 'mat-card-xl-image' }\n            },] }\n];\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nclass MatCardAvatar {\n}\nMatCardAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-card-avatar], [matCardAvatar]',\n                host: { 'class': 'mat-card-avatar' }\n            },] }\n];\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nclass MatCard {\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    /**\n     * @param {?=} _animationMode\n     */\n    constructor(_animationMode) {\n        this._animationMode = _animationMode;\n    }\n}\nMatCard.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card',\n                exportAs: 'matCard',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-card-footer\\\"></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-card mat-focus-indicator',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                styles: [\".mat-card{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:block;position:relative;padding:16px;border-radius:4px}._mat-animation-noopable.mat-card{transition:none;animation:none}.mat-card .mat-divider-horizontal{position:absolute;left:0;width:100%}[dir=rtl] .mat-card .mat-divider-horizontal{left:auto;right:0}.mat-card .mat-divider-horizontal.mat-divider-inset{position:static;margin:0}[dir=rtl] .mat-card .mat-divider-horizontal.mat-divider-inset{margin-right:0}.cdk-high-contrast-active .mat-card{outline:solid 1px}.mat-card-actions,.mat-card-subtitle,.mat-card-content{display:block;margin-bottom:16px}.mat-card-title{display:block;margin-bottom:8px}.mat-card-actions{margin-left:-8px;margin-right:-8px;padding:8px 0}.mat-card-actions-align-end{display:flex;justify-content:flex-end}.mat-card-image{width:calc(100% + 32px);margin:0 -16px 16px -16px}.mat-card-footer{display:block;margin:0 -16px -16px -16px}.mat-card-actions .mat-button,.mat-card-actions .mat-raised-button,.mat-card-actions .mat-stroked-button{margin:0 8px}.mat-card-header{display:flex;flex-direction:row}.mat-card-header .mat-card-title{margin-bottom:12px}.mat-card-header-text{margin:0 16px}.mat-card-avatar{height:40px;width:40px;border-radius:50%;flex-shrink:0;object-fit:cover}.mat-card-title-group{display:flex;justify-content:space-between}.mat-card-sm-image{width:80px;height:80px}.mat-card-md-image{width:112px;height:112px}.mat-card-lg-image{width:152px;height:152px}.mat-card-xl-image{width:240px;height:240px;margin:-8px}.mat-card-title-group>.mat-card-xl-image{margin:-8px 0 8px}@media(max-width: 599px){.mat-card-title-group{margin:0}.mat-card-xl-image{margin-left:0;margin-right:0}}.mat-card>:first-child,.mat-card-content>:first-child{margin-top:0}.mat-card>:last-child:not(.mat-card-footer),.mat-card-content>:last-child:not(.mat-card-footer){margin-bottom:0}.mat-card-image:first-child{margin-top:-16px;border-top-left-radius:inherit;border-top-right-radius:inherit}.mat-card>.mat-card-actions:last-child{margin-bottom:-8px;padding-bottom:0}.mat-card-actions .mat-button:first-child,.mat-card-actions .mat-raised-button:first-child,.mat-card-actions .mat-stroked-button:first-child{margin-left:0;margin-right:0}.mat-card-title:not(:first-child),.mat-card-subtitle:not(:first-child){margin-top:-4px}.mat-card-header .mat-card-subtitle:not(:first-child){margin-top:-8px}.mat-card>.mat-card-xl-image:first-child{margin-top:-8px}.mat-card>.mat-card-xl-image:last-child{margin-bottom:-8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCard.ctorParameters = () => [\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /** @type {?} */\n    MatCard.prototype._animationMode;\n}\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nclass MatCardHeader {\n}\nMatCardHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-header',\n                template: \"<ng-content select=\\\"[mat-card-avatar], [matCardAvatar]\\\"></ng-content>\\n<div class=\\\"mat-card-header-text\\\">\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-header' }\n            }] }\n];\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nclass MatCardTitleGroup {\n}\nMatCardTitleGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-card-title-group',\n                template: \"<div>\\n  <ng-content\\n      select=\\\"mat-card-title, mat-card-subtitle,\\n      [mat-card-title], [mat-card-subtitle],\\n      [matCardTitle], [matCardSubtitle]\\\"></ng-content>\\n</div>\\n<ng-content select=\\\"img\\\"></ng-content>\\n<ng-content></ng-content>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: { 'class': 'mat-card-title-group' }\n            }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/card-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatCardModule {\n}\nMatCardModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [\n                    MatCard,\n                    MatCardHeader,\n                    MatCardTitleGroup,\n                    MatCardContent,\n                    MatCardTitle,\n                    MatCardSubtitle,\n                    MatCardActions,\n                    MatCardFooter,\n                    MatCardSmImage,\n                    MatCardMdImage,\n                    MatCardLgImage,\n                    MatCardImage,\n                    MatCardXlImage,\n                    MatCardAvatar,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n                    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n                    MatCardXlImage, MatCardAvatar,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/card/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCard, MatCardActions, MatCardAvatar, MatCardContent, MatCardFooter, MatCardHeader, MatCardImage, MatCardLgImage, MatCardMdImage, MatCardModule, MatCardSmImage, MatCardSubtitle, MatCardTitle, MatCardTitleGroup, MatCardXlImage };\n//# sourceMappingURL=card.js.map\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-checkbox` options that can be overridden.\n * @record\n */\nfunction MatCheckboxDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatCheckboxDefaultOptions.prototype.color;\n    /** @type {?|undefined} */\n    MatCheckboxDefaultOptions.prototype.clickAction;\n}\n/**\n * Injection token to be used to override the default options for `mat-checkbox`.\n * @type {?}\n */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * \\@breaking-change 10.0.0\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckbox)),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\nif (false) {\n    /**\n     * The source MatCheckbox of the event.\n     * @type {?}\n     */\n    MatCheckboxChange.prototype.source;\n    /**\n     * The new `checked` value of the checkbox.\n     * @type {?}\n     */\n    MatCheckboxChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatCheckboxBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     * @param {?=} _options\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || {};\n        if (this._options.color) {\n            this.color = this._options.color;\n        }\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                }));\n            }\n        }));\n        // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n        this._clickAction = this._clickAction || this._options.clickAction;\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() { }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    element.classList.remove(animationClass);\n                }), 1000);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                }));\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _syncIndeterminate(value) {\n        /** @type {?} */\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_required;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_indeterminate;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatCheckbox.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatCheckbox.prototype.ariaLabelledby;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._uniqueId;\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatCheckbox.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._required;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     * @type {?}\n     */\n    MatCheckbox.prototype.labelPosition;\n    /**\n     * Name value will be applied to the input element if present\n     * @type {?}\n     */\n    MatCheckbox.prototype.name;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     * @type {?}\n     */\n    MatCheckbox.prototype.change;\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     * @type {?}\n     */\n    MatCheckbox.prototype.indeterminateChange;\n    /**\n     * The value attribute of the native input element\n     * @type {?}\n     */\n    MatCheckbox.prototype.value;\n    /**\n     * The native `<input type=\"checkbox\">` element\n     * @type {?}\n     */\n    MatCheckbox.prototype._inputElement;\n    /**\n     * Reference to the ripple instance of the checkbox.\n     * @type {?}\n     */\n    MatCheckbox.prototype.ripple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatCheckbox.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._currentAnimationClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._currentCheckState;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._controlValueAccessorChangeFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._checked;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._indeterminate;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._ngZone;\n    /**\n     * @deprecated `_clickAction` parameter to be removed, use\n     * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._clickAction;\n    /** @type {?} */\n    MatCheckbox.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator],\n            },] }\n];\nclass MatCheckboxModule {\n}\nMatCheckboxModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n//# sourceMappingURL=checkbox.js.map\n","import { SPACE, BACKSPACE, DELETE, HOME, END, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport { Directive, EventEmitter, ElementRef, NgZone, Optional, Inject, ChangeDetectorRef, Attribute, ContentChild, forwardRef, Input, Output, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { DOCUMENT } from '@angular/common';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an event fired on an individual `mat-chip`.\n * @record\n */\nfunction MatChipEvent() { }\nif (false) {\n    /**\n     * The chip the event was fired on.\n     * @type {?}\n     */\n    MatChipEvent.prototype.chip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nclass MatChipSelectionChange {\n    /**\n     * @param {?} source\n     * @param {?} selected\n     * @param {?=} isUserInput\n     */\n    constructor(source, selected, isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\nif (false) {\n    /**\n     * Reference to the chip that emitted the event.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.source;\n    /**\n     * Whether the chip that emitted the event is selected.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.selected;\n    /**\n     * Whether the selection change was a result of a user interaction.\n     * @type {?}\n     */\n    MatChipSelectionChange.prototype.isUserInput;\n}\n// Boilerplate for applying mixins to MatChip.\n/**\n * \\@docs-private\n */\nclass MatChipBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipBase.prototype.disabled;\n    /** @type {?} */\n    MatChipBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * \\@docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-avatar, [matChipAvatar]',\n                host: { 'class': 'mat-chip-avatar' }\n            },] }\n];\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * \\@docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                host: { 'class': 'mat-chip-trailing-icon' }\n            },] }\n];\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?=} animationMode\n     * @param {?=} _changeDetectorRef\n     * @param {?=} tabIndex\n     * @param {?=} _document\n     */\n    constructor(_elementRef, _ngZone, platform, globalRippleOptions, \n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\n    animationMode, _changeDetectorRef, tabIndex, \n    // @breaking-change 11.0.0 `_document` parameter to become required.\n    _document) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Whether the chip has focus.\n         */\n        this._hasFocus = false;\n        /**\n         * Whether the chip list is selectable\n         */\n        this.chipListSelectable = true;\n        /**\n         * Whether the chip list is in multi-selection mode.\n         */\n        this._chipListMultiple = false;\n        /**\n         * Whether the chip list as a whole is disabled.\n         */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /**\n         * Emits when the chip is focused.\n         */\n        this._onFocus = new Subject();\n        /**\n         * Emits when the chip is blured.\n         */\n        this._onBlur = new Subject();\n        /**\n         * Emitted when the chip is selected or deselected.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Emitted when the chip is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emitted when a chip is to be removed.\n         */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = (_document || document).createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(_elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? (parseInt(tabIndex) || -1) : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\n    }\n    /**\n     * Whether the chip is selected.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /**\n     * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\n     * @return {?}\n     */\n    get value() {\n        return this._value !== undefined\n            ? this._value\n            : this._elementRef.nativeElement.textContent;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this._value = value; }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     * @return {?}\n     */\n    get selectable() { return this._selectable && this.chipListSelectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the chip is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._chipListDisabled || this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     * @return {?}\n     */\n    get removable() { return this._removable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /**\n     * The ARIA selected applied to the chip.\n     * @return {?}\n     */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected) ?\n            this.selected.toString() : null;\n    }\n    /**\n     * @return {?}\n     */\n    _addHostClassName() {\n        /** @type {?} */\n        const basicChipAttrName = 'mat-basic-chip';\n        /** @type {?} */\n        const element = (/** @type {?} */ (this._elementRef.nativeElement));\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /**\n     * Selects the chip.\n     * @return {?}\n     */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Deselects the chip.\n     * @return {?}\n     */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._markForCheck();\n        }\n    }\n    /**\n     * Select this chip and emit selected event\n     * @return {?}\n     */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._markForCheck();\n        }\n    }\n    /**\n     * Toggles the current selected state of this chip.\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._markForCheck();\n        return this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the chip.\n     * @return {?}\n     */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     * @return {?}\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /**\n     * Handles click events on the chip.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Handle custom key presses.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            }));\n        }));\n    }\n    /**\n     * @private\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _markForCheck() {\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n}\nMatChip.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                inputs: ['color', 'disableRipple', 'tabIndex'],\n                exportAs: 'matChip',\n                host: {\n                    'class': 'mat-chip mat-focus-indicator',\n                    '[attr.tabindex]': 'disabled ? null : tabIndex',\n                    'role': 'option',\n                    '[class.mat-chip-selected]': 'selected',\n                    '[class.mat-chip-with-avatar]': 'avatar',\n                    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                    '[class.mat-chip-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationsDisabled',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-selected]': 'ariaSelected',\n                    '(click)': '_handleClick($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                },\n            },] }\n];\n/** @nocollapse */\nMatChip.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatChip.propDecorators = {\n    avatar: [{ type: ContentChild, args: [MatChipAvatar,] }],\n    trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon,] }],\n    removeIcon: [{ type: ContentChild, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatChipRemove)),] }],\n    selected: [{ type: Input }],\n    value: [{ type: Input }],\n    selectable: [{ type: Input }],\n    disabled: [{ type: Input }],\n    removable: [{ type: Input }],\n    selectionChange: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    removed: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_selectable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_removable;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChip.ngAcceptInputType_disableRipple;\n    /**\n     * Reference to the RippleRenderer for the chip.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRipple;\n    /**\n     * Reference to the element that acts as the chip's ripple target. This element is\n     * dynamically added as a child node of the chip. The chip itself cannot be used as the\n     * ripple target because it must be the host of the focus indicator.\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._chipRippleTarget;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the chip ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChip.prototype.rippleConfig;\n    /**\n     * Whether the chip has focus.\n     * @type {?}\n     */\n    MatChip.prototype._hasFocus;\n    /**\n     * Whether animations for the chip are enabled.\n     * @type {?}\n     */\n    MatChip.prototype._animationsDisabled;\n    /**\n     * Whether the chip list is selectable\n     * @type {?}\n     */\n    MatChip.prototype.chipListSelectable;\n    /**\n     * Whether the chip list is in multi-selection mode.\n     * @type {?}\n     */\n    MatChip.prototype._chipListMultiple;\n    /**\n     * Whether the chip list as a whole is disabled.\n     * @type {?}\n     */\n    MatChip.prototype._chipListDisabled;\n    /**\n     * The chip avatar\n     * @type {?}\n     */\n    MatChip.prototype.avatar;\n    /**\n     * The chip's trailing icon.\n     * @type {?}\n     */\n    MatChip.prototype.trailingIcon;\n    /**\n     * The chip's remove toggler.\n     * @type {?}\n     */\n    MatChip.prototype.removeIcon;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selected;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._selectable;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._disabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChip.prototype._removable;\n    /**\n     * Emits when the chip is focused.\n     * @type {?}\n     */\n    MatChip.prototype._onFocus;\n    /**\n     * Emits when the chip is blured.\n     * @type {?}\n     */\n    MatChip.prototype._onBlur;\n    /**\n     * Emitted when the chip is selected or deselected.\n     * @type {?}\n     */\n    MatChip.prototype.selectionChange;\n    /**\n     * Emitted when the chip is destroyed.\n     * @type {?}\n     */\n    MatChip.prototype.destroyed;\n    /**\n     * Emitted when a chip is to be removed.\n     * @type {?}\n     */\n    MatChip.prototype.removed;\n    /** @type {?} */\n    MatChip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChip.prototype._changeDetectorRef;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    /**\n     * @param {?} _parentChip\n     * @param {?=} elementRef\n     */\n    constructor(_parentChip, \n    // @breaking-change 11.0.0 `elementRef` parameter to be made required.\n    elementRef) {\n        this._parentChip = _parentChip;\n        // @breaking-change 11.0.0 Remove null check for `elementRef`.\n        if (elementRef && elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /**\n     * Calls the parent chip's public `remove()` method if applicable.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        /** @type {?} */\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.decorators = [\n    { type: Directive, args: [{\n                selector: '[matChipRemove]',\n                host: {\n                    'class': 'mat-chip-remove mat-chip-trailing-icon',\n                    '(click)': '_handleClick($event)',\n                }\n            },] }\n];\n/** @nocollapse */\nMatChipRemove.ctorParameters = () => [\n    { type: MatChip },\n    { type: ElementRef }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipRemove.prototype._parentChip;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-default-options.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default options, for the chips module, that can be overridden.\n * @record\n */\nfunction MatChipsDefaultOptions() { }\nif (false) {\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     * @type {?}\n     */\n    MatChipsDefaultOptions.prototype.separatorKeyCodes;\n}\n/**\n * Injection token to be used to override the default options for the chips module.\n * @type {?}\n */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatChipList.\n/**\n * \\@docs-private\n */\nclass MatChipListBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatChipListBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatChipListBase.prototype._parentForm;\n    /** @type {?} */\n    MatChipListBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipListBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n// Increasing integer for generating unique ids for chip-list components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nclass MatChipListChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * Chip list that emitted the event.\n     * @type {?}\n     */\n    MatChipListChange.prototype.source;\n    /**\n     * Value of the chip list when the event was emitted.\n     * @type {?}\n     */\n    MatChipListChange.prototype.value;\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this.ngControl = ngControl;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Uid of the chip list\n         */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /**\n         * Tab index for the chip list.\n         */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /**\n         * Function when touched\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Function when changed\n         */\n        this._onChange = (/**\n         * @return {?}\n         */\n        () => { });\n        this._multiple = false;\n        this._compareWith = (/**\n         * @param {?} o1\n         * @param {?} o2\n         * @return {?}\n         */\n        (o1, o2) => o1 === o2);\n        this._required = false;\n        this._disabled = false;\n        /**\n         * Orientation of the chip list.\n         */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /**\n         * Event emitted when the selected chip list value has been changed by the user.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /**\n     * The array of selected chips inside chip list.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The ARIA role applied to the chip list.\n     * @return {?}\n     */\n    get role() { return this.empty ? null : 'listbox'; }\n    /**\n     * Whether the user should be allowed to select multiple chips.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether any chips or the matChipInput inside of this chip-list has focus.\n     * @return {?}\n     */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() { return !this.empty || this.focused; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     * @return {?}\n     */\n    get selectable() { return this._selectable; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.chipListSelectable = this._selectable));\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /**\n     * Combined stream of all of the child chips' selection change events.\n     * @return {?}\n     */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.selectionChange)));\n    }\n    /**\n     * Combined stream of all of the child chips' focus change events.\n     * @return {?}\n     */\n    get chipFocusChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onFocus)));\n    }\n    /**\n     * Combined stream of all of the child chips' blur change events.\n     * @return {?}\n     */\n    get chipBlurChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._onBlur)));\n    }\n    /**\n     * Combined stream of all of the child chips' remove change events.\n     * @return {?}\n     */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.destroyed)));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            dir => this._keyManager.withHorizontalOrientation(dir)));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._syncChipsState();\n                }));\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /**\n     * Associates an HTML input element with this chip list.\n     * @param {?} inputElement\n     * @return {?}\n     */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { this._ariaDescribedby = ids.join(' '); }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Attempt to focus an input if we have one.\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        // If they are on an empty input and hit backspace, focus the last chip\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n            this._keyManager.setLastItemActive();\n            event.preventDefault();\n        }\n        else if (target && target.classList.contains('mat-chip')) {\n            if (event.keyCode === HOME) {\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n            }\n            else if (event.keyCode === END) {\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                this._keyManager.onKeydown(event);\n            }\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     * @protected\n     * @return {?}\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     * @protected\n     * @return {?}\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                /** @type {?} */\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    /**\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _isInputEmpty(element) {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            /** @type {?} */\n            let input = (/** @type {?} */ (element));\n            return !input.value;\n        }\n        return false;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?}\n     */\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip.deselect()));\n        if (Array.isArray(value)) {\n            value.forEach((/**\n             * @param {?} currentValue\n             * @return {?}\n             */\n            currentValue => this._selectValue(currentValue, isUserInput)));\n            this._sortValues();\n        }\n        else {\n            /** @type {?} */\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @private\n     * @param {?} value\n     * @param {?=} isUserInput\n     * @return {?} Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        /** @type {?} */\n        const correspondingChip = this.chips.find((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        }));\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        }));\n    }\n    /**\n     * Deselects every chip in the list.\n     * @private\n     * @param {?=} skip Chip that should not be deselected.\n     * @return {?}\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        }));\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            }));\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => chip.value));\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * When blurred, mark the field as touched when focus moved outside the chip list.\n     * @return {?}\n     */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                }));\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /**\n     * Mark the field as touched\n     * @return {?}\n     */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach((/**\n                 * @param {?} chip\n                 * @return {?}\n                 */\n                chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                }));\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        }));\n    }\n    /**\n     * Listens to user-generated selection events on each chip.\n     * @private\n     * @return {?}\n     */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        }));\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._blur();\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            /** @type {?} */\n            const chip = event.chip;\n            /** @type {?} */\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        }));\n    }\n    /**\n     * Checks whether an event comes from inside a chip element.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _originatesFromChip(event) {\n        /** @type {?} */\n        let currentElement = (/** @type {?} */ (event.target));\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /**\n     * Checks whether any of the chips is focused.\n     * @private\n     * @return {?}\n     */\n    _hasFocusedChip() {\n        return this.chips.some((/**\n         * @param {?} chip\n         * @return {?}\n         */\n        chip => chip._hasFocus));\n    }\n    /**\n     * Syncs the list's state with the individual chips.\n     * @private\n     * @return {?}\n     */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach((/**\n             * @param {?} chip\n             * @return {?}\n             */\n            chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            }));\n        }\n    }\n}\nMatChipList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-chip-list',\n                template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n                exportAs: 'matChipList',\n                host: {\n                    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-required]': 'role ? required : null',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.role]': 'role',\n                    '[class.mat-chip-list-disabled]': 'disabled',\n                    '[class.mat-chip-list-invalid]': 'errorState',\n                    '[class.mat-chip-list-required]': 'required',\n                    '[attr.aria-orientation]': 'ariaOrientation',\n                    'class': 'mat-chip-list',\n                    '(focus)': 'focus()',\n                    '(blur)': '_blur()',\n                    '(keydown)': '_keydown($event)',\n                    '[id]': '_uid',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatChipList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\n];\nMatChipList.propDecorators = {\n    errorStateMatcher: [{ type: Input }],\n    multiple: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    required: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    disabled: [{ type: Input }],\n    ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\n    selectable: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    change: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    chips: [{ type: ContentChildren, args: [MatChip, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_multiple;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_required;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatChipList.ngAcceptInputType_selectable;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.controlType;\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._lastDestroyedChipIndex;\n    /**\n     * Subject that emits when the component has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._destroyed;\n    /**\n     * Subscription to focus changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipFocusSubscription;\n    /**\n     * Subscription to blur changes in the chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipBlurSubscription;\n    /**\n     * Subscription to selection changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipSelectionSubscription;\n    /**\n     * Subscription to remove changes in chips.\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._chipRemoveSubscription;\n    /**\n     * The chip input to add more chips\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._chipInput;\n    /**\n     * Uid of the chip list\n     * @type {?}\n     */\n    MatChipList.prototype._uid;\n    /**\n     * The aria-describedby attribute on the chip list for improved a11y.\n     * @type {?}\n     */\n    MatChipList.prototype._ariaDescribedby;\n    /**\n     * Tab index for the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype._tabIndex;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     * @type {?}\n     */\n    MatChipList.prototype._userTabIndex;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatChipList.prototype._keyManager;\n    /**\n     * Function when touched\n     * @type {?}\n     */\n    MatChipList.prototype._onTouched;\n    /**\n     * Function when changed\n     * @type {?}\n     */\n    MatChipList.prototype._onChange;\n    /** @type {?} */\n    MatChipList.prototype._selectionModel;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatChipList.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._compareWith;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._disabled;\n    /**\n     * Orientation of the chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.ariaOrientation;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._selectable;\n    /**\n     * Event emitted when the selected chip list value has been changed by the user.\n     * @type {?}\n     */\n    MatChipList.prototype.change;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.valueChange;\n    /**\n     * The chip components contained within this chip list.\n     * @type {?}\n     */\n    MatChipList.prototype.chips;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipList.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipList.prototype._dir;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatChipList.prototype.ngControl;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chip-input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Represents an input event on a `matChipInput`.\n * @record\n */\nfunction MatChipInputEvent() { }\nif (false) {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.input;\n    /**\n     * The value of the input.\n     * @type {?}\n     */\n    MatChipInputEvent.prototype.value;\n}\n// Increasing integer for generating unique ids.\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /**\n         * Whether the control is focused.\n         */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /**\n         * Emitted when a chip is to be added.\n         */\n        this.chipEnd = new EventEmitter();\n        /**\n         * The input's placeholder text.\n         */\n        this.placeholder = '';\n        /**\n         * Unique id for the input.\n         */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\n    }\n    /**\n     * Register input for chip list\n     * @param {?} value\n     * @return {?}\n     */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     * @return {?}\n     */\n    get addOnBlur() { return this._addOnBlur; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this._chipList && this._chipList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    /**\n     * Whether the input is empty.\n     * @return {?}\n     */\n    get empty() { return !this._inputElement.value; }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Utility method to make host definition/tests more clear.\n     * @param {?=} event\n     * @return {?}\n     */\n    _keydown(event) {\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n        // want to do this when going backwards, because focus should go back to the first chip.\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n            this._chipList._allowFocusEscape();\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Checks to see if the blur should emit the (chipEnd) event.\n     * @return {?}\n     */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    _focus() {\n        this.focused = true;\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Checks to see if the (chipEnd) event needs to be emitted.\n     * @param {?=} event\n     * @return {?}\n     */\n    _emitChipEnd(event) {\n        if (!this._inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._inputElement.focus(options);\n    }\n    /**\n     * Checks whether a keycode is one of the configured separators.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _isSeparatorKey(event) {\n        if (hasModifierKey(event)) {\n            return false;\n        }\n        /** @type {?} */\n        const separators = this.separatorKeyCodes;\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\nMatChipInput.decorators = [\n    { type: Directive, args: [{\n                selector: 'input[matChipInputFor]',\n                exportAs: 'matChipInput, matChipInputFor',\n                host: {\n                    'class': 'mat-chip-input mat-input-element',\n                    '(keydown)': '_keydown($event)',\n                    '(blur)': '_blur()',\n                    '(focus)': '_focus()',\n                    '(input)': '_onInput()',\n                    '[id]': 'id',\n                    '[attr.disabled]': 'disabled || null',\n                    '[attr.placeholder]': 'placeholder || null',\n                    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                    '[attr.aria-required]': '_chipList && _chipList.required || null',\n                }\n            },] }\n];\n/** @nocollapse */\nMatChipInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\n];\nMatChipInput.propDecorators = {\n    chipList: [{ type: Input, args: ['matChipInputFor',] }],\n    addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\n    separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\n    chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\n    placeholder: [{ type: Input }],\n    id: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_addOnBlur;\n    /** @type {?} */\n    MatChipInput.ngAcceptInputType_disabled;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatChipInput.prototype.focused;\n    /** @type {?} */\n    MatChipInput.prototype._chipList;\n    /** @type {?} */\n    MatChipInput.prototype._addOnBlur;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     * @type {?}\n     */\n    MatChipInput.prototype.separatorKeyCodes;\n    /**\n     * Emitted when a chip is to be added.\n     * @type {?}\n     */\n    MatChipInput.prototype.chipEnd;\n    /**\n     * The input's placeholder text.\n     * @type {?}\n     */\n    MatChipInput.prototype.placeholder;\n    /**\n     * Unique id for the input.\n     * @type {?}\n     */\n    MatChipInput.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._disabled;\n    /**\n     * The native input element to which this directive is attached.\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatChipInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatChipInput.prototype._defaultOptions;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/chips-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nconst ɵ0 = ({\n    separatorKeyCodes: [ENTER]\n});\nclass MatChipsModule {\n}\nMatChipsModule.decorators = [\n    { type: NgModule, args: [{\n                exports: CHIP_DECLARATIONS,\n                declarations: CHIP_DECLARATIONS,\n                providers: [\n                    ErrorStateMatcher,\n                    {\n                        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                        useValue: (/** @type {?} */ (ɵ0))\n                    }\n                ]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/chips/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n//# sourceMappingURL=chips.js.map\n","import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Possible overrides for a dialog's position.\n * @record\n */\nfunction DialogPosition() { }\nif (false) {\n    /**\n     * Override for the dialog's top position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.top;\n    /**\n     * Override for the dialog's bottom position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.bottom;\n    /**\n     * Override for the dialog's left position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.left;\n    /**\n     * Override for the dialog's right position.\n     * @type {?|undefined}\n     */\n    DialogPosition.prototype.right;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n * @template D\n */\nclass MatDialogConfig {\n    constructor() {\n        /**\n         * The ARIA role of the dialog element.\n         */\n        this.role = 'dialog';\n        /**\n         * Custom class for the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the dialog has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Custom class for the backdrop.\n         */\n        this.backdropClass = '';\n        /**\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\n         */\n        this.disableClose = false;\n        /**\n         * Width of the dialog.\n         */\n        this.width = '';\n        /**\n         * Height of the dialog.\n         */\n        this.height = '';\n        /**\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n         */\n        this.maxWidth = '80vw';\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * ID of the element that describes the dialog.\n         */\n        this.ariaDescribedBy = null;\n        /**\n         * ID of the element that labels the dialog.\n         */\n        this.ariaLabelledBy = null;\n        /**\n         * Aria label to assign to the dialog element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Whether the dialog should focus the first focusable element on open.\n         */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\nif (false) {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.viewContainerRef;\n    /**\n     * ID for the dialog. If omitted, a unique one will be generated.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.id;\n    /**\n     * The ARIA role of the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.role;\n    /**\n     * Custom class for the overlay pane.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.panelClass;\n    /**\n     * Whether the dialog has a backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.hasBackdrop;\n    /**\n     * Custom class for the backdrop.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.backdropClass;\n    /**\n     * Whether the user can use escape or clicking on the backdrop to close the modal.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.disableClose;\n    /**\n     * Width of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.width;\n    /**\n     * Height of the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.height;\n    /**\n     * Min-width of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minWidth;\n    /**\n     * Min-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.minHeight;\n    /**\n     * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxWidth;\n    /**\n     * Max-height of the dialog. If a number is provided, assumes pixel units.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.maxHeight;\n    /**\n     * Position overrides.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.position;\n    /**\n     * Data being injected into the child component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.data;\n    /**\n     * Layout direction for the dialog's content.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.direction;\n    /**\n     * ID of the element that describes the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaDescribedBy;\n    /**\n     * ID of the element that labels the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabelledBy;\n    /**\n     * Aria label to assign to the dialog element.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.ariaLabel;\n    /**\n     * Whether the dialog should focus the first focusable element on open.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.autoFocus;\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.restoreFocus;\n    /**\n     * Scroll strategy to be used for the dialog.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     * @type {?}\n     */\n    MatDialogConfig.prototype.closeOnNavigation;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @type {?}\n     */\n    MatDialogConfig.prototype.componentFactoryResolver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatDialog.\n * \\@docs-private\n * @type {?}\n */\nconst matDialogAnimations = {\n    /**\n     * Animation that is applied on the dialog container by defalt.\n     */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-container.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nclass MatDialogContainer extends BasePortalOutlet {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _changeDetectorRef\n     * @param {?} _document\n     * @param {?} _config\n     */\n    constructor(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._config = _config;\n        /**\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\n         */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * State of the dialog animation.\n         */\n        this._state = 'enter';\n        /**\n         * Emits when an animation state changes.\n         */\n        this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * \\@breaking-change 10.0.0\n         */\n        this.attachDomPortal = (/**\n         * @param {?} portal\n         * @return {?}\n         */\n        (portal) => {\n            if (this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            this._setupFocusTrap();\n            return this._portalOutlet.attachDomPortal(portal);\n        });\n        this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        this._document = _document;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @template T\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @template C\n     * @param {?} portal Portal to be attached as the dialog content.\n     * @return {?}\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._setupFocusTrap();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /**\n     * Moves focus back into the dialog if it was moved out.\n     * @return {?}\n     */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            /** @type {?} */\n            const focusWasTrapped = this._focusTrap.focusInitialElement();\n            if (!focusWasTrapped) {\n                this._elementRef.nativeElement.focus();\n            }\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap.\n     * @private\n     * @return {?}\n     */\n    _trapFocus() {\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else if (!this._containsFocus()) {\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the dialog opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        /** @type {?} */\n        const toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            /** @type {?} */\n            const activeElement = this._document.activeElement;\n            /** @type {?} */\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /**\n     * Sets up the focus trand and saves a reference to the\n     * element that was focused before the dialog was opened.\n     * @private\n     * @return {?}\n     */\n    _setupFocusTrap() {\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        }\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._elementRef.nativeElement.focus()));\n            }\n        }\n    }\n    /**\n     * Returns whether focus is inside the dialog.\n     * @private\n     * @return {?}\n     */\n    _containsFocus() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const activeElement = this._document.activeElement;\n        return element === activeElement || element.contains(activeElement);\n    }\n    /**\n     * Callback, invoked whenever an animation on the host completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Callback, invoked when an animation on the host starts.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._animationStateChanged.emit(event);\n    }\n    /**\n     * Starts the dialog exit animation.\n     * @return {?}\n     */\n    _startExitAnimation() {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatDialogContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)',\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatDialogContainer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDialogConfig }\n];\nMatDialogContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._document;\n    /**\n     * The portal outlet inside of this container into which the dialog content will be loaded.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._portalOutlet;\n    /**\n     * The class that traps and manages focus within the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrap;\n    /**\n     * Element that was focused before the dialog was opened. Save this to restore upon close.\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n    /**\n     * State of the dialog animation.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._state;\n    /**\n     * Emits when an animation state changes.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._animationStateChanged;\n    /**\n     * ID of the element that should be considered as the dialog's label.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._ariaLabelledBy;\n    /**\n     * ID for the container DOM element.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._id;\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * \\@param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDialogContainer.prototype.attachDomPortal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogContainer.prototype._changeDetectorRef;\n    /**\n     * The dialog configuration.\n     * @type {?}\n     */\n    MatDialogContainer.prototype._config;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\n/** @type {?} */\nlet uniqueId = 0;\n/** @enum {number} */\nconst MatDialogState = {\n    OPEN: 0, CLOSING: 1, CLOSED: 2,\n};\n/**\n * Reference to a dialog opened via the MatDialog service.\n * @template T, R\n */\nclass MatDialogRef {\n    /**\n     * @param {?} _overlayRef\n     * @param {?} _containerInstance\n     * @param {?=} id\n     */\n    constructor(_overlayRef, _containerInstance, id = `mat-dialog-${uniqueId++}`) {\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /**\n         * Whether the user is allowed to close the dialog.\n         */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /**\n         * Subject for notifying the user that the dialog has finished opening.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has finished closing.\n         */\n        this._afterClosed = new Subject();\n        /**\n         * Subject for notifying the user that the dialog has started closing.\n         */\n        this._beforeClosed = new Subject();\n        /**\n         * Current state of the dialog.\n         */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'enter')), take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }));\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'done' && event.toState === 'exit')), take(1)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        }));\n        _overlayRef.detachments().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._afterClosed.next(this._result);\n            this._afterClosed.complete();\n            this.componentInstance = (/** @type {?} */ (null));\n            this._overlayRef.dispose();\n        }));\n        _overlayRef.keydownEvents()\n            .pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n        })))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            event.preventDefault();\n            this.close();\n        }));\n        _overlayRef.backdropClick().subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.disableClose) {\n                this._containerInstance._recaptureFocus();\n            }\n            else {\n                this.close();\n            }\n        }));\n    }\n    /**\n     * Close the dialog.\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\n     * @return {?}\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => event.phaseName === 'start')), take(1))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout((/**\n             * @return {?}\n             */\n            () => this._finishDialogClose()), event.totalTime + 100);\n        }));\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     * @return {?}\n     */\n    afterOpened() {\n        return this._afterOpened.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     * @return {?}\n     */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     * @return {?}\n     */\n    beforeClosed() {\n        return this._beforeClosed.asObservable();\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    backdropClick() {\n        return this._overlayRef.backdropClick();\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    keydownEvents() {\n        return this._overlayRef.keydownEvents();\n    }\n    /**\n     * Updates the dialog's position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} position New dialog position.\n     * @return {THIS}\n     */\n    updatePosition(position) {\n        /** @type {?} */\n        let strategy = (/** @type {?} */ (this))._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} width New width of the dialog.\n     * @param {?=} height New height of the dialog.\n     * @return {THIS}\n     */\n    updateSize(width = '', height = '') {\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    addPanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} classes\n     * @return {THIS}\n     */\n    removePanelClass(classes) {\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Gets the current state of the dialog's lifecycle.\n     * @return {?}\n     */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     * @private\n     * @return {?}\n     */\n    _finishDialogClose() {\n        this._state = 2 /* CLOSED */;\n        this._overlayRef.dispose();\n    }\n    /**\n     * Fetches the position strategy object from the overlay ref.\n     * @private\n     * @return {?}\n     */\n    _getPositionStrategy() {\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\n    }\n}\nif (false) {\n    /**\n     * The instance of component opened into the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.componentInstance;\n    /**\n     * Whether the user is allowed to close the dialog.\n     * @type {?}\n     */\n    MatDialogRef.prototype.disableClose;\n    /**\n     * Subject for notifying the user that the dialog has finished opening.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterOpened;\n    /**\n     * Subject for notifying the user that the dialog has finished closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._afterClosed;\n    /**\n     * Subject for notifying the user that the dialog has started closing.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._beforeClosed;\n    /**\n     * Result to be passed to afterClosed.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._result;\n    /**\n     * Handle to the timeout that's running as a fallback in case the exit animation doesn't fire.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._closeFallbackTimeout;\n    /**\n     * Current state of the dialog.\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._state;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogRef.prototype._overlayRef;\n    /** @type {?} */\n    MatDialogRef.prototype._containerInstance;\n    /** @type {?} */\n    MatDialogRef.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a dialog.\n * @type {?}\n */\nconst MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/**\n * Injection token that can be used to specify default dialog options.\n * @type {?}\n */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.block());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /**\n     * @param {?} _overlay\n     * @param {?} _injector\n     * @param {?} _location\n     * @param {?} _defaultOptions\n     * @param {?} scrollStrategy\n     * @param {?} _parentDialog\n     * @param {?} _overlayContainer\n     */\n    constructor(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\n         * @return {?}\n         */\n        () => this.openDialogs.length ?\n            this._afterAllClosed :\n            this._afterAllClosed.pipe(startWith(undefined))))));\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Keeps track of the currently-open dialogs.\n     * @return {?}\n     */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /**\n     * Stream that emits when a dialog has been opened.\n     * @return {?}\n     */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * @return {?}\n     */\n    get _afterAllClosed() {\n        /** @type {?} */\n        const parent = this._parentDialog;\n        return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Opens a modal dialog containing the given component.\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param {?=} config Extra configuration options.\n     * @return {?} Reference to the newly-opened dialog.\n     */\n    open(componentOrTemplateRef, config) {\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        const dialogContainer = this._attachDialogContainer(overlayRef, config);\n        /** @type {?} */\n        const dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe((/**\n         * @return {?}\n         */\n        () => this._removeOpenDialog(dialogRef)));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     * @return {?}\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param {?} id ID to use when looking up the dialog.\n     * @return {?}\n     */\n    getDialogById(id) {\n        return this.openDialogs.find((/**\n         * @param {?} dialog\n         * @return {?}\n         */\n        dialog => dialog.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @private\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\n     */\n    _createOverlay(config) {\n        /** @type {?} */\n        const overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @private\n     * @param {?} dialogConfig The dialog configuration.\n     * @return {?} The overlay configuration.\n     */\n    _getOverlayConfig(dialogConfig) {\n        /** @type {?} */\n        const state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @private\n     * @param {?} overlay Reference to the dialog's underlying overlay.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachDialogContainer(overlay, config) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        /** @type {?} */\n        const containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        /** @type {?} */\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @private\n     * @template T, R\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n     * @param {?} config The dialog configuration.\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        /** @type {?} */\n        const dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef }))));\n        }\n        else {\n            /** @type {?} */\n            const injector = this._createInjector(config, dialogRef, dialogContainer);\n            /** @type {?} */\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @private\n     * @template T\n     * @param {?} config Config object that is used to construct the dialog.\n     * @param {?} dialogRef Reference to the dialog.\n     * @param {?} dialogContainer\n     * @return {?} The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer) {\n        /** @type {?} */\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        /** @type {?} */\n        const providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @private\n     * @param {?} dialogRef Dialog to be removed.\n     * @return {?}\n     */\n    _removeOpenDialog(dialogRef) {\n        /** @type {?} */\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((/**\n                 * @param {?} previousValue\n                 * @param {?} element\n                 * @return {?}\n                 */\n                (previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                }));\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    }\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     * @private\n     * @return {?}\n     */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        /** @type {?} */\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            /** @type {?} */\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                /** @type {?} */\n                let sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    /**\n     * Closes all of the dialogs in an array.\n     * @private\n     * @param {?} dialogs\n     * @return {?}\n     */\n    _closeDialogs(dialogs) {\n        /** @type {?} */\n        let i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    }\n}\nMatDialog.decorators = [\n    { type: Injectable }\n];\n/** @nocollapse */\nMatDialog.ctorParameters = () => [\n    { type: Overlay },\n    { type: Injector },\n    { type: Location, decorators: [{ type: Optional }] },\n    { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n    { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: OverlayContainer }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._openDialogsAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterAllClosedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._afterOpenedAtThisLevel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._ariaHiddenElements;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._scrollStrategy;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     * @type {?}\n     */\n    MatDialog.prototype.afterAllClosed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._defaultOptions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._parentDialog;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialog.prototype._overlayContainer;\n}\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @param {?=} defaultOptions Default options provided.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return Object.assign(Object.assign({}, defaultOptions), config);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-content-directives.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique IDs for dialog elements.\n * @type {?}\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    /**\n     * @param {?} dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /**\n         * Default to \"button\" to prevents accidental form submits.\n         */\n        this.type = 'button';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n}\nMatDialogClose.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type',\n                }\n            },] }\n];\n/** @nocollapse */\nMatDialogClose.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogClose.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    type: [{ type: Input }],\n    dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n    _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n};\nif (false) {\n    /**\n     * Screenreader label for the button.\n     * @type {?}\n     */\n    MatDialogClose.prototype.ariaLabel;\n    /**\n     * Default to \"button\" to prevents accidental form submits.\n     * @type {?}\n     */\n    MatDialogClose.prototype.type;\n    /**\n     * Dialog close input.\n     * @type {?}\n     */\n    MatDialogClose.prototype.dialogResult;\n    /** @type {?} */\n    MatDialogClose.prototype._matDialogClose;\n    /** @type {?} */\n    MatDialogClose.prototype.dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogClose.prototype._dialog;\n}\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle {\n    /**\n     * @param {?} _dialogRef\n     * @param {?} _elementRef\n     * @param {?} _dialog\n     */\n    constructor(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = `mat-dialog-title-${dialogElementUid++}`;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const container = this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = this.id;\n                }\n            }));\n        }\n    }\n}\nMatDialogTitle.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id',\n                },\n            },] }\n];\n/** @nocollapse */\nMatDialogTitle.ctorParameters = () => [\n    { type: MatDialogRef, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: MatDialog }\n];\nMatDialogTitle.propDecorators = {\n    id: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatDialogTitle.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialogRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDialogTitle.prototype._dialog;\n}\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n}\nMatDialogContent.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                host: { 'class': 'mat-dialog-content' }\n            },] }\n];\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions {\n}\nMatDialogActions.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                host: { 'class': 'mat-dialog-actions' }\n            },] }\n];\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param {?} element Element relative to which to look for a dialog.\n * @param {?} openDialogs References to the currently-open dialogs.\n * @return {?}\n */\nfunction getClosestDialog(element, openDialogs) {\n    /** @type {?} */\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find((/**\n     * @param {?} dialog\n     * @return {?}\n     */\n    dialog => dialog.id === (/** @type {?} */ (parent)).id)) : null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/dialog-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDialogModule {\n}\nMatDialogModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/dialog/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n//# sourceMappingURL=dialog.js.map\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDivider {\n    constructor() {\n        this._vertical = false;\n        this._inset = false;\n    }\n    /**\n     * Whether the divider is vertically aligned.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) { this._vertical = coerceBooleanProperty(value); }\n    /**\n     * Whether the divider is an inset divider.\n     * @return {?}\n     */\n    get inset() { return this._inset; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set inset(value) { this._inset = coerceBooleanProperty(value); }\n}\nMatDivider.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-divider',\n                host: {\n                    'role': 'separator',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-divider-vertical]': 'vertical',\n                    '[class.mat-divider-horizontal]': '!vertical',\n                    '[class.mat-divider-inset]': 'inset',\n                    'class': 'mat-divider'\n                },\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\\n\"]\n            }] }\n];\nMatDivider.propDecorators = {\n    vertical: [{ type: Input }],\n    inset: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatDivider.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatDivider.ngAcceptInputType_inset;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDivider.prototype._vertical;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDivider.prototype._inset;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/divider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatDividerModule {\n}\nMatDividerModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatDivider, MatCommonModule],\n                declarations: [MatDivider],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/divider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatDivider, MatDividerModule };\n//# sourceMappingURL=divider.js.map\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nimport { Directive, Input, InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, NgZone, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MAT_LABEL_GLOBAL_OPTIONS, MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, merge, fromEvent } from 'rxjs';\nimport { startWith, takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/error.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nclass MatError {\n    constructor() {\n        this.id = `mat-error-${nextUniqueId++}`;\n    }\n}\nMatError.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-error',\n                host: {\n                    'class': 'mat-error',\n                    'role': 'alert',\n                    '[attr.id]': 'id',\n                }\n            },] }\n];\nMatError.propDecorators = {\n    id: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatError.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/form-field-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the MatFormField.\n * \\@docs-private\n * @type {?}\n */\nconst matFormFieldAnimations = {\n    /**\n     * Animation that transitions the form field's error and hint messages.\n     */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/form-field-control.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nclass MatFormFieldControl {\n}\nMatFormFieldControl.decorators = [\n    { type: Directive }\n];\nif (false) {\n    /**\n     * The value of the control.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.value;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.stateChanges;\n    /**\n     * The element ID for this control.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.id;\n    /**\n     * The placeholder for this control.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.placeholder;\n    /**\n     * Gets the NgControl for this control.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.ngControl;\n    /**\n     * Whether the control is focused.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.focused;\n    /**\n     * Whether the control is empty.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.empty;\n    /**\n     * Whether the `MatFormField` label should try to float.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.shouldLabelFloat;\n    /**\n     * Whether the control is required.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.required;\n    /**\n     * Whether the control is disabled.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.disabled;\n    /**\n     * Whether the control is in an error state.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.errorState;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.controlType;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     * @type {?}\n     */\n    MatFormFieldControl.prototype.autofilled;\n    /**\n     * Sets the list of element IDs that currently describe this control.\n     * @abstract\n     * @param {?} ids\n     * @return {?}\n     */\n    MatFormFieldControl.prototype.setDescribedByIds = function (ids) { };\n    /**\n     * Handles a click on the control's container.\n     * @abstract\n     * @param {?} event\n     * @return {?}\n     */\n    MatFormFieldControl.prototype.onContainerClick = function (event) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/form-field-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/hint.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$1 = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nclass MatHint {\n    constructor() {\n        /**\n         * Whether to align the hint label at the start or end of the line.\n         */\n        this.align = 'start';\n        /**\n         * Unique ID for the hint. Used for the aria-describedby on the form field control.\n         */\n        this.id = `mat-hint-${nextUniqueId$1++}`;\n    }\n}\nMatHint.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-hint',\n                host: {\n                    'class': 'mat-hint',\n                    '[class.mat-right]': 'align == \"end\"',\n                    '[attr.id]': 'id',\n                    // Remove align attribute to prevent it from interfering with layout.\n                    '[attr.align]': 'null',\n                }\n            },] }\n];\nMatHint.propDecorators = {\n    align: [{ type: Input }],\n    id: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Whether to align the hint label at the start or end of the line.\n     * @type {?}\n     */\n    MatHint.prototype.align;\n    /**\n     * Unique ID for the hint. Used for the aria-describedby on the form field control.\n     * @type {?}\n     */\n    MatHint.prototype.id;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/label.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The floating label for a `mat-form-field`.\n */\nclass MatLabel {\n}\nMatLabel.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-label'\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * \\@breaking-change 8.0.0\n */\nclass MatPlaceholder {\n}\nMatPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-placeholder'\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/prefix.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Prefix to be placed in front of the form field.\n */\nclass MatPrefix {\n}\nMatPrefix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matPrefix]',\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/suffix.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Suffix to be placed at the end of the form field.\n */\nclass MatSuffix {\n}\nMatSuffix.decorators = [\n    { type: Directive, args: [{\n                selector: '[matSuffix]',\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/form-field.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId$2 = 0;\n/** @type {?} */\nconst floatingLabelScale = 0.75;\n/** @type {?} */\nconst outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\nclass MatFormFieldBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatFormFieldBase.prototype._elementRef;\n}\n/**\n * Base class to which we're applying the form field mixins.\n * \\@docs-private\n * @type {?}\n */\nconst _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n * @record\n */\nfunction MatFormFieldDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatFormFieldDefaultOptions.prototype.appearance;\n    /** @type {?|undefined} */\n    MatFormFieldDefaultOptions.prototype.hideRequiredMarker;\n    /**\n     * Whether the label for form-fields should by default float `always`,\n     * `never`, or `auto` (only when necessary).\n     * @type {?|undefined}\n     */\n    MatFormFieldDefaultOptions.prototype.floatLabel;\n}\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n * @type {?}\n */\nconst MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n * @type {?}\n */\nconst MAT_FORM_FIELD = new InjectionToken('MatFormField');\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nclass MatFormField extends _MatFormFieldMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} labelOptions\n     * @param {?} _dir\n     * @param {?} _defaults\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _animationMode\n     */\n    constructor(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaults, _platform, _ngZone, _animationMode) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._defaults = _defaults;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        /**\n         * Whether the outline gap needs to be calculated\n         * immediately on the next change detection run.\n         */\n        this._outlineGapCalculationNeededImmediately = false;\n        /**\n         * Whether the outline gap needs to be calculated next time the zone has stabilized.\n         */\n        this._outlineGapCalculationNeededOnStable = false;\n        this._destroyed = new Subject();\n        /**\n         * Override for the logic that disables the label animation in certain cases.\n         */\n        this._showAlwaysAnimate = false;\n        /**\n         * State of the mat-hint and mat-error animations.\n         */\n        this._subscriptAnimationState = '';\n        this._hintLabel = '';\n        // Unique id for the hint label.\n        this._hintLabelId = `mat-hint-${nextUniqueId$2++}`;\n        // Unique id for the internal form field label.\n        this._labelId = `mat-form-field-label-${nextUniqueId$2++}`;\n        this._labelOptions = labelOptions ? labelOptions : {};\n        this.floatLabel = this._getDefaultFloatLabelState();\n        this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        // Set the default through here so we invoke the setter on the first run.\n        this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n        this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n            _defaults.hideRequiredMarker : false;\n    }\n    /**\n     * The form-field appearance style.\n     * @return {?}\n     */\n    get appearance() { return this._appearance; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set appearance(value) {\n        /** @type {?} */\n        const oldValue = this._appearance;\n        this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n        if (this._appearance === 'outline' && oldValue !== value) {\n            this._outlineGapCalculationNeededOnStable = true;\n        }\n    }\n    /**\n     * Whether the required marker should be hidden.\n     * @return {?}\n     */\n    get hideRequiredMarker() { return this._hideRequiredMarker; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hideRequiredMarker(value) {\n        this._hideRequiredMarker = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the floating label should always float or not.\n     * @return {?}\n     */\n    get _shouldAlwaysFloat() {\n        return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n    }\n    /**\n     * Whether the label can float or not.\n     * @return {?}\n     */\n    get _canLabelFloat() { return this.floatLabel !== 'never'; }\n    /**\n     * Text for the form field hint.\n     * @return {?}\n     */\n    get hintLabel() { return this._hintLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hintLabel(value) {\n        this._hintLabel = value;\n        this._processHints();\n    }\n    /**\n     * Whether the label should always float, never float or float as the user types.\n     *\n     * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n     * way to make the floating label emulate the behavior of a standard input placeholder. However\n     * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n     * appearances the `never` option has been disabled in favor of just using the placeholder.\n     * @return {?}\n     */\n    get floatLabel() {\n        return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set floatLabel(value) {\n        if (value !== this._floatLabel) {\n            this._floatLabel = value || this._getDefaultFloatLabelState();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get _control() {\n        // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n        //  We should clean this up once Ivy is the default renderer.\n        return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set _control(value) {\n        this._explicitFormFieldControl = value;\n    }\n    /**\n     * @return {?}\n     */\n    get _labelChild() {\n        return this._labelChildNonStatic || this._labelChildStatic;\n    }\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    getConnectedOverlayOrigin() {\n        return this._connectionContainerRef || this._elementRef;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._validateControlChild();\n        /** @type {?} */\n        const control = this._control;\n        if (control.controlType) {\n            this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        control.stateChanges.pipe(startWith((/** @type {?} */ (null)))).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._validatePlaceholders();\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Run change detection if the value changes.\n        if (control.ngControl && control.ngControl.valueChanges) {\n            control.ngControl.valueChanges\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._changeDetectorRef.markForCheck()));\n        }\n        // Note that we have to run outside of the `NgZone` explicitly,\n        // in order to avoid throwing users into an infinite loop\n        // if `zone-patch-rxjs` is included.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._outlineGapCalculationNeededOnStable) {\n                    this.updateOutlineGap();\n                }\n            }));\n        }));\n        // Run change detection and update the outline if the suffix or prefix changes.\n        merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._outlineGapCalculationNeededOnStable = true;\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._processHints();\n            this._changeDetectorRef.markForCheck();\n        }));\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncDescribedByIds();\n            this._changeDetectorRef.markForCheck();\n        }));\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (typeof requestAnimationFrame === 'function') {\n                    this._ngZone.runOutsideAngular((/**\n                     * @return {?}\n                     */\n                    () => {\n                        requestAnimationFrame((/**\n                         * @return {?}\n                         */\n                        () => this.updateOutlineGap()));\n                    }));\n                }\n                else {\n                    this.updateOutlineGap();\n                }\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._validateControlChild();\n        if (this._outlineGapCalculationNeededImmediately) {\n            this.updateOutlineGap();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    _shouldForward(prop) {\n        /** @type {?} */\n        const ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    }\n    /**\n     * @return {?}\n     */\n    _hasPlaceholder() {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    }\n    /**\n     * @return {?}\n     */\n    _hasLabel() {\n        return !!this._labelChild;\n    }\n    /**\n     * @return {?}\n     */\n    _shouldLabelFloat() {\n        return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n    }\n    /**\n     * @return {?}\n     */\n    _hideControlPlaceholder() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    }\n    /**\n     * @return {?}\n     */\n    _hasFloatingLabel() {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    }\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    _getDisplayedMessages() {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    }\n    /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    _animateAndLockLabel() {\n        if (this._hasFloatingLabel() && this._canLabelFloat) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled && this._label) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._showAlwaysAnimate = false;\n                }));\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @private\n     * @return {?}\n     */\n    _validatePlaceholders() {\n        if (this._control.placeholder && this._placeholderChild) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    }\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @private\n     * @return {?}\n     */\n    _processHints() {\n        this._validateHints();\n        this._syncDescribedByIds();\n    }\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @private\n     * @return {?}\n     */\n    _validateHints() {\n        if (this._hintChildren) {\n            /** @type {?} */\n            let startHint;\n            /** @type {?} */\n            let endHint;\n            this._hintChildren.forEach((/**\n             * @param {?} hint\n             * @return {?}\n             */\n            (hint) => {\n                if (hint.align === 'start') {\n                    if (startHint || this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint = hint;\n                }\n            }));\n        }\n    }\n    /**\n     * Gets the default float label state.\n     * @private\n     * @return {?}\n     */\n    _getDefaultFloatLabelState() {\n        return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n    }\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @private\n     * @return {?}\n     */\n    _syncDescribedByIds() {\n        if (this._control) {\n            /** @type {?} */\n            let ids = [];\n            if (this._getDisplayedMessages() === 'hint') {\n                /** @type {?} */\n                const startHint = this._hintChildren ?\n                    this._hintChildren.find((/**\n                     * @param {?} hint\n                     * @return {?}\n                     */\n                    hint => hint.align === 'start')) : null;\n                /** @type {?} */\n                const endHint = this._hintChildren ?\n                    this._hintChildren.find((/**\n                     * @param {?} hint\n                     * @return {?}\n                     */\n                    hint => hint.align === 'end')) : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids = this._errorChildren.map((/**\n                 * @param {?} error\n                 * @return {?}\n                 */\n                error => error.id));\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    }\n    /**\n     * Throws an error if the form field's control is missing.\n     * @protected\n     * @return {?}\n     */\n    _validateControlChild() {\n        if (!this._control) {\n            throw getMatFormFieldMissingControlError();\n        }\n    }\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    updateOutlineGap() {\n        /** @type {?} */\n        const labelEl = this._label ? this._label.nativeElement : null;\n        if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n            !labelEl.textContent.trim()) {\n            return;\n        }\n        if (!this._platform.isBrowser) {\n            // getBoundingClientRect isn't available on the server.\n            return;\n        }\n        // If the element is not present in the DOM, the outline gap will need to be calculated\n        // the next time it is checked and in the DOM.\n        if (!this._isAttachedToDOM()) {\n            this._outlineGapCalculationNeededImmediately = true;\n            return;\n        }\n        /** @type {?} */\n        let startWidth = 0;\n        /** @type {?} */\n        let gapWidth = 0;\n        /** @type {?} */\n        const container = this._connectionContainerRef.nativeElement;\n        /** @type {?} */\n        const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n        /** @type {?} */\n        const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n        if (this._label && this._label.nativeElement.children.length) {\n            /** @type {?} */\n            const containerRect = container.getBoundingClientRect();\n            // If the container's width and height are zero, it means that the element is\n            // invisible and we can't calculate the outline gap. Mark the element as needing\n            // to be checked the next time the zone stabilizes. We can't do this immediately\n            // on the next change detection, because even if the element becomes visible,\n            // the `ClientRect` won't be reclaculated immediately. We reset the\n            // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n            if (containerRect.width === 0 && containerRect.height === 0) {\n                this._outlineGapCalculationNeededOnStable = true;\n                this._outlineGapCalculationNeededImmediately = false;\n                return;\n            }\n            /** @type {?} */\n            const containerStart = this._getStartEnd(containerRect);\n            /** @type {?} */\n            const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n            /** @type {?} */\n            let labelWidth = 0;\n            for (const child of labelEl.children) {\n                labelWidth += child.offsetWidth;\n            }\n            startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n            gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n        }\n        for (let i = 0; i < startEls.length; i++) {\n            startEls[i].style.width = `${startWidth}px`;\n        }\n        for (let i = 0; i < gapEls.length; i++) {\n            gapEls[i].style.width = `${gapWidth}px`;\n        }\n        this._outlineGapCalculationNeededOnStable =\n            this._outlineGapCalculationNeededImmediately = false;\n    }\n    /**\n     * Gets the start end of the rect considering the current directionality.\n     * @private\n     * @param {?} rect\n     * @return {?}\n     */\n    _getStartEnd(rect) {\n        return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n    }\n    /**\n     * Checks whether the form field is attached to the DOM.\n     * @private\n     * @return {?}\n     */\n    _isAttachedToDOM() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        if (element.getRootNode) {\n            /** @type {?} */\n            const rootNode = element.getRootNode();\n            // If the element is inside the DOM the root node will be either the document\n            // or the closest shadow root, otherwise it'll be the element itself.\n            return rootNode && rootNode !== element;\n        }\n        // Otherwise fall back to checking if it's in the document. This doesn't account for\n        // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n        return (/** @type {?} */ (document.documentElement)).contains(element);\n    }\n}\nMatFormField.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-form-field',\n                exportAs: 'matFormField',\n                template: \"<div class=\\\"mat-form-field-wrapper\\\">\\n  <div class=\\\"mat-form-field-flex\\\" #connectionContainer\\n       (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\">\\n\\n    <!-- Outline used for outline appearance. -->\\n    <ng-container *ngIf=\\\"appearance == 'outline'\\\">\\n      <div class=\\\"mat-form-field-outline\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n      <div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\">\\n        <div class=\\\"mat-form-field-outline-start\\\"></div>\\n        <div class=\\\"mat-form-field-outline-gap\\\"></div>\\n        <div class=\\\"mat-form-field-outline-end\\\"></div>\\n      </div>\\n    </ng-container>\\n\\n    <div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\">\\n      <ng-content select=\\\"[matPrefix]\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-infix\\\" #inputContainer>\\n      <ng-content></ng-content>\\n\\n      <span class=\\\"mat-form-field-label-wrapper\\\">\\n        <!-- We add aria-owns as a workaround for an issue in JAWS & NVDA where the label isn't\\n             read if it comes before the control in the DOM. -->\\n        <label class=\\\"mat-form-field-label\\\"\\n               (cdkObserveContent)=\\\"updateOutlineGap()\\\"\\n               [cdkObserveContentDisabled]=\\\"appearance != 'outline'\\\"\\n               [id]=\\\"_labelId\\\"\\n               [attr.for]=\\\"_control.id\\\"\\n               [attr.aria-owns]=\\\"_control.id\\\"\\n               [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\"\\n               [class.mat-accent]=\\\"color == 'accent'\\\"\\n               [class.mat-warn]=\\\"color == 'warn'\\\"\\n               #label\\n               *ngIf=\\\"_hasFloatingLabel()\\\"\\n               [ngSwitch]=\\\"_hasLabel()\\\">\\n\\n          <!-- @breaking-change 8.0.0 remove in favor of mat-label element an placeholder attr. -->\\n          <ng-container *ngSwitchCase=\\\"false\\\">\\n            <ng-content select=\\\"mat-placeholder\\\"></ng-content>\\n            <span>{{_control.placeholder}}</span>\\n          </ng-container>\\n\\n          <ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n\\n          <!-- @breaking-change 8.0.0 remove `mat-placeholder-required` class -->\\n          <span\\n            class=\\\"mat-placeholder-required mat-form-field-required-marker\\\"\\n            aria-hidden=\\\"true\\\"\\n            *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&#32;*</span>\\n        </label>\\n      </span>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\">\\n      <ng-content select=\\\"[matSuffix]\\\"></ng-content>\\n    </div>\\n  </div>\\n\\n  <!-- Underline used for legacy, standard, and box appearances. -->\\n  <div class=\\\"mat-form-field-underline\\\" #underline\\n       *ngIf=\\\"appearance != 'outline'\\\">\\n    <span class=\\\"mat-form-field-ripple\\\"\\n          [class.mat-accent]=\\\"color == 'accent'\\\"\\n          [class.mat-warn]=\\\"color == 'warn'\\\"></span>\\n  </div>\\n\\n  <div class=\\\"mat-form-field-subscript-wrapper\\\"\\n       [ngSwitch]=\\\"_getDisplayedMessages()\\\">\\n    <div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <ng-content select=\\\"mat-error\\\"></ng-content>\\n    </div>\\n\\n    <div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\"\\n      [@transitionMessages]=\\\"_subscriptAnimationState\\\">\\n      <!-- TODO(mmalerba): use an actual <mat-hint> once all selectors are switched to mat-* -->\\n      <div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div>\\n      <ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content>\\n      <div class=\\\"mat-form-field-hint-spacer\\\"></div>\\n      <ng-content select=\\\"mat-hint[align='end']\\\"></ng-content>\\n    </div>\\n  </div>\\n</div>\\n\",\n                animations: [matFormFieldAnimations.transitionMessages],\n                host: {\n                    'class': 'mat-form-field',\n                    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                    '[class.mat-form-field-invalid]': '_control.errorState',\n                    '[class.mat-form-field-can-float]': '_canLabelFloat',\n                    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n                    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                    '[class.mat-form-field-disabled]': '_control.disabled',\n                    '[class.mat-form-field-autofilled]': '_control.autofilled',\n                    '[class.mat-focused]': '_control.focused',\n                    '[class.mat-accent]': 'color == \"accent\"',\n                    '[class.mat-warn]': 'color == \"warn\"',\n                    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                    '[class.ng-touched]': '_shouldForward(\"touched\")',\n                    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                    '[class.ng-valid]': '_shouldForward(\"valid\")',\n                    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                    '[class.ng-pending]': '_shouldForward(\"pending\")',\n                    '[class._mat-animation-noopable]': '!_animationsEnabled',\n                },\n                inputs: ['color'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                providers: [\n                    { provide: MAT_FORM_FIELD, useExisting: MatFormField },\n                ],\n                styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}.cdk-high-contrast-active .mat-form-field-infix{border-image:linear-gradient(transparent, transparent)}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}[dir=rtl] .mat-form-field-label-wrapper{left:auto;right:0}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),width 400ms cubic-bezier(0.25, 0.8, 0.25, 1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-empty.mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scale3d(1, 1.0001, 1)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(0.5);opacity:0;transition:background-color 300ms cubic-bezier(0.55, 0, 0.55, 0.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform 300ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 300ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-subscript-wrapper .mat-icon,.mat-form-field-label-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field-control-wrapper{position:relative}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\\n\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:\\\"\\\";display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\\n\", \".mat-input-element{font:inherit;background:transparent;color:currentColor;border:none;outline:none;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date],.mat-input-element[type=datetime],.mat-input-element[type=datetime-local],.mat-input-element[type=month],.mat-input-element[type=week],.mat-input-element[type=time]{line-height:1}.mat-input-element[type=date]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=month]::after,.mat-input-element[type=week]::after,.mat-input-element[type=time]::after{content:\\\" \\\";white-space:pre;width:1px}.mat-input-element::-webkit-inner-spin-button,.mat-input-element::-webkit-calendar-picker-indicator,.mat-input-element::-webkit-clear-button{font-size:.75em}.mat-input-element::placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-moz-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-moz-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element::-webkit-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element::-webkit-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-input-element:-ms-input-placeholder{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-input-element:-ms-input-placeholder:-ms-input-placeholder{-ms-user-select:text}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent !important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}select.mat-input-element{-moz-appearance:none;-webkit-appearance:none;position:relative;background-color:transparent;display:inline-flex;box-sizing:border-box;padding-top:1em;top:-1em;margin-bottom:-1em}select.mat-input-element::-ms-expand{display:none}select.mat-input-element::-moz-focus-inner{border:0}select.mat-input-element:not(:disabled){cursor:pointer}select.mat-input-element::-ms-value{color:inherit;background:none}.mat-focused .cdk-high-contrast-active select.mat-input-element::-ms-value{color:inherit}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{content:\\\"\\\";width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;position:absolute;top:50%;right:0;margin-top:-2.5px;pointer-events:none}[dir=rtl] .mat-form-field-type-mat-native-select .mat-form-field-infix::after{right:auto;left:0}.mat-form-field-type-mat-native-select .mat-input-element{padding-right:15px}[dir=rtl] .mat-form-field-type-mat-native-select .mat-input-element{padding-right:0;padding-left:15px}.mat-form-field-type-mat-native-select .mat-form-field-label-wrapper{max-width:calc(100% - 10px)}.mat-form-field-type-mat-native-select.mat-form-field-appearance-outline .mat-form-field-infix::after{margin-top:-5px}.mat-form-field-type-mat-native-select.mat-form-field-appearance-fill .mat-form-field-infix::after{margin-top:-10px}\\n\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px;overflow:hidden}.cdk-high-contrast-active .mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\\n\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-0.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-end{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap{border-width:2px}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity 100ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap{transition:none}\\n\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}.cdk-high-contrast-active .mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}.cdk-high-contrast-active .mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity 600ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatFormField.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] },\n    { type: Platform },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatFormField.propDecorators = {\n    appearance: [{ type: Input }],\n    hideRequiredMarker: [{ type: Input }],\n    hintLabel: [{ type: Input }],\n    floatLabel: [{ type: Input }],\n    underlineRef: [{ type: ViewChild, args: ['underline',] }],\n    _connectionContainerRef: [{ type: ViewChild, args: ['connectionContainer', { static: true },] }],\n    _inputContainerRef: [{ type: ViewChild, args: ['inputContainer',] }],\n    _label: [{ type: ViewChild, args: ['label',] }],\n    _controlNonStatic: [{ type: ContentChild, args: [MatFormFieldControl,] }],\n    _controlStatic: [{ type: ContentChild, args: [MatFormFieldControl, { static: true },] }],\n    _labelChildNonStatic: [{ type: ContentChild, args: [MatLabel,] }],\n    _labelChildStatic: [{ type: ContentChild, args: [MatLabel, { static: true },] }],\n    _placeholderChild: [{ type: ContentChild, args: [MatPlaceholder,] }],\n    _errorChildren: [{ type: ContentChildren, args: [MatError, { descendants: true },] }],\n    _hintChildren: [{ type: ContentChildren, args: [MatHint, { descendants: true },] }],\n    _prefixChildren: [{ type: ContentChildren, args: [MatPrefix, { descendants: true },] }],\n    _suffixChildren: [{ type: ContentChildren, args: [MatSuffix, { descendants: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatFormField.ngAcceptInputType_hideRequiredMarker;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._labelOptions;\n    /**\n     * Whether the outline gap needs to be calculated\n     * immediately on the next change detection run.\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._outlineGapCalculationNeededImmediately;\n    /**\n     * Whether the outline gap needs to be calculated next time the zone has stabilized.\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._outlineGapCalculationNeededOnStable;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._destroyed;\n    /** @type {?} */\n    MatFormField.prototype._appearance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._hideRequiredMarker;\n    /**\n     * Override for the logic that disables the label animation in certain cases.\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._showAlwaysAnimate;\n    /**\n     * State of the mat-hint and mat-error animations.\n     * @type {?}\n     */\n    MatFormField.prototype._subscriptAnimationState;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._hintLabel;\n    /** @type {?} */\n    MatFormField.prototype._hintLabelId;\n    /** @type {?} */\n    MatFormField.prototype._labelId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._floatLabel;\n    /**\n     * Whether the Angular animations are enabled.\n     * @type {?}\n     */\n    MatFormField.prototype._animationsEnabled;\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    MatFormField.prototype.underlineRef;\n    /** @type {?} */\n    MatFormField.prototype._connectionContainerRef;\n    /** @type {?} */\n    MatFormField.prototype._inputContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._label;\n    /** @type {?} */\n    MatFormField.prototype._controlNonStatic;\n    /** @type {?} */\n    MatFormField.prototype._controlStatic;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._explicitFormFieldControl;\n    /** @type {?} */\n    MatFormField.prototype._labelChildNonStatic;\n    /** @type {?} */\n    MatFormField.prototype._labelChildStatic;\n    /** @type {?} */\n    MatFormField.prototype._placeholderChild;\n    /** @type {?} */\n    MatFormField.prototype._errorChildren;\n    /** @type {?} */\n    MatFormField.prototype._hintChildren;\n    /** @type {?} */\n    MatFormField.prototype._prefixChildren;\n    /** @type {?} */\n    MatFormField.prototype._suffixChildren;\n    /** @type {?} */\n    MatFormField.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._defaults;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatFormField.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/form-field-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatFormFieldModule {\n}\nMatFormFieldModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    MatCommonModule,\n                    MatError,\n                    MatFormField,\n                    MatHint,\n                    MatLabel,\n                    MatPlaceholder,\n                    MatPrefix,\n                    MatSuffix,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/form-field/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_FORM_FIELD, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatError, MatFormField, MatFormFieldControl, MatFormFieldModule, MatHint, MatLabel, MatPlaceholder, MatPrefix, MatSuffix, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, getMatFormFieldPlaceholderConflictError, matFormFieldAnimations };\n//# sourceMappingURL=form-field.js.map\n","import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\nfunction MatGridListBase() { }\nif (false) {\n    /** @type {?} */\n    MatGridListBase.prototype.cols;\n    /** @type {?} */\n    MatGridListBase.prototype.gutterSize;\n    /** @type {?} */\n    MatGridListBase.prototype.rowHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_rowspan;\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_colspan;\n    /** @type {?} */\n    MatGridTile.prototype._rowspan;\n    /** @type {?} */\n    MatGridTile.prototype._colspan;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTile.prototype._element;\n    /** @type {?} */\n    MatGridTile.prototype._gridList;\n}\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridTileText.prototype._lines;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\nfunction Tile() { }\nif (false) {\n    /**\n     * Amount of rows that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.rowspan;\n    /**\n     * Amount of columns that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\nif (false) {\n    /**\n     * Tracking array (see class description).\n     * @type {?}\n     */\n    TileCoordinator.prototype.tracker;\n    /**\n     * Index at which the search for the next gap will start.\n     * @type {?}\n     */\n    TileCoordinator.prototype.columnIndex;\n    /**\n     * The current row index.\n     * @type {?}\n     */\n    TileCoordinator.prototype.rowIndex;\n    /**\n     * The computed (row, col) position of each tile (the output).\n     * @type {?}\n     */\n    TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TilePosition.prototype.row;\n    /** @type {?} */\n    TilePosition.prototype.col;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\nif (false) {\n    /** @type {?} */\n    TileStyler.prototype._gutterSize;\n    /** @type {?} */\n    TileStyler.prototype._rows;\n    /** @type {?} */\n    TileStyler.prototype._rowspan;\n    /** @type {?} */\n    TileStyler.prototype._cols;\n    /** @type {?} */\n    TileStyler.prototype._direction;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * \\@docs-private\n     * @abstract\n     * @param {?} list Grid list that the styler was attached to.\n     * @return {?}\n     */\n    TileStyler.prototype.reset = function (list) { };\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\nif (false) {\n    /**\n     * Ratio width:height given by user to determine row height.\n     * @type {?}\n     */\n    RatioTileStyler.prototype.rowHeightRatio;\n    /** @type {?} */\n    RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols',\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatGridList.ngAcceptInputType_cols;\n    /**\n     * Number of columns being rendered.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._cols;\n    /**\n     * Used for determiningthe position of each tile in the grid.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._rowHeight;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._gutter;\n    /**\n     * Sets position and size styles for a tile\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileStyler;\n    /**\n     * Query list of tiles that are being rendered.\n     * @type {?}\n     */\n    MatGridList.prototype._tiles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n//# sourceMappingURL=grid-list.js.map\n","import { SecurityContext, Injectable, Optional, Inject, ErrorHandler, ɵɵdefineInjectable, ɵɵinject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Options that can be used to configure how an icon or the icons in an icon set are presented.\n * @record\n */\nfunction IconOptions() { }\nif (false) {\n    /**\n     * View box to set on the icon.\n     * @type {?|undefined}\n     */\n    IconOptions.prototype.viewBox;\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    SvgIconConfig.prototype.url;\n    /** @type {?} */\n    SvgIconConfig.prototype.svgElement;\n    /** @type {?} */\n    SvgIconConfig.prototype.options;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] }\n];\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ MatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._iconSetConfigs;\n    /**\n     * Cache for icons loaded by direct URLs.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._cachedIconsByUrl;\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._inProgressUrlFetches;\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._defaultFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._httpClient;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._sanitizer;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._errorHandler;\n}\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), ErrorHandler],\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatIconBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatIcon`.\n * \\@docs-private\n * @record\n */\nfunction MatIconLocation() { }\nif (false) {\n    /** @type {?} */\n    MatIconLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /**\n         * Subscription to the current in-progress SVG icon request.\n         */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.decorators = [\n    { type: Component, args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatIcon.ngAcceptInputType_inline;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._inline;\n    /**\n     * Name of the icon in the SVG icon set.\n     * @type {?}\n     */\n    MatIcon.prototype.svgIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontSet;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontIconClass;\n    /**\n     * Keeps track of the current page path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousPath;\n    /**\n     * Keeps track of the elements and attributes that we've prefixed with the current path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._elementsWithExternalReferences;\n    /**\n     * Subscription to the current in-progress SVG icon request.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._currentIconFetch;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._location;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._errorHandler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n//# sourceMappingURL=icon.js.map\n","import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/autosize.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 8.0.0\n */\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    /**\n     * @return {?}\n     */\n    get matAutosizeMinRows() { return this.minRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosizeMaxRows() { return this.maxRows; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    /**\n     * @return {?}\n     */\n    get matAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matAutosize(value) { this.enabled = value; }\n    /**\n     * @return {?}\n     */\n    get matTextareaAutosize() { return this.enabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.decorators = [\n    { type: Directive, args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1',\n                },\n            },] }\n];\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-value-accessor.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n * @type {?}\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n/** @type {?} */\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n/** @type {?} */\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/**\n * \\@docs-private\n */\nclass MatInputBase {\n    /**\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatInputBase.prototype._defaultErrorStateMatcher;\n    /** @type {?} */\n    MatInputBase.prototype._parentForm;\n    /** @type {?} */\n    MatInputBase.prototype._parentFormGroup;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInputBase.prototype.ngControl;\n}\n/** @type {?} */\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nclass MatInput extends _MatInputMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _platform\n     * @param {?} ngControl\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} inputValueAccessor\n     * @param {?} _autofillMonitor\n     * @param {?} ngZone\n     */\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter((/**\n         * @param {?} t\n         * @return {?}\n         */\n        t => getSupportedInputTypes().has(t)));\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                _elementRef.nativeElement.addEventListener('keyup', (/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    /** @type {?} */\n                    let el = (/** @type {?} */ (event.target));\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                }));\n            }));\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = ((/** @type {?} */ (element))).multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Input type of the element.\n     * @return {?}\n     */\n    get type() { return this._type; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            ((/** @type {?} */ (this._elementRef.nativeElement))).type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get value() { return this._inputValueAccessor.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Whether the element is readonly.\n     * @return {?}\n     */\n    get readonly() { return this._readonly; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n    /**\n     * Focuses the input.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @return {?}\n     */\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @protected\n     * @return {?}\n     */\n    _dirtyCheckNativeValue() {\n        /** @type {?} */\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Make sure the input is a supported type.\n     * @protected\n     * @return {?}\n     */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @protected\n     * @return {?}\n     */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @protected\n     * @return {?}\n     */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        /** @type {?} */\n        let validity = ((/** @type {?} */ (this._elementRef.nativeElement))).validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            /** @type {?} */\n            const selectElement = (/** @type {?} */ (this._elementRef.nativeElement));\n            /** @type {?} */\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.decorators = [\n    { type: Directive, args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * \\@breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n            },] }\n];\n/** @nocollapse */\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatInput.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_readonly;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_required;\n    /** @type {?} */\n    MatInput.ngAcceptInputType_value;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._uid;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._previousNativeValue;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._inputValueAccessor;\n    /**\n     * The aria-describedby attribute on the input for improved a11y.\n     * @type {?}\n     */\n    MatInput.prototype._ariaDescribedby;\n    /**\n     * Whether the component is being rendered on the server.\n     * @type {?}\n     */\n    MatInput.prototype._isServer;\n    /**\n     * Whether the component is a native html select.\n     * @type {?}\n     */\n    MatInput.prototype._isNativeSelect;\n    /**\n     * Whether the component is a textarea.\n     * @type {?}\n     */\n    MatInput.prototype._isTextarea;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.focused;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.stateChanges;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.controlType;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.autofilled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._disabled;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.placeholder;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._required;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._type;\n    /**\n     * An object used to control when error messages are shown.\n     * @type {?}\n     */\n    MatInput.prototype.errorStateMatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._readonly;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._neverEmptyInputTypes;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatInput.prototype._platform;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatInput.prototype.ngControl;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInput.prototype._autofillMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/input-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatInputModule {\n}\nMatInputModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/input/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n//# sourceMappingURL=input.js.map\n","import { CommonModule } from '@angular/common';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Directive, ChangeDetectorRef, Optional, ContentChildren, ContentChild, Input, forwardRef, Inject, ViewChild, EventEmitter, isDevMode, Attribute, Output, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, END, HOME, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatList.\n/**\n * \\@docs-private\n */\nclass MatListBase {\n}\n/** @type {?} */\nconst _MatListMixinBase = mixinDisabled(mixinDisableRipple(MatListBase));\n// Boilerplate for applying mixins to MatListItem.\n/**\n * \\@docs-private\n */\nclass MatListItemBase {\n}\n/** @type {?} */\nconst _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\nclass MatNavList extends _MatListMixinBase {\n    constructor() {\n        super(...arguments);\n        /**\n         * Emits when the state of the list changes.\n         */\n        this._stateChanges = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatNavList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-nav-list',\n                exportAs: 'matNavList',\n                host: {\n                    'role': 'navigation',\n                    'class': 'mat-nav-list mat-list-base'\n                },\n                template: \"<ng-content></ng-content>\\n\\n\",\n                inputs: ['disableRipple', 'disabled'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }] }\n];\nif (false) {\n    /** @type {?} */\n    MatNavList.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatNavList.ngAcceptInputType_disabled;\n    /**\n     * Emits when the state of the list changes.\n     * @type {?}\n     */\n    MatNavList.prototype._stateChanges;\n}\nclass MatList extends _MatListMixinBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        super();\n        this._elementRef = _elementRef;\n        /**\n         * Emits when the state of the list changes.\n         */\n        this._stateChanges = new Subject();\n        if (this._getListType() === 'action-list') {\n            _elementRef.nativeElement.classList.add('mat-action-list');\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _getListType() {\n        /** @type {?} */\n        const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n        if (nodeName === 'mat-list') {\n            return 'list';\n        }\n        if (nodeName === 'mat-action-list') {\n            return 'action-list';\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-list, mat-action-list',\n                exportAs: 'matList',\n                template: \"<ng-content></ng-content>\\n\\n\",\n                host: {\n                    'class': 'mat-list mat-list-base'\n                },\n                inputs: ['disableRipple', 'disabled'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatList.ctorParameters = () => [\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    MatList.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatList.ngAcceptInputType_disabled;\n    /**\n     * Emits when the state of the list changes.\n     * @type {?}\n     */\n    MatList.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatList.prototype._elementRef;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatListAvatarCssMatStyler {\n}\nMatListAvatarCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-list-avatar], [matListAvatar]',\n                host: { 'class': 'mat-list-avatar' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatListIconCssMatStyler {\n}\nMatListIconCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-list-icon], [matListIcon]',\n                host: { 'class': 'mat-list-icon' }\n            },] }\n];\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatListSubheaderCssMatStyler {\n}\nMatListSubheaderCssMatStyler.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-subheader], [matSubheader]',\n                host: { 'class': 'mat-subheader' }\n            },] }\n];\n/**\n * An item within a Material Design list.\n */\nclass MatListItem extends _MatListItemMixinBase {\n    /**\n     * @param {?} _element\n     * @param {?} _changeDetectorRef\n     * @param {?=} navList\n     * @param {?=} list\n     */\n    constructor(_element, _changeDetectorRef, navList, list) {\n        super();\n        this._element = _element;\n        this._isInteractiveList = false;\n        this._destroyed = new Subject();\n        this._disabled = false;\n        this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n        this._list = navList || list;\n        // If no type attributed is specified for <button>, set it to \"button\".\n        // If a type attribute is already specified, do nothing.\n        /** @type {?} */\n        const element = this._getHostElement();\n        if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n            element.setAttribute('type', 'button');\n        }\n        if (this._list) {\n            // React to changes in the state of the parent list since\n            // some of the item's properties depend on it (e.g. `disableRipple`).\n            this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                _changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return !this._isInteractiveList || this.disableRipple ||\n            !!(this._list && this._list.disableRipple);\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n}\nMatListItem.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n                exportAs: 'matListItem',\n                host: {\n                    'class': 'mat-list-item mat-focus-indicator',\n                    '[class.mat-list-item-disabled]': 'disabled',\n                    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n                    '[class.mat-list-item-avatar]': '_avatar || _icon',\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n                },\n                inputs: ['disableRipple'],\n                template: \"<div class=\\\"mat-list-item-content\\\">\\n  <div class=\\\"mat-list-item-ripple\\\" mat-ripple\\n       [matRippleTrigger]=\\\"_getHostElement()\\\"\\n       [matRippleDisabled]=\\\"_isRippleDisabled()\\\">\\n  </div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n  <div class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n\\n  <ng-content></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nMatListItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatNavList, decorators: [{ type: Optional }] },\n    { type: MatList, decorators: [{ type: Optional }] }\n];\nMatListItem.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],\n    _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],\n    _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],\n    disabled: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatListItem.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatListItem.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListItem.prototype._isInteractiveList;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListItem.prototype._list;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListItem.prototype._destroyed;\n    /** @type {?} */\n    MatListItem.prototype._lines;\n    /** @type {?} */\n    MatListItem.prototype._avatar;\n    /** @type {?} */\n    MatListItem.prototype._icon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListItem.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListItem.prototype._element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/selection-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@docs-private\n */\nclass MatSelectionListBase {\n}\n/** @type {?} */\nconst _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\n/**\n * \\@docs-private\n */\nclass MatListOptionBase {\n}\n/** @type {?} */\nconst _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSelectionList)),\n    multi: true\n};\n/**\n * Change event that is being fired whenever the selected state of an option changes.\n */\nclass MatSelectionListChange {\n    /**\n     * @param {?} source\n     * @param {?} option\n     */\n    constructor(source, option) {\n        this.source = source;\n        this.option = option;\n    }\n}\nif (false) {\n    /**\n     * Reference to the selection list that emitted the event.\n     * @type {?}\n     */\n    MatSelectionListChange.prototype.source;\n    /**\n     * Reference to the option that has been changed.\n     * @type {?}\n     */\n    MatSelectionListChange.prototype.option;\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nclass MatListOption extends _MatListOptionMixinBase {\n    /**\n     * @param {?} _element\n     * @param {?} _changeDetector\n     * @param {?} selectionList\n     */\n    constructor(_element, _changeDetector, selectionList) {\n        super();\n        this._element = _element;\n        this._changeDetector = _changeDetector;\n        this.selectionList = selectionList;\n        this._selected = false;\n        this._disabled = false;\n        this._hasFocus = false;\n        /**\n         * Whether the label should appear before or after the checkbox. Defaults to 'after'\n         */\n        this.checkboxPosition = 'after';\n        /**\n         * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n         * in the first cycle.\n         */\n        this._inputsInitialized = false;\n    }\n    /**\n     * Theme color of the list option. This sets the color of the checkbox.\n     * @return {?}\n     */\n    get color() { return this._color || this.selectionList.color; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * Value of the option\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this.selected && newValue !== this.value && this._inputsInitialized) {\n            this.selected = false;\n        }\n        this._value = newValue;\n    }\n    /**\n     * Whether the option is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * Whether the option is selected.\n     * @return {?}\n     */\n    get selected() { return this.selectionList.selectedOptions.isSelected(this); }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selected(value) {\n        /** @type {?} */\n        const isSelected = coerceBooleanProperty(value);\n        if (isSelected !== this._selected) {\n            this._setSelected(isSelected);\n            this.selectionList._reportValueChange();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        /** @type {?} */\n        const list = this.selectionList;\n        if (list._value && list._value.some((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => list.compareWith(value, this._value)))) {\n            this._setSelected(true);\n        }\n        /** @type {?} */\n        const wasSelected = this._selected;\n        // List options that are selected at initialization can't be reported properly to the form\n        // control. This is because it takes some time until the selection-list knows about all\n        // available options. Also it can happen that the ControlValueAccessor has an initial value\n        // that should be used instead. Deferring the value change report to the next tick ensures\n        // that the form control value is not being overwritten.\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        () => {\n            if (this._selected || wasSelected) {\n                this.selected = true;\n                this._changeDetector.markForCheck();\n            }\n        }));\n        this._inputsInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this.selected = false;\n            }));\n        }\n        /** @type {?} */\n        const hadFocus = this._hasFocus;\n        /** @type {?} */\n        const newActiveItem = this.selectionList._removeOptionFromList(this);\n        // Only move focus if this option was focused at the time it was destroyed.\n        if (hadFocus && newActiveItem) {\n            newActiveItem.focus();\n        }\n    }\n    /**\n     * Toggles the selection state of the option.\n     * @return {?}\n     */\n    toggle() {\n        this.selected = !this.selected;\n    }\n    /**\n     * Allows for programmatic focusing of the option.\n     * @return {?}\n     */\n    focus() {\n        this._element.nativeElement.focus();\n    }\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * \\@docs-private\n     * @return {?}\n     */\n    getLabel() {\n        return this._text ? (this._text.nativeElement.textContent || '') : '';\n    }\n    /**\n     * Whether this list item should show a ripple effect when clicked.\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n    }\n    /**\n     * @return {?}\n     */\n    _handleClick() {\n        if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n            this.toggle();\n            // Emit a change event if the selected state of the option changed through user interaction.\n            this.selectionList._emitChangeEvent(this);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _handleFocus() {\n        this.selectionList._setFocusedOption(this);\n        this._hasFocus = true;\n    }\n    /**\n     * @return {?}\n     */\n    _handleBlur() {\n        this.selectionList._onTouched();\n        this._hasFocus = false;\n    }\n    /**\n     * Retrieves the DOM element of the component host.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._element.nativeElement;\n    }\n    /**\n     * Sets the selected state of the option. Returns whether the value has changed.\n     * @param {?} selected\n     * @return {?}\n     */\n    _setSelected(selected) {\n        if (selected === this._selected) {\n            return false;\n        }\n        this._selected = selected;\n        if (selected) {\n            this.selectionList.selectedOptions.select(this);\n        }\n        else {\n            this.selectionList.selectedOptions.deselect(this);\n        }\n        this._changeDetector.markForCheck();\n        return true;\n    }\n    /**\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n     * used to trigger an update of the list option if the disabled state of the selection list\n     * changed.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetector.markForCheck();\n    }\n}\nMatListOption.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-list-option',\n                exportAs: 'matListOption',\n                inputs: ['disableRipple'],\n                host: {\n                    'role': 'option',\n                    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n                    '(focus)': '_handleFocus()',\n                    '(blur)': '_handleBlur()',\n                    '(click)': '_handleClick()',\n                    '[class.mat-list-item-disabled]': 'disabled',\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n                    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n                    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n                    // its theme.\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    // Even though accent is the default, we need to set this class anyway, because the  list might\n                    // be placed inside a parent that has one of the other colors with a higher specificity.\n                    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n                    '[attr.aria-selected]': 'selected',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabindex]': '-1',\n                },\n                template: \"<div class=\\\"mat-list-item-content\\\"\\n  [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\">\\n\\n  <div mat-ripple\\n    class=\\\"mat-list-item-ripple\\\"\\n    [matRippleTrigger]=\\\"_getHostElement()\\\"\\n    [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div>\\n\\n  <mat-pseudo-checkbox\\n    *ngIf=\\\"selectionList.multiple\\\"\\n    [state]=\\\"selected ? 'checked' : 'unchecked'\\\"\\n    [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox>\\n\\n  <div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div>\\n\\n  <ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\">\\n  </ng-content>\\n\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }] }\n];\n/** @nocollapse */\nMatListOption.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSelectionList, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatSelectionList)),] }] }\n];\nMatListOption.propDecorators = {\n    _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler,] }],\n    _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler,] }],\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],\n    _text: [{ type: ViewChild, args: ['text',] }],\n    checkboxPosition: [{ type: Input }],\n    color: [{ type: Input }],\n    value: [{ type: Input }],\n    disabled: [{ type: Input }],\n    selected: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatListOption.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatListOption.ngAcceptInputType_selected;\n    /** @type {?} */\n    MatListOption.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._selected;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._hasFocus;\n    /** @type {?} */\n    MatListOption.prototype._avatar;\n    /** @type {?} */\n    MatListOption.prototype._icon;\n    /** @type {?} */\n    MatListOption.prototype._lines;\n    /**\n     * DOM element containing the item's text.\n     * @type {?}\n     */\n    MatListOption.prototype._text;\n    /**\n     * Whether the label should appear before or after the checkbox. Defaults to 'after'\n     * @type {?}\n     */\n    MatListOption.prototype.checkboxPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._color;\n    /**\n     * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n     * in the first cycle.\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._inputsInitialized;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatListOption.prototype._changeDetector;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    MatListOption.prototype.selectionList;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nclass MatSelectionList extends _MatSelectionListMixinBase {\n    /**\n     * @param {?} _element\n     * @param {?} tabIndex\n     * @param {?} _changeDetector\n     */\n    constructor(_element, \n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    tabIndex, _changeDetector) {\n        super();\n        this._element = _element;\n        this._changeDetector = _changeDetector;\n        this._multiple = true;\n        this._contentInitialized = false;\n        /**\n         * Emits a change event whenever the selected state of an option changes.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Tabindex of the selection list.\n         * \\@breaking-change 11.0.0 Remove `tabIndex` input.\n         */\n        this.tabIndex = 0;\n        /**\n         * Theme color of the selection list. This sets the checkbox color for all list options.\n         */\n        this.color = 'accent';\n        /**\n         * Function used for comparing an option against the selected value when determining which\n         * options should appear as selected. The first argument is the value of an options. The second\n         * one is a value from the selected value. A boolean must be returned.\n         */\n        this.compareWith = (/**\n         * @param {?} a1\n         * @param {?} a2\n         * @return {?}\n         */\n        (a1, a2) => a1 === a2);\n        this._disabled = false;\n        /**\n         * The currently selected options.\n         */\n        this.selectedOptions = new SelectionModel(this._multiple);\n        /**\n         * The tabindex of the selection list.\n         */\n        this._tabIndex = -1;\n        /**\n         * View to model callback that should be called whenever the selected options change.\n         */\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * View to model callback that should be called if the list or its options lost focus.\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n    }\n    /**\n     * Whether the selection list is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n        // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n        // changed its state. Since we know that a change to `disabled` property of the list affects\n        // the state of the options, we manually mark each option for check.\n        this._markOptionsForCheck();\n    }\n    /**\n     * Whether selection is limited to one or multiple items (default multiple).\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._multiple) {\n            if (isDevMode() && this._contentInitialized) {\n                throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n            }\n            this._multiple = newValue;\n            this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._contentInitialized = true;\n        this._keyManager = new FocusKeyManager(this.options)\n            .withWrap()\n            .withTypeAhead()\n            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n            // screenreader users, that allows reading the different options of the list.\n            .skipPredicate((/**\n         * @return {?}\n         */\n        () => false))\n            .withAllowedModifierKeys(['shiftKey']);\n        if (this._value) {\n            this._setOptionsFromValues(this._value);\n        }\n        // If the user attempts to tab out of the selection list, allow focus to escape.\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._allowFocusEscape();\n        }));\n        // When the number of options change, update the tabindex of the selection list.\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateTabIndex();\n        }));\n        // Sync external changes to the model back to the options.\n        this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (event.added) {\n                for (let item of event.added) {\n                    item.selected = true;\n                }\n            }\n            if (event.removed) {\n                for (let item of event.removed) {\n                    item.selected = false;\n                }\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const disableRippleChanges = changes['disableRipple'];\n        /** @type {?} */\n        const colorChanges = changes['color'];\n        if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n            (colorChanges && !colorChanges.firstChange)) {\n            this._markOptionsForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._isDestroyed = true;\n    }\n    /**\n     * Focuses the selection list.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._element.nativeElement.focus(options);\n    }\n    /**\n     * Selects all of the options.\n     * @return {?}\n     */\n    selectAll() {\n        this._setAllOptionsSelected(true);\n    }\n    /**\n     * Deselects all of the options.\n     * @return {?}\n     */\n    deselectAll() {\n        this._setAllOptionsSelected(false);\n    }\n    /**\n     * Sets the focused option of the selection-list.\n     * @param {?} option\n     * @return {?}\n     */\n    _setFocusedOption(option) {\n        this._keyManager.updateActiveItem(option);\n    }\n    /**\n     * Removes an option from the selection list and updates the active item.\n     * @param {?} option\n     * @return {?} Currently-active item.\n     */\n    _removeOptionFromList(option) {\n        /** @type {?} */\n        const optionIndex = this._getOptionIndex(option);\n        if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.updateActiveItem(optionIndex - 1);\n            }\n            else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n            }\n        }\n        return this._keyManager.activeItem;\n    }\n    /**\n     * Passes relevant key presses to our key manager.\n     * @param {?} event\n     * @return {?}\n     */\n    _keydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        /** @type {?} */\n        const previousFocusIndex = manager.activeItemIndex;\n        /** @type {?} */\n        const hasModifier = hasModifierKey(event);\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                if (!hasModifier && !manager.isTyping()) {\n                    this._toggleFocusedOption();\n                    // Always prevent space from scrolling the page since the list has focus\n                    event.preventDefault();\n                }\n                break;\n            case HOME:\n            case END:\n                if (!hasModifier) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                break;\n            default:\n                // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n                if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n                    !manager.isTyping()) {\n                    /** @type {?} */\n                    const shouldSelect = this.options.some((/**\n                     * @param {?} option\n                     * @return {?}\n                     */\n                    option => !option.disabled && !option.selected));\n                    this._setAllOptionsSelected(shouldSelect, true);\n                    event.preventDefault();\n                }\n                else {\n                    manager.onKeydown(event);\n                }\n        }\n        if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n            manager.activeItemIndex !== previousFocusIndex) {\n            this._toggleFocusedOption();\n        }\n    }\n    /**\n     * Reports a value change to the ControlValueAccessor\n     * @return {?}\n     */\n    _reportValueChange() {\n        // Stop reporting value changes after the list has been destroyed. This avoids\n        // cases where the list might wrongly reset its value once it is removed, but\n        // the form control is still live.\n        if (this.options && !this._isDestroyed) {\n            /** @type {?} */\n            const value = this._getSelectedOptionValues();\n            this._onChange(value);\n            this._value = value;\n        }\n    }\n    /**\n     * Emits a change event if the selected state of an option changed.\n     * @param {?} option\n     * @return {?}\n     */\n    _emitChangeEvent(option) {\n        this.selectionChange.emit(new MatSelectionListChange(this, option));\n    }\n    /**\n     * When the selection list is focused, we want to move focus to an option within the list. Do this\n     * by setting the appropriate option to be active.\n     * @return {?}\n     */\n    _onFocus() {\n        /** @type {?} */\n        const activeIndex = this._keyManager.activeItemIndex;\n        if (!activeIndex || (activeIndex === -1)) {\n            // If there is no active index, set focus to the first option.\n            this._keyManager.setFirstItemActive();\n        }\n        else {\n            // Otherwise, set focus to the active option.\n            this._keyManager.setActiveItem(activeIndex);\n        }\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} values\n     * @return {?}\n     */\n    writeValue(values) {\n        this._value = values;\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        }\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Sets the selected options based on the specified values.\n     * @private\n     * @param {?} values\n     * @return {?}\n     */\n    _setOptionsFromValues(values) {\n        this.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option._setSelected(false)));\n        values.forEach((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => {\n            /** @type {?} */\n            const correspondingOption = this.options.find((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => {\n                // Skip options that are already in the model. This allows us to handle cases\n                // where the same primitive value is selected multiple times.\n                return option.selected ? false : this.compareWith(option.value, value);\n            }));\n            if (correspondingOption) {\n                correspondingOption._setSelected(true);\n            }\n        }));\n    }\n    /**\n     * Returns the values of the selected options.\n     * @private\n     * @return {?}\n     */\n    _getSelectedOptionValues() {\n        return this.options.filter((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.selected)).map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => option.value));\n    }\n    /**\n     * Toggles the state of the currently focused option if enabled.\n     * @private\n     * @return {?}\n     */\n    _toggleFocusedOption() {\n        /** @type {?} */\n        let focusedIndex = this._keyManager.activeItemIndex;\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            /** @type {?} */\n            let focusedOption = this.options.toArray()[focusedIndex];\n            if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n                focusedOption.toggle();\n                // Emit a change event because the focused option changed its state through user\n                // interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n    /**\n     * Sets the selected state on all of the options\n     * and emits an event if anything changed.\n     * @private\n     * @param {?} isSelected\n     * @param {?=} skipDisabled\n     * @return {?}\n     */\n    _setAllOptionsSelected(isSelected, skipDisabled) {\n        // Keep track of whether anything changed, because we only want to\n        // emit the changed event when something actually changed.\n        /** @type {?} */\n        let hasChanged = false;\n        this.options.forEach((/**\n         * @param {?} option\n         * @return {?}\n         */\n        option => {\n            if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n                hasChanged = true;\n            }\n        }));\n        if (hasChanged) {\n            this._reportValueChange();\n        }\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     * @private\n     * @param {?} index The index to be checked.\n     * @return {?} True if the index is valid for our list of options.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.options.length;\n    }\n    /**\n     * Returns the index of the specified list option.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.toArray().indexOf(option);\n    }\n    /**\n     * Marks all the options to be checked in the next change detection run.\n     * @private\n     * @return {?}\n     */\n    _markOptionsForCheck() {\n        if (this.options) {\n            this.options.forEach((/**\n             * @param {?} option\n             * @return {?}\n             */\n            option => option._markForCheck()));\n        }\n    }\n    /**\n     * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n     * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n     * the list, creating a focus trap if it user tries to tab away.\n     * @private\n     * @return {?}\n     */\n    _allowFocusEscape() {\n        this._tabIndex = -1;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._tabIndex = 0;\n            this._changeDetector.markForCheck();\n        }));\n    }\n    /**\n     * Updates the tabindex based upon if the selection list is empty.\n     * @private\n     * @return {?}\n     */\n    _updateTabIndex() {\n        this._tabIndex = (this.options.length === 0) ? -1 : 0;\n    }\n}\nMatSelectionList.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-selection-list',\n                exportAs: 'matSelectionList',\n                inputs: ['disableRipple'],\n                host: {\n                    'role': 'listbox',\n                    'class': 'mat-selection-list mat-list-base',\n                    '(focus)': '_onFocus()',\n                    '(keydown)': '_keydown($event)',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.tabindex]': '_tabIndex',\n                },\n                template: '<ng-content></ng-content>',\n                encapsulation: ViewEncapsulation.None,\n                providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0;position:relative}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:none}mat-action-list button{background:none;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:none}.mat-list-item-disabled{pointer-events:none}.cdk-high-contrast-active .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active :host .mat-list-item-disabled{opacity:.5}.cdk-high-contrast-active .mat-selection-list:focus{outline-style:dotted}.cdk-high-contrast-active .mat-list-option:hover,.cdk-high-contrast-active .mat-list-option:focus,.cdk-high-contrast-active .mat-nav-list .mat-list-item:hover,.cdk-high-contrast-active .mat-nav-list .mat-list-item:focus,.cdk-high-contrast-active mat-action-list .mat-list-item:hover,.cdk-high-contrast-active mat-action-list .mat-list-item:focus{outline:dotted 1px}.cdk-high-contrast-active .mat-list-single-selected-option::after{content:\\\"\\\";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}.cdk-high-contrast-active [dir=rtl] .mat-list-single-selected-option::after{right:auto;left:16px}@media(hover: none){.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover{background:none}}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatSelectionList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: ChangeDetectorRef }\n];\nMatSelectionList.propDecorators = {\n    options: [{ type: ContentChildren, args: [MatListOption, { descendants: true },] }],\n    selectionChange: [{ type: Output }],\n    tabIndex: [{ type: Input }],\n    color: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    disabled: [{ type: Input }],\n    multiple: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatSelectionList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSelectionList.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatSelectionList.ngAcceptInputType_multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._multiple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._contentInitialized;\n    /**\n     * The FocusKeyManager which handles focus.\n     * @type {?}\n     */\n    MatSelectionList.prototype._keyManager;\n    /**\n     * The option components contained within this selection-list.\n     * @type {?}\n     */\n    MatSelectionList.prototype.options;\n    /**\n     * Emits a change event whenever the selected state of an option changes.\n     * @type {?}\n     */\n    MatSelectionList.prototype.selectionChange;\n    /**\n     * Tabindex of the selection list.\n     * \\@breaking-change 11.0.0 Remove `tabIndex` input.\n     * @type {?}\n     */\n    MatSelectionList.prototype.tabIndex;\n    /**\n     * Theme color of the selection list. This sets the checkbox color for all list options.\n     * @type {?}\n     */\n    MatSelectionList.prototype.color;\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     * @type {?}\n     */\n    MatSelectionList.prototype.compareWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._disabled;\n    /**\n     * The currently selected options.\n     * @type {?}\n     */\n    MatSelectionList.prototype.selectedOptions;\n    /**\n     * The tabindex of the selection list.\n     * @type {?}\n     */\n    MatSelectionList.prototype._tabIndex;\n    /**\n     * View to model callback that should be called whenever the selected options change.\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._onChange;\n    /**\n     * Keeps track of the currently-selected value.\n     * @type {?}\n     */\n    MatSelectionList.prototype._value;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._destroyed;\n    /**\n     * View to model callback that should be called if the list or its options lost focus.\n     * @type {?}\n     */\n    MatSelectionList.prototype._onTouched;\n    /**\n     * Whether the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._isDestroyed;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSelectionList.prototype._changeDetector;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatListModule {\n}\nMatListModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n                exports: [\n                    MatList,\n                    MatNavList,\n                    MatListItem,\n                    MatListAvatarCssMatStyler,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatListIconCssMatStyler,\n                    MatListSubheaderCssMatStyler,\n                    MatPseudoCheckboxModule,\n                    MatSelectionList,\n                    MatListOption,\n                    MatDividerModule\n                ],\n                declarations: [\n                    MatList,\n                    MatNavList,\n                    MatListItem,\n                    MatListAvatarCssMatStyler,\n                    MatListIconCssMatStyler,\n                    MatListSubheaderCssMatStyler,\n                    MatSelectionList,\n                    MatListOption\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange };\n//# sourceMappingURL=list.js.map\n","import { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, END, hasModifierKey, HOME, RIGHT_ARROW, LEFT_ARROW, ESCAPE } from '@angular/cdk/keycodes';\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, ChangeDetectorRef, InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Input, HostListener, QueryList, EventEmitter, NgZone, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, query, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n                opacity: 1\n            }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent {\n    /**\n     * @param {?} _template\n     * @param {?} _componentFactoryResolver\n     * @param {?} _appRef\n     * @param {?} _injector\n     * @param {?} _viewContainerRef\n     * @param {?} _document\n     * @param {?=} _changeDetectorRef\n     */\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Emits when the menu content has been attached.\n         */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        /** @type {?} */\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        (/** @type {?} */ (element.parentNode)).insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\nMatMenuContent.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[matMenuContent]'\n            },] }\n];\n/** @nocollapse */\nMatMenuContent.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ComponentFactoryResolver },\n    { type: ApplicationRef },\n    { type: Injector },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: ChangeDetectorRef }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._outlet;\n    /**\n     * Emits when the menu content has been attached.\n     * @type {?}\n     */\n    MatMenuContent.prototype._attached;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._template;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._componentFactoryResolver;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._appRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._injector;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuContent.prototype._changeDetectorRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-errors.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-panel.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * \\@docs-private\n * @record\n * @template T\n */\nfunction MatMenuPanel() { }\nif (false) {\n    /** @type {?} */\n    MatMenuPanel.prototype.xPosition;\n    /** @type {?} */\n    MatMenuPanel.prototype.yPosition;\n    /** @type {?} */\n    MatMenuPanel.prototype.overlapTrigger;\n    /** @type {?} */\n    MatMenuPanel.prototype.templateRef;\n    /** @type {?} */\n    MatMenuPanel.prototype.close;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.parentMenu;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.direction;\n    /** @type {?} */\n    MatMenuPanel.prototype.focusFirstItem;\n    /** @type {?} */\n    MatMenuPanel.prototype.resetActiveItem;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.setPositionClasses;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.lazyContent;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.backdropClass;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.hasBackdrop;\n    /** @type {?|undefined} */\n    MatMenuPanel.prototype.panelId;\n    /**\n     * @deprecated To be removed.\n     * \\@breaking-change 8.0.0\n     * @type {?|undefined}\n     */\n    MatMenuPanel.prototype.addItem;\n    /**\n     * @deprecated To be removed.\n     * \\@breaking-change 8.0.0\n     * @type {?|undefined}\n     */\n    MatMenuPanel.prototype.removeItem;\n    /**\n     * @param {?} depth\n     * @return {?}\n     */\n    MatMenuPanel.prototype.setElevation = function (depth) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-item.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nclass MatMenuItemBase {\n}\n/** @type {?} */\nconst _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?=} document\n     * @param {?=} _focusMonitor\n     * @param {?=} _parentMenu\n     */\n    constructor(_elementRef, document, _focusMonitor, _parentMenu) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        /**\n         * ARIA role for the menu item.\n         */\n        this.role = 'menuitem';\n        /**\n         * Stream that emits when the menu item is hovered.\n         */\n        this._hovered = new Subject();\n        /**\n         * Stream that emits when the menu item is focused.\n         */\n        this._focused = new Subject();\n        /**\n         * Whether the menu item is highlighted.\n         */\n        this._highlighted = false;\n        /**\n         * Whether the menu item acts as a trigger for a sub-menu.\n         */\n        this._triggersSubmenu = false;\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef, false);\n        }\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n        this._document = document;\n    }\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    getLabel() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        /** @type {?} */\n        let output = '';\n        if (element.childNodes) {\n            /** @type {?} */\n            const length = element.childNodes.length;\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n        return output.trim();\n    }\n}\nMatMenuItem.decorators = [\n    { type: Component, args: [{\n                selector: '[mat-menu-item]',\n                exportAs: 'matMenuItem',\n                inputs: ['disabled', 'disableRipple'],\n                host: {\n                    '[attr.role]': 'role',\n                    '[class.mat-menu-item]': 'true',\n                    '[class.mat-menu-item-highlighted]': '_highlighted',\n                    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                    '[attr.tabindex]': '_getTabIndex()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.disabled]': 'disabled || null',\n                    'class': 'mat-focus-indicator',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\"\n            }] }\n];\n/** @nocollapse */\nMatMenuItem.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n];\nMatMenuItem.propDecorators = {\n    role: [{ type: Input }],\n    _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n    _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatMenuItem.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatMenuItem.ngAcceptInputType_disableRipple;\n    /**\n     * ARIA role for the menu item.\n     * @type {?}\n     */\n    MatMenuItem.prototype.role;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuItem.prototype._document;\n    /**\n     * Stream that emits when the menu item is hovered.\n     * @type {?}\n     */\n    MatMenuItem.prototype._hovered;\n    /**\n     * Stream that emits when the menu item is focused.\n     * @type {?}\n     */\n    MatMenuItem.prototype._focused;\n    /**\n     * Whether the menu item is highlighted.\n     * @type {?}\n     */\n    MatMenuItem.prototype._highlighted;\n    /**\n     * Whether the menu item acts as a trigger for a sub-menu.\n     * @type {?}\n     */\n    MatMenuItem.prototype._triggersSubmenu;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuItem.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuItem.prototype._focusMonitor;\n    /** @type {?} */\n    MatMenuItem.prototype._parentMenu;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-menu` options that can be overridden.\n * @record\n */\nfunction MatMenuDefaultOptions() { }\nif (false) {\n    /**\n     * The x-axis position of the menu.\n     * @type {?}\n     */\n    MatMenuDefaultOptions.prototype.xPosition;\n    /**\n     * The y-axis position of the menu.\n     * @type {?}\n     */\n    MatMenuDefaultOptions.prototype.yPosition;\n    /**\n     * Whether the menu should overlap the menu trigger.\n     * @type {?}\n     */\n    MatMenuDefaultOptions.prototype.overlapTrigger;\n    /**\n     * Class to be applied to the menu's backdrop.\n     * @type {?}\n     */\n    MatMenuDefaultOptions.prototype.backdropClass;\n    /**\n     * Whether the menu has a backdrop.\n     * @type {?|undefined}\n     */\n    MatMenuDefaultOptions.prototype.hasBackdrop;\n}\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n/** @type {?} */\nlet menuPanelUid = 0;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _defaultOptions\n     */\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /**\n         * Only the direct descendant menu items.\n         */\n        this._directDescendantItems = new QueryList();\n        /**\n         * Subscription to tab events on the menu panel\n         */\n        this._tabSubscription = Subscription.EMPTY;\n        /**\n         * Config object to be passed into the menu's ngClass\n         */\n        this._classList = {};\n        /**\n         * Current state of the panel animation.\n         */\n        this._panelAnimationState = 'void';\n        /**\n         * Emits whenever an animation on the menu completes.\n         */\n        this._animationDone = new Subject();\n        /**\n         * Class to be added to the backdrop element.\n         */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /**\n         * Event emitted when the menu is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * \\@breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /**\n     * Position of the menu in the X axis.\n     * @return {?}\n     */\n    get xPosition() { return this._xPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set xPosition(value) {\n        if (value !== 'before' && value !== 'after') {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Position of the menu in the Y axis.\n     * @return {?}\n     */\n    get yPosition() { return this._yPosition; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below') {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * Whether the menu should overlap its trigger.\n     * @return {?}\n     */\n    get overlapTrigger() { return this._overlapTrigger; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether the menu has a backdrop.\n     * @return {?}\n     */\n    get hasBackdrop() { return this._hasBackdrop; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param {?} classes list of class names\n     * @return {?}\n     */\n    set panelClass(classes) {\n        /** @type {?} */\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((/**\n             * @param {?} className\n             * @return {?}\n             */\n            (className) => {\n                this._classList[className] = false;\n            }));\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((/**\n             * @param {?} className\n             * @return {?}\n             */\n            (className) => {\n                this._classList[className] = true;\n            }));\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get classList() { return this.panelClass; }\n    /**\n     * @param {?} classes\n     * @return {?}\n     */\n    set classList(classes) { this.panelClass = classes; }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe((/**\n         * @return {?}\n         */\n        () => this.closed.emit('tab')));\n        // If a user manually (programatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap((/**\n         * @param {?} items\n         * @return {?}\n         */\n        items => merge(...items.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => item._focused)))))).subscribe((/**\n         * @param {?} focusedItem\n         * @return {?}\n         */\n        focusedItem => this._keyManager.updateActiveItem(focusedItem)));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        /** @type {?} */\n        const itemChanges = (/** @type {?} */ (this._directDescendantItems.changes));\n        return (/** @type {?} */ (itemChanges.pipe(startWith(this._directDescendantItems), switchMap((/**\n         * @param {?} items\n         * @return {?}\n         */\n        items => merge(...items.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => item._hovered))))))));\n    }\n    /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n    removeItem(_item) { }\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case HOME:\n            case END:\n                if (!hasModifierKey(event)) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => this._focusFirstItem(origin)));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     * @private\n     * @param {?} origin\n     * @return {?}\n     */\n    _focusFirstItem(origin) {\n        /** @type {?} */\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            /** @type {?} */\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        /** @type {?} */\n        const elevation = Math.min(MAT_MENU_BASE_ELEVATION + depth, 24);\n        /** @type {?} */\n        const newElevation = `mat-elevation-z${elevation}`;\n        /** @type {?} */\n        const customElevation = Object.keys(this._classList).find((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => c.startsWith('mat-elevation-z')));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        /** @type {?} */\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._directDescendantItems.reset(items.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => item._parentMenu === this)));\n            this._directDescendantItems.notifyOnChanges();\n        }));\n    }\n}\n_MatMenuBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatMenuBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n_MatMenuBase.propDecorators = {\n    _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n    backdropClass: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    xPosition: [{ type: Input }],\n    yPosition: [{ type: Input }],\n    templateRef: [{ type: ViewChild, args: [TemplateRef,] }],\n    items: [{ type: ContentChildren, args: [MatMenuItem, { descendants: false },] }],\n    lazyContent: [{ type: ContentChild, args: [MatMenuContent,] }],\n    overlapTrigger: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    panelClass: [{ type: Input, args: ['class',] }],\n    classList: [{ type: Input }],\n    closed: [{ type: Output }],\n    close: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    _MatMenuBase.ngAcceptInputType_overlapTrigger;\n    /** @type {?} */\n    _MatMenuBase.ngAcceptInputType_hasBackdrop;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._keyManager;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._xPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._yPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._previousElevation;\n    /**\n     * All items inside the menu. Includes items nested inside another menu.\n     * @type {?}\n     */\n    _MatMenuBase.prototype._allItems;\n    /**\n     * Only the direct descendant menu items.\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._directDescendantItems;\n    /**\n     * Subscription to tab events on the menu panel\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._tabSubscription;\n    /**\n     * Config object to be passed into the menu's ngClass\n     * @type {?}\n     */\n    _MatMenuBase.prototype._classList;\n    /**\n     * Current state of the panel animation.\n     * @type {?}\n     */\n    _MatMenuBase.prototype._panelAnimationState;\n    /**\n     * Emits whenever an animation on the menu completes.\n     * @type {?}\n     */\n    _MatMenuBase.prototype._animationDone;\n    /**\n     * Whether the menu is animating.\n     * @type {?}\n     */\n    _MatMenuBase.prototype._isAnimating;\n    /**\n     * Parent menu of the current menu panel.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.parentMenu;\n    /**\n     * Layout direction of the menu.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.direction;\n    /**\n     * Class to be added to the backdrop element.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.backdropClass;\n    /**\n     * aria-label for the menu panel.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.ariaLabel;\n    /**\n     * aria-labelledby for the menu panel.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.ariaLabelledby;\n    /**\n     * aria-describedby for the menu panel.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.ariaDescribedby;\n    /**\n     * \\@docs-private\n     * @type {?}\n     */\n    _MatMenuBase.prototype.templateRef;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    _MatMenuBase.prototype.items;\n    /**\n     * Menu content that will be rendered lazily.\n     * \\@docs-private\n     * @type {?}\n     */\n    _MatMenuBase.prototype.lazyContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._overlapTrigger;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._hasBackdrop;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._previousPanelClass;\n    /**\n     * Event emitted when the menu is closed.\n     * @type {?}\n     */\n    _MatMenuBase.prototype.closed;\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    _MatMenuBase.prototype.close;\n    /** @type {?} */\n    _MatMenuBase.prototype.panelId;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatMenuBase.prototype._defaultOptions;\n}\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\nclass MatMenu extends _MatMenuBase {\n}\nMatMenu.decorators = [\n    { type: Directive }\n];\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/**\n * \\@docs-public MatMenu\n */\n// tslint:disable-next-line:class-name\nclass _MatMenu extends MatMenu {\n    /**\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} defaultOptions\n     */\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n    }\n}\n_MatMenu.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-menu',\n                template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matMenu',\n                animations: [\n                    matMenuAnimations.transformMenu,\n                    matMenuAnimations.fadeInItems\n                ],\n                providers: [\n                    { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                    { provide: MatMenu, useExisting: _MatMenu }\n                ],\n                styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:\\\"\\\";display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n            }] }\n];\n/** @nocollapse */\n_MatMenu.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-trigger.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition());\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/**\n * Directive applied to an element that should trigger a `mat-menu`.\n */\nclass MatMenuTrigger {\n    /**\n     * @param {?} _overlay\n     * @param {?} _element\n     * @param {?} _viewContainerRef\n     * @param {?} scrollStrategy\n     * @param {?} _parentMenu\n     * @param {?} _menuItemInstance\n     * @param {?} _dir\n     * @param {?=} _focusMonitor\n     */\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._parentMenu = _parentMenu;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (/**\n         * @return {?}\n         */\n        () => this._openedBy = 'touch');\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = null;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /**\n         * Event emitted when the associated menu is opened.\n         */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /**\n         * Event emitted when the associated menu is closed.\n         */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * @deprecated\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    get _deprecatedMatMenuTriggerFor() { return this.menu; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /**\n     * References the menu instance that the trigger is associated with.\n     * @return {?}\n     */\n    get menu() { return this._menu; }\n    /**\n     * @param {?} menu\n     * @return {?}\n     */\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            this._menuCloseSubscription = menu.close.asObservable().subscribe((/**\n             * @param {?} reason\n             * @return {?}\n             */\n            reason => {\n                this._destroyMenu();\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n                    this._parentMenu.closed.emit(reason);\n                }\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /**\n     * Whether the menu is open.\n     * @return {?}\n     */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMenu);\n    }\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        /** @type {?} */\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe((/**\n         * @return {?}\n         */\n        () => this.closeMenu()));\n        this._initMenu();\n        if (this.menu instanceof MatMenu) {\n            this.menu._startAnimation();\n        }\n    }\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'program', options) {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n    _destroyMenu() {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        /** @type {?} */\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        this._restoreFocus();\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                event => event.toState === 'void')), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: (/**\n                     * @return {?}\n                     */\n                    () => (/** @type {?} */ (menu.lazyContent)).detach()),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: (/**\n                     * @return {?}\n                     */\n                    () => this._setIsMenuOpen(false))\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this._setIsMenuOpen(true);\n        this.menu.focusFirstItem(this._openedBy || 'program');\n    }\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            /** @type {?} */\n            let depth = 0;\n            /** @type {?} */\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    /**\n     * Restores focus to the element that was focused before the menu was open.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (this.restoreFocus) {\n            if (!this._openedBy) {\n                // Note that the focus style will show up both for `program` and\n                // `keyboard` so we don't have to specify which one it is.\n                this.focus();\n            }\n            else if (!this.triggersSubmenu()) {\n                this.focus(this._openedBy);\n            }\n        }\n        this._openedBy = null;\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n    _checkMenu() {\n        if (!this.menu) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            /** @type {?} */\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions((/** @type {?} */ (config.positionStrategy)));\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe((/**\n             * @param {?} change\n             * @return {?}\n             */\n            change => {\n                /** @type {?} */\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                /** @type {?} */\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                (/** @type {?} */ (this.menu.setPositionClasses))(posX, posY);\n            }));\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        /** @type {?} */\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n    _menuClosingActions() {\n        /** @type {?} */\n        const backdrop = (/** @type {?} */ (this._overlayRef)).backdropClick();\n        /** @type {?} */\n        const detachments = (/** @type {?} */ (this._overlayRef)).detachments();\n        /** @type {?} */\n        const parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        /** @type {?} */\n        const hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        active => active !== this._menuItemInstance)), filter((/**\n         * @return {?}\n         */\n        () => this._menuOpen))) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : null;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openMenu();\n        }\n    }\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n        this._hoverSubscription = this._parentMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        active => active === this._menuItemInstance && !active.disabled)), delay(0, asapScheduler))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => this.openMenu()));\n            }\n            else {\n                this.openMenu();\n            }\n        }));\n    }\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\nMatMenuTrigger.decorators = [\n    { type: Directive, args: [{\n                selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                host: {\n                    'class': 'mat-menu-trigger',\n                    'aria-haspopup': 'true',\n                    '[attr.aria-expanded]': 'menuOpen || null',\n                    '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                    '(mousedown)': '_handleMousedown($event)',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(click)': '_handleClick($event)',\n                },\n                exportAs: 'matMenuTrigger'\n            },] }\n];\n/** @nocollapse */\nMatMenuTrigger.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n    { type: MatMenu, decorators: [{ type: Optional }] },\n    { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: FocusMonitor }\n];\nMatMenuTrigger.propDecorators = {\n    _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n    menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n    menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n    restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n    menuOpened: [{ type: Output }],\n    onMenuOpen: [{ type: Output }],\n    menuClosed: [{ type: Output }],\n    onMenuClose: [{ type: Output }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._overlayRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._menuOpen;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._closingActionsSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._hoverSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._menuCloseSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._scrollStrategy;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._handleTouchStart;\n    /** @type {?} */\n    MatMenuTrigger.prototype._openedBy;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._menu;\n    /**\n     * Data to be passed along to any lazily-rendered content.\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.menuData;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.restoreFocus;\n    /**\n     * Event emitted when the associated menu is opened.\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.menuOpened;\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.onMenuOpen;\n    /**\n     * Event emitted when the associated menu is closed.\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.menuClosed;\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     */\n    MatMenuTrigger.prototype.onMenuClose;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._parentMenu;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._menuItemInstance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatMenuTrigger.prototype._focusMonitor;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\n// tslint:disable-next-line:class-name\nclass _MatMenuDirectivesModule {\n}\n_MatMenuDirectivesModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                declarations: [\n                    MatMenuTrigger,\n                    MatMenuContent,\n                ],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] }\n];\nclass MatMenuModule {\n}\nMatMenuModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    MatRippleModule,\n                    OverlayModule,\n                    _MatMenuDirectivesModule,\n                ],\n                exports: [CdkScrollableModule, MatCommonModule, _MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                declarations: [_MatMenu, MatMenuItem],\n                providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/menu-positions.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/menu/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenu, _MatMenuBase, _MatMenuDirectivesModule, fadeInItems, matMenuAnimations, transformMenu, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵangular_material_src_material_menu_menu_a, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵangular_material_src_material_menu_menu_b, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵangular_material_src_material_menu_menu_c };\n//# sourceMappingURL=menu.js.map\n","import { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { CdkScrollable, ScrollDispatcher, ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, Inject, forwardRef, ElementRef, NgZone, EventEmitter, Optional, Input, HostBinding, Output, HostListener, QueryList, ContentChildren, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { FocusTrapFactory, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, fromEvent, merge } from 'rxjs';\nimport { filter, takeUntil, distinctUntilChanged, map, take, startWith, debounceTime } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sidenav/drawer-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material drawers.\n * \\@docs-private\n * @type {?}\n */\nconst matDrawerAnimations = {\n    /**\n     * Animation that slides a drawer in and out.\n     */\n    transformDrawer: trigger('transform', [\n        // We remove the `transform` here completely, rather than setting it to zero, because:\n        // 1. Having a transform can cause elements with ripples or an animated\n        //    transform to shift around in Chrome with an RTL layout (see #10023).\n        // 2. 3d transforms causes text to appear blurry on IE and Edge.\n        state('open, open-instant', style({\n            'transform': 'none',\n            'visibility': 'visible',\n        })),\n        state('void', style({\n            // Avoids the shadow showing up when closed in SSR.\n            'box-shadow': 'none',\n            'visibility': 'hidden',\n        })),\n        transition('void => open-instant', animate('0ms')),\n        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sidenav/drawer.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction throwMatDuplicatedDrawerError(position) {\n    throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Configures whether drawers should use auto sizing by default.\n * @type {?}\n */\nconst MAT_DRAWER_DEFAULT_AUTOSIZE = new InjectionToken('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n    providedIn: 'root',\n    factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n});\n/**\n * Used to provide a drawer container to a drawer while avoiding circular references.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_DRAWER_CONTAINER = new InjectionToken('MAT_DRAWER_CONTAINER');\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY() {\n    return false;\n}\nclass MatDrawerContent extends CdkScrollable {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(_changeDetectorRef, _container, elementRef, scrollDispatcher, ngZone) {\n        super(elementRef, scrollDispatcher, ngZone);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._container = _container;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._container._contentMarginChanges.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\nMatDrawerContent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/** @nocollapse */\nMatDrawerContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatDrawerContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContent.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatDrawerContent.prototype._container;\n}\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\nclass MatDrawer {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _focusTrapFactory\n     * @param {?} _focusMonitor\n     * @param {?} _platform\n     * @param {?} _ngZone\n     * @param {?} _doc\n     * @param {?=} _container\n     */\n    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._focusMonitor = _focusMonitor;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._doc = _doc;\n        this._container = _container;\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        /**\n         * Whether the drawer is initialized. Used for disabling the initial animation.\n         */\n        this._enableAnimations = false;\n        this._position = 'start';\n        this._mode = 'over';\n        this._disableClose = false;\n        this._opened = false;\n        /**\n         * Emits whenever the drawer has started animating.\n         */\n        this._animationStarted = new Subject();\n        /**\n         * Emits whenever the drawer is done animating.\n         */\n        this._animationEnd = new Subject();\n        /**\n         * Current state of the sidenav animation.\n         */\n        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator\n        // metadata is not inherited by child classes, instead the host binding data is defined in a way\n        // that can be inherited.\n        // tslint:disable:no-host-decorator-in-concrete\n        this._animationState = 'void';\n        /**\n         * Event emitted when the drawer open state is changed.\n         */\n        this.openedChange = \n        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n        new EventEmitter(/* isAsync */ true);\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Event emitted when the drawer's position changes.\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onPositionChanged = new EventEmitter();\n        /**\n         * An observable that emits when the drawer mode changes. This is used by the drawer container to\n         * to know when to when the mode changes so it can adapt the margins on the content.\n         */\n        this._modeChanged = new Subject();\n        this.openedChange.subscribe((/**\n         * @param {?} opened\n         * @return {?}\n         */\n        (opened) => {\n            if (opened) {\n                if (this._doc) {\n                    this._elementFocusedBeforeDrawerWasOpened = (/** @type {?} */ (this._doc.activeElement));\n                }\n                this._takeFocus();\n            }\n            else {\n                this._restoreFocus();\n            }\n        }));\n        /**\n         * Listen to `keydown` events outside the zone so that change detection is not run every\n         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n         * and we don't have close disabled.\n         */\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            ((/** @type {?} */ (fromEvent(this._elementRef.nativeElement, 'keydown')))).pipe(filter((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => {\n                return event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event);\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            event => this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.close();\n                event.stopPropagation();\n                event.preventDefault();\n            }))));\n        }));\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        this._animationEnd.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            const { fromState, toState } = event;\n            if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n                (toState === 'void' && fromState.indexOf('open') === 0)) {\n                this.openedChange.emit(this._opened);\n            }\n        }));\n    }\n    /**\n     * The side that the drawer is attached to.\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        // Make sure we have a valid value.\n        value = value === 'end' ? 'end' : 'start';\n        if (value != this._position) {\n            this._position = value;\n            this.onPositionChanged.emit();\n        }\n    }\n    /**\n     * Mode of the drawer; one of 'over', 'push' or 'side'.\n     * @return {?}\n     */\n    get mode() { return this._mode; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set mode(value) {\n        this._mode = value;\n        this._updateFocusTrapState();\n        this._modeChanged.next();\n    }\n    /**\n     * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n     * @return {?}\n     */\n    get disableClose() { return this._disableClose; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableClose(value) { this._disableClose = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer should focus the first focusable element automatically when opened.\n     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly\n     * enabled, focus will be moved into the sidenav in `side` mode as well.\n     * @return {?}\n     */\n    get autoFocus() {\n        /** @type {?} */\n        const value = this._autoFocus;\n        // Note that usually we disable auto focusing in `side` mode, because we don't know how the\n        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer\n        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.\n        return value == null ? this.mode !== 'side' : value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autoFocus(value) { this._autoFocus = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer is opened. We overload this because we trigger an event when it\n     * starts or end.\n     * @return {?}\n     */\n    get opened() { return this._opened; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set opened(value) { this.toggle(coerceBooleanProperty(value)); }\n    /**\n     * Event emitted when the drawer has been opened.\n     * @return {?}\n     */\n    get _openedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started opening.\n     * @return {?}\n     */\n    get openedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState.indexOf('open') === 0)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has been closed.\n     * @return {?}\n     */\n    get _closedStream() {\n        return this.openedChange.pipe(filter((/**\n         * @param {?} o\n         * @return {?}\n         */\n        o => !o)), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Event emitted when the drawer has started closing.\n     * @return {?}\n     */\n    get closedStart() {\n        return this._animationStarted.pipe(filter((/**\n         * @param {?} e\n         * @return {?}\n         */\n        e => e.fromState !== e.toState && e.toState === 'void')), map((/**\n         * @return {?}\n         */\n        () => { })));\n    }\n    /**\n     * Moves focus into the drawer. Note that this works even if\n     * the focus trap is disabled in `side` mode.\n     * @private\n     * @return {?}\n     */\n    _takeFocus() {\n        if (!this.autoFocus || !this._focusTrap) {\n            return;\n        }\n        this._focusTrap.focusInitialElementWhenReady().then((/**\n         * @param {?} hasMovedFocus\n         * @return {?}\n         */\n        hasMovedFocus => {\n            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n            // still works. We need to check that `focus` is a function due to Universal.\n            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n                this._elementRef.nativeElement.focus();\n            }\n        }));\n    }\n    /**\n     * If focus is currently inside the drawer, restores it to where it was before the drawer\n     * opened.\n     * @private\n     * @return {?}\n     */\n    _restoreFocus() {\n        if (!this.autoFocus) {\n            return;\n        }\n        /** @type {?} */\n        const activeEl = this._doc && this._doc.activeElement;\n        if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n            // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.\n            if (this._elementFocusedBeforeDrawerWasOpened) {\n                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n            }\n            else {\n                this._elementRef.nativeElement.blur();\n            }\n        }\n        this._elementFocusedBeforeDrawerWasOpened = null;\n        this._openedVia = null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n        this._updateFocusTrapState();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n        // drawers that are open by default. When we're on the server, we shouldn't enable the\n        // animations, because we don't want the drawer to animate the first time the user sees\n        // the page.\n        if (this._platform.isBrowser) {\n            this._enableAnimations = true;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n        this._animationStarted.complete();\n        this._animationEnd.complete();\n        this._modeChanged.complete();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Open the drawer.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    open(openedVia) {\n        return this.toggle(true, openedVia);\n    }\n    /**\n     * Close the drawer.\n     * @return {?}\n     */\n    close() {\n        return this.toggle(false);\n    }\n    /**\n     * Toggle this drawer.\n     * @param {?=} isOpen Whether the drawer should be open.\n     * @param {?=} openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n     * Used for focus management after the sidenav is closed.\n     * @return {?}\n     */\n    toggle(isOpen = !this.opened, openedVia = 'program') {\n        this._opened = isOpen;\n        if (isOpen) {\n            this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n            this._openedVia = openedVia;\n        }\n        else {\n            this._animationState = 'void';\n            this._restoreFocus();\n        }\n        this._updateFocusTrapState();\n        return new Promise((/**\n         * @param {?} resolve\n         * @return {?}\n         */\n        resolve => {\n            this.openedChange.pipe(take(1)).subscribe((/**\n             * @param {?} open\n             * @return {?}\n             */\n            open => resolve(open ? 'open' : 'close')));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get _width() {\n        return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n    }\n    /**\n     * Updates the enabled state of the focus trap.\n     * @private\n     * @return {?}\n     */\n    _updateFocusTrapState() {\n        if (this._focusTrap) {\n            // The focus trap is only enabled when the drawer is open in any mode other than side.\n            this._focusTrap.enabled = this.opened && this.mode !== 'side';\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationStartListener(event) {\n        this._animationStarted.next(event);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDoneListener(event) {\n        this._animationEnd.next(event);\n    }\n}\nMatDrawer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer',\n                exportAs: 'matDrawer',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    'tabIndex': '-1',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/** @nocollapse */\nMatDrawer.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusTrapFactory },\n    { type: FocusMonitor },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: MatDrawerContainer, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DRAWER_CONTAINER,] }] }\n];\nMatDrawer.propDecorators = {\n    position: [{ type: Input }],\n    mode: [{ type: Input }],\n    disableClose: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    opened: [{ type: Input }],\n    _animationState: [{ type: HostBinding, args: ['@transform',] }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    openedStart: [{ type: Output }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    closedStart: [{ type: Output }],\n    onPositionChanged: [{ type: Output, args: ['positionChanged',] }],\n    _animationStartListener: [{ type: HostListener, args: ['@transform.start', ['$event'],] }],\n    _animationDoneListener: [{ type: HostListener, args: ['@transform.done', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    MatDrawer.ngAcceptInputType_disableClose;\n    /** @type {?} */\n    MatDrawer.ngAcceptInputType_autoFocus;\n    /** @type {?} */\n    MatDrawer.ngAcceptInputType_opened;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._focusTrap;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n    /**\n     * Whether the drawer is initialized. Used for disabling the initial animation.\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._enableAnimations;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._mode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._disableClose;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._autoFocus;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._opened;\n    /**\n     * How the sidenav was opened (keypress, mouse click etc.)\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._openedVia;\n    /**\n     * Emits whenever the drawer has started animating.\n     * @type {?}\n     */\n    MatDrawer.prototype._animationStarted;\n    /**\n     * Emits whenever the drawer is done animating.\n     * @type {?}\n     */\n    MatDrawer.prototype._animationEnd;\n    /**\n     * Current state of the sidenav animation.\n     * @type {?}\n     */\n    MatDrawer.prototype._animationState;\n    /**\n     * Event emitted when the drawer open state is changed.\n     * @type {?}\n     */\n    MatDrawer.prototype.openedChange;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._destroyed;\n    /**\n     * Event emitted when the drawer's position changes.\n     * @type {?}\n     */\n    MatDrawer.prototype.onPositionChanged;\n    /**\n     * An observable that emits when the drawer mode changes. This is used by the drawer container to\n     * to know when to when the mode changes so it can adapt the margins on the content.\n     * @type {?}\n     */\n    MatDrawer.prototype._modeChanged;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._focusTrapFactory;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawer.prototype._doc;\n    /**\n     * @deprecated `_container` parameter to be made required.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatDrawer.prototype._container;\n}\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nclass MatDrawerContainer {\n    /**\n     * @param {?} _dir\n     * @param {?} _element\n     * @param {?} _ngZone\n     * @param {?} _changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} defaultAutosize\n     * @param {?=} _animationMode\n     */\n    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {\n        this._dir = _dir;\n        this._element = _element;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * Drawers that belong to this container.\n         */\n        this._drawers = new QueryList();\n        /**\n         * Event emitted when the drawer backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Emits on every ngDoCheck. Used for debouncing reflows.\n         */\n        this._doCheckSubject = new Subject();\n        /**\n         * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n         * drawer is open. We use margin rather than transform even for push mode because transform breaks\n         * fixed position elements inside of the transformed element.\n         */\n        this._contentMargins = { left: null, right: null };\n        this._contentMarginChanges = new Subject();\n        // If a `Dir` directive exists up the tree, listen direction changes\n        // and update the left/right properties to point to the proper start/end.\n        if (_dir) {\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n                this.updateContentMargins();\n            }));\n        }\n        // Since the minimum width of the sidenav depends on the viewport width,\n        // we need to recompute the margins if the viewport changes.\n        viewportRuler.change()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n        this._autosize = defaultAutosize;\n    }\n    /**\n     * The drawer child with the `start` position.\n     * @return {?}\n     */\n    get start() { return this._start; }\n    /**\n     * The drawer child with the `end` position.\n     * @return {?}\n     */\n    get end() { return this._end; }\n    /**\n     * Whether to automatically resize the container whenever\n     * the size of any of its drawers changes.\n     *\n     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n     * the drawers on every change detection cycle. Can be configured globally via the\n     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n     * @return {?}\n     */\n    get autosize() { return this._autosize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set autosize(value) { this._autosize = coerceBooleanProperty(value); }\n    /**\n     * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n     * mode as well.\n     * @return {?}\n     */\n    get hasBackdrop() {\n        if (this._backdropOverride == null) {\n            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n        }\n        return this._backdropOverride;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hasBackdrop(value) {\n        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n    }\n    /**\n     * Reference to the CdkScrollable instance that wraps the scrollable content.\n     * @return {?}\n     */\n    get scrollable() {\n        return this._userContent || this._content;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._allDrawers.changes\n            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        (drawer) => {\n            // @breaking-change 10.0.0 Remove `_container` check once container parameter is required.\n            this._drawers.reset(drawer.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            item => !item._container || item._container === this)));\n            this._drawers.notifyOnChanges();\n        }));\n        this._drawers.changes.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._validateDrawers();\n            this._drawers.forEach((/**\n             * @param {?} drawer\n             * @return {?}\n             */\n            (drawer) => {\n                this._watchDrawerToggle(drawer);\n                this._watchDrawerPosition(drawer);\n                this._watchDrawerMode(drawer);\n            }));\n            if (!this._drawers.length ||\n                this._isDrawerOpen(this._start) ||\n                this._isDrawerOpen(this._end)) {\n                this.updateContentMargins();\n            }\n            this._changeDetectorRef.markForCheck();\n        }));\n        this._doCheckSubject.pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n        takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => this.updateContentMargins()));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._contentMarginChanges.complete();\n        this._doCheckSubject.complete();\n        this._drawers.destroy();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Calls `open` of both start and end drawers\n     * @return {?}\n     */\n    open() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.open()));\n    }\n    /**\n     * Calls `close` of both start and end drawers\n     * @return {?}\n     */\n    close() {\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer.close()));\n    }\n    /**\n     * Recalculates and updates the inline styles for the content. Note that this should be used\n     * sparingly, because it causes a reflow.\n     * @return {?}\n     */\n    updateContentMargins() {\n        // 1. For drawers in `over` mode, they don't affect the content.\n        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n        //    left margin (for left drawer) or right margin (for right the drawer).\n        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n        //    adding to the left or right margin and simultaneously subtracting the same amount of\n        //    margin from the other side.\n        /** @type {?} */\n        let left = 0;\n        /** @type {?} */\n        let right = 0;\n        if (this._left && this._left.opened) {\n            if (this._left.mode == 'side') {\n                left += this._left._width;\n            }\n            else if (this._left.mode == 'push') {\n                /** @type {?} */\n                const width = this._left._width;\n                left += width;\n                right -= width;\n            }\n        }\n        if (this._right && this._right.opened) {\n            if (this._right.mode == 'side') {\n                right += this._right._width;\n            }\n            else if (this._right.mode == 'push') {\n                /** @type {?} */\n                const width = this._right._width;\n                right += width;\n                left -= width;\n            }\n        }\n        // If either `right` or `left` is zero, don't set a style to the element. This\n        // allows users to specify a custom size via CSS class in SSR scenarios where the\n        // measured widths will always be zero. Note that we reset to `null` here, rather\n        // than below, in order to ensure that the types in the `if` below are consistent.\n        left = left || (/** @type {?} */ (null));\n        right = right || (/** @type {?} */ (null));\n        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n            this._contentMargins = { left, right };\n            // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n            // to do it only when something changed, otherwise we can end up hitting the zone too often.\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => this._contentMarginChanges.next(this._contentMargins)));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        // If users opted into autosizing, do a check every change detection cycle.\n        if (this._autosize && this._isPushed()) {\n            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => this._doCheckSubject.next()));\n        }\n    }\n    /**\n     * Subscribes to drawer events in order to set a class on the main container element when the\n     * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n     * is properly hidden.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerToggle(drawer) {\n        drawer._animationStarted.pipe(filter((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => event.fromState !== event.toState)), takeUntil(this._drawers.changes))\n            .subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Set the transition class on the container so that the animations occur. This should not\n            // be set initially because animations should only be triggered via a change in state.\n            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n                this._element.nativeElement.classList.add('mat-drawer-transition');\n            }\n            this.updateContentMargins();\n            this._changeDetectorRef.markForCheck();\n        }));\n        if (drawer.mode !== 'side') {\n            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n             * @return {?}\n             */\n            () => this._setContainerClass(drawer.opened)));\n        }\n    }\n    /**\n     * Subscribes to drawer onPositionChanged event in order to\n     * re-validate drawers when the position changes.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerPosition(drawer) {\n        if (!drawer) {\n            return;\n        }\n        // NOTE: We need to wait for the microtask queue to be empty before validating,\n        // since both drawers may be swapping positions at the same time.\n        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._validateDrawers();\n            }));\n        }));\n    }\n    /**\n     * Subscribes to changes in drawer mode so we can run change detection.\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _watchDrawerMode(drawer) {\n        if (drawer) {\n            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this.updateContentMargins();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n     * @private\n     * @param {?} isAdd\n     * @return {?}\n     */\n    _setContainerClass(isAdd) {\n        /** @type {?} */\n        const classList = this._element.nativeElement.classList;\n        /** @type {?} */\n        const className = 'mat-drawer-container-has-open';\n        if (isAdd) {\n            classList.add(className);\n        }\n        else {\n            classList.remove(className);\n        }\n    }\n    /**\n     * Validate the state of the drawer children components.\n     * @private\n     * @return {?}\n     */\n    _validateDrawers() {\n        this._start = this._end = null;\n        // Ensure that we have at most one start and one end drawer.\n        this._drawers.forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => {\n            if (drawer.position == 'end') {\n                if (this._end != null) {\n                    throwMatDuplicatedDrawerError('end');\n                }\n                this._end = drawer;\n            }\n            else {\n                if (this._start != null) {\n                    throwMatDuplicatedDrawerError('start');\n                }\n                this._start = drawer;\n            }\n        }));\n        this._right = this._left = null;\n        // Detect if we're LTR or RTL.\n        if (this._dir && this._dir.value === 'rtl') {\n            this._left = this._end;\n            this._right = this._start;\n        }\n        else {\n            this._left = this._start;\n            this._right = this._end;\n        }\n    }\n    /**\n     * Whether the container is being pushed to the side by one of the drawers.\n     * @private\n     * @return {?}\n     */\n    _isPushed() {\n        return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n            (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n    }\n    /**\n     * @return {?}\n     */\n    _onBackdropClicked() {\n        this.backdropClick.emit();\n        this._closeModalDrawer();\n    }\n    /**\n     * @return {?}\n     */\n    _closeModalDrawer() {\n        // Close all open drawers where closing is not disabled and the mode is not `side`.\n        [this._start, this._end]\n            .filter((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer)))\n            .forEach((/**\n         * @param {?} drawer\n         * @return {?}\n         */\n        drawer => (/** @type {?} */ (drawer)).close()));\n    }\n    /**\n     * @return {?}\n     */\n    _isShowingBackdrop() {\n        return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _canHaveBackdrop(drawer) {\n        return drawer.mode !== 'side' || !!this._backdropOverride;\n    }\n    /**\n     * @private\n     * @param {?} drawer\n     * @return {?}\n     */\n    _isDrawerOpen(drawer) {\n        return drawer != null && drawer.opened;\n    }\n}\nMatDrawerContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-drawer-container',\n                exportAs: 'matDrawerContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-drawer\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-drawer-content\\\">\\n</ng-content>\\n<mat-drawer-content *ngIf=\\\"!_content\\\">\\n  <ng-content></ng-content>\\n</mat-drawer-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatDrawerContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatDrawerContainer.ctorParameters = () => [\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DRAWER_DEFAULT_AUTOSIZE,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatDrawerContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatDrawer, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatDrawerContent,] }],\n    _userContent: [{ type: ViewChild, args: [MatDrawerContent,] }],\n    autosize: [{ type: Input }],\n    hasBackdrop: [{ type: Input }],\n    backdropClick: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    MatDrawerContainer.ngAcceptInputType_autosize;\n    /** @type {?} */\n    MatDrawerContainer.ngAcceptInputType_hasBackdrop;\n    /**\n     * All drawers in the container. Includes drawers from inside nested containers.\n     * @type {?}\n     */\n    MatDrawerContainer.prototype._allDrawers;\n    /**\n     * Drawers that belong to this container.\n     * @type {?}\n     */\n    MatDrawerContainer.prototype._drawers;\n    /** @type {?} */\n    MatDrawerContainer.prototype._content;\n    /** @type {?} */\n    MatDrawerContainer.prototype._userContent;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._autosize;\n    /** @type {?} */\n    MatDrawerContainer.prototype._backdropOverride;\n    /**\n     * Event emitted when the drawer backdrop is clicked.\n     * @type {?}\n     */\n    MatDrawerContainer.prototype.backdropClick;\n    /**\n     * The drawer at the start/end position, independent of direction.\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._start;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._end;\n    /**\n     * The drawer at the left/right. When direction changes, these will change as well.\n     * They're used as aliases for the above to set the left/right style properly.\n     * In LTR, _left == _start and _right == _end.\n     * In RTL, _left == _end and _right == _start.\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._left;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._right;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._destroyed;\n    /**\n     * Emits on every ngDoCheck. Used for debouncing reflows.\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._doCheckSubject;\n    /**\n     * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n     * drawer is open. We use margin rather than transform even for push mode because transform breaks\n     * fixed position elements inside of the transformed element.\n     * @type {?}\n     */\n    MatDrawerContainer.prototype._contentMargins;\n    /** @type {?} */\n    MatDrawerContainer.prototype._contentMarginChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatDrawerContainer.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sidenav/sidenav.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavContent extends MatDrawerContent {\n    /**\n     * @param {?} changeDetectorRef\n     * @param {?} container\n     * @param {?} elementRef\n     * @param {?} scrollDispatcher\n     * @param {?} ngZone\n     */\n    constructor(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone) {\n        super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n    }\n}\nMatSidenavContent.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav-content',\n                template: '<ng-content></ng-content>',\n                host: {\n                    'class': 'mat-drawer-content mat-sidenav-content',\n                    '[style.margin-left.px]': '_container._contentMargins.left',\n                    '[style.margin-right.px]': '_container._contentMargins.right',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\n/** @nocollapse */\nMatSidenavContent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatSidenavContainer)),] }] },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: NgZone }\n];\nclass MatSidenav extends MatDrawer {\n    constructor() {\n        super(...arguments);\n        this._fixedInViewport = false;\n        this._fixedTopGap = 0;\n        this._fixedBottomGap = 0;\n    }\n    /**\n     * Whether the sidenav is fixed in the viewport.\n     * @return {?}\n     */\n    get fixedInViewport() { return this._fixedInViewport; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n    /**\n     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n     * mode.\n     * @return {?}\n     */\n    get fixedTopGap() { return this._fixedTopGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n    /**\n     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n     * fixed mode.\n     * @return {?}\n     */\n    get fixedBottomGap() { return this._fixedBottomGap; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n}\nMatSidenav.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav',\n                exportAs: 'matSidenav',\n                template: \"<div class=\\\"mat-drawer-inner-container\\\">\\r\\n  <ng-content></ng-content>\\r\\n</div>\\r\\n\",\n                animations: [matDrawerAnimations.transformDrawer],\n                host: {\n                    'class': 'mat-drawer mat-sidenav',\n                    'tabIndex': '-1',\n                    // must prevent the browser from aligning text based on value\n                    '[attr.align]': 'null',\n                    '[class.mat-drawer-end]': 'position === \"end\"',\n                    '[class.mat-drawer-over]': 'mode === \"over\"',\n                    '[class.mat-drawer-push]': 'mode === \"push\"',\n                    '[class.mat-drawer-side]': 'mode === \"side\"',\n                    '[class.mat-drawer-opened]': 'opened',\n                    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n                    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n                    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }] }\n];\nMatSidenav.propDecorators = {\n    fixedInViewport: [{ type: Input }],\n    fixedTopGap: [{ type: Input }],\n    fixedBottomGap: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatSidenav.ngAcceptInputType_fixedInViewport;\n    /** @type {?} */\n    MatSidenav.ngAcceptInputType_fixedTopGap;\n    /** @type {?} */\n    MatSidenav.ngAcceptInputType_fixedBottomGap;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSidenav.prototype._fixedInViewport;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSidenav.prototype._fixedTopGap;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSidenav.prototype._fixedBottomGap;\n}\nclass MatSidenavContainer extends MatDrawerContainer {\n}\nMatSidenavContainer.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-sidenav-container',\n                exportAs: 'matSidenavContainer',\n                template: \"<div class=\\\"mat-drawer-backdrop\\\" (click)=\\\"_onBackdropClicked()\\\" *ngIf=\\\"hasBackdrop\\\"\\n     [class.mat-drawer-shown]=\\\"_isShowingBackdrop()\\\"></div>\\n\\n<ng-content select=\\\"mat-sidenav\\\"></ng-content>\\n\\n<ng-content select=\\\"mat-sidenav-content\\\">\\n</ng-content>\\n<mat-sidenav-content *ngIf=\\\"!_content\\\" cdkScrollable>\\n  <ng-content></ng-content>\\n</mat-sidenav-content>\\n\",\n                host: {\n                    'class': 'mat-drawer-container mat-sidenav-container',\n                    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                providers: [{\n                        provide: MAT_DRAWER_CONTAINER,\n                        useExisting: MatSidenavContainer\n                    }],\n                styles: [\".mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-container-has-open{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-container.ng-animate-disabled .mat-drawer-backdrop,.mat-drawer-container.ng-animate-disabled .mat-drawer-content,.ng-animate-disabled .mat-drawer-container .mat-drawer-backdrop,.ng-animate-disabled .mat-drawer-container .mat-drawer-content{transition:none}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:background-color,visibility}.cdk-high-contrast-active .mat-drawer-backdrop{opacity:.5}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:400ms;transition-timing-function:cubic-bezier(0.25, 0.8, 0.25, 1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%, 0, 0)}.cdk-high-contrast-active .mat-drawer,.cdk-high-contrast-active [dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}.cdk-high-contrast-active [dir=rtl] .mat-drawer,.cdk-high-contrast-active .mat-drawer.mat-drawer-end{border-left:solid 1px currentColor;border-right:none}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer{transform:translate3d(100%, 0, 0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%, 0, 0)}.mat-drawer-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.mat-sidenav-fixed{position:fixed}\\n\"]\n            }] }\n];\nMatSidenavContainer.propDecorators = {\n    _allDrawers: [{ type: ContentChildren, args: [MatSidenav, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }],\n    _content: [{ type: ContentChild, args: [MatSidenavContent,] }]\n};\nif (false) {\n    /** @type {?} */\n    MatSidenavContainer.ngAcceptInputType_hasBackdrop;\n    /** @type {?} */\n    MatSidenavContainer.prototype._allDrawers;\n    /** @type {?} */\n    MatSidenavContainer.prototype._content;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sidenav/sidenav-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSidenavModule {\n}\nMatSidenavModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PlatformModule,\n                    CdkScrollableModule,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    MatCommonModule,\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n                declarations: [\n                    MatDrawer,\n                    MatDrawerContainer,\n                    MatDrawerContent,\n                    MatSidenav,\n                    MatSidenavContainer,\n                    MatSidenavContent,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/sidenav/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DRAWER_DEFAULT_AUTOSIZE, MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY, MatDrawer, MatDrawerContainer, MatDrawerContent, MatSidenav, MatSidenavContainer, MatSidenavContent, MatSidenavModule, matDrawerAnimations, throwMatDuplicatedDrawerError, MAT_DRAWER_CONTAINER as ɵangular_material_src_material_sidenav_sidenav_a };\n//# sourceMappingURL=sidenav.js.map\n","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.decorators = [\n    { type: Directive, args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.decorators = [\n    { type: NgModule, args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator],\n            },] }\n];\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n//# sourceMappingURL=slide-toggle.js.map\n","import { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, NgZone, Inject, Optional, TemplateRef, Component, ChangeDetectionStrategy, ViewEncapsulation, ViewContainerRef, ContentChild, ViewChild, Input, ComponentFactoryResolver, forwardRef, EventEmitter, ChangeDetectorRef, Output, QueryList, ContentChildren, Attribute, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, MAT_RIPPLE_GLOBAL_OPTIONS, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, Subscription, merge, fromEvent, of, timer } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { hasModifierKey, SPACE, ENTER, END, HOME } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/ink-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n * @record\n */\nfunction _MatInkBarPositioner() { }\n/**\n * Injection token for the MatInkBar's Positioner.\n * @type {?}\n */\nconst _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n});\n/**\n * The default positioner function for the MatInkBar.\n * \\@docs-private\n * @return {?}\n */\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\n    /** @type {?} */\n    const method = (/**\n     * @param {?} element\n     * @return {?}\n     */\n    (element) => ({\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\n    }));\n    return method;\n}\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nclass MatInkBar {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?} _inkBarPositioner\n     * @param {?=} _animationMode\n     */\n    constructor(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._inkBarPositioner = _inkBarPositioner;\n        this._animationMode = _animationMode;\n    }\n    /**\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\n     * Shows the ink bar if previously set as hidden.\n     * @param {?} element\n     * @return {?}\n     */\n    alignToElement(element) {\n        this.show();\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                () => this._setStyles(element)));\n            }));\n        }\n        else {\n            this._setStyles(element);\n        }\n    }\n    /**\n     * Shows the ink bar.\n     * @return {?}\n     */\n    show() {\n        this._elementRef.nativeElement.style.visibility = 'visible';\n    }\n    /**\n     * Hides the ink bar.\n     * @return {?}\n     */\n    hide() {\n        this._elementRef.nativeElement.style.visibility = 'hidden';\n    }\n    /**\n     * Sets the proper styles to the ink bar element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _setStyles(element) {\n        /** @type {?} */\n        const positions = this._inkBarPositioner(element);\n        /** @type {?} */\n        const inkBar = this._elementRef.nativeElement;\n        inkBar.style.left = positions.left;\n        inkBar.style.width = positions.width;\n    }\n}\nMatInkBar.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-ink-bar',\n                host: {\n                    'class': 'mat-ink-bar',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                },\n            },] }\n];\n/** @nocollapse */\nMatInkBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInkBar.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInkBar.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatInkBar.prototype._inkBarPositioner;\n    /** @type {?} */\n    MatInkBar.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-content.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Decorates the `ng-template` tags and reads out the template from it.\n */\nclass MatTabContent {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nMatTabContent.decorators = [\n    { type: Directive, args: [{ selector: '[matTabContent]' },] }\n];\n/** @nocollapse */\nMatTabContent.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    MatTabContent.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-label.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to flag tab labels for use with the portal directive\n */\nclass MatTabLabel extends CdkPortal {\n}\nMatTabLabel.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-label], [matTabLabel]',\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTab.\n/**\n * \\@docs-private\n */\nclass MatTabBase {\n}\n/** @type {?} */\nconst _MatTabMixinBase = mixinDisabled(MatTabBase);\n/**\n * Used to provide a tab group to a tab without causing a circular dependency.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TAB_GROUP = new InjectionToken('MAT_TAB_GROUP');\nclass MatTab extends _MatTabMixinBase {\n    /**\n     * @param {?} _viewContainerRef\n     * @param {?=} _closestTabGroup\n     */\n    constructor(_viewContainerRef, _closestTabGroup) {\n        super();\n        this._viewContainerRef = _viewContainerRef;\n        this._closestTabGroup = _closestTabGroup;\n        /**\n         * Plain text label for the tab, used when there is no template label.\n         */\n        this.textLabel = '';\n        /**\n         * Portal that will be the hosted content of the tab\n         */\n        this._contentPortal = null;\n        /**\n         * Emits whenever the internal state of the tab changes.\n         */\n        this._stateChanges = new Subject();\n        /**\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\n         * represents the right.\n         */\n        this.position = null;\n        /**\n         * The initial relatively index origin of the tab if it was created and selected after there\n         * was already a selected tab. Provides context of what position the tab should originate from.\n         */\n        this.origin = null;\n        /**\n         * Whether the tab is currently active.\n         */\n        this.isActive = false;\n    }\n    /**\n     * Content for the tab label given by `<ng-template mat-tab-label>`.\n     * @return {?}\n     */\n    get templateLabel() { return this._templateLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set templateLabel(value) {\n        // Only update the templateLabel via query if there is actually\n        // a MatTabLabel found. This works around an issue where a user may have\n        // manually set `templateLabel` during creation mode, which would then get clobbered\n        // by `undefined` when this query resolves.\n        if (value) {\n            this._templateLabel = value;\n        }\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get content() {\n        return this._contentPortal;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n            this._stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\n    }\n}\nMatTab.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab',\n                template: \"<!-- Create a template for the content of the <mat-tab> so that we can grab a reference to this\\n    TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\\n    tab-group. -->\\n<ng-template><ng-content></ng-content></ng-template>\\n\",\n                inputs: ['disabled'],\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matTab'\n            }] }\n];\n/** @nocollapse */\nMatTab.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TAB_GROUP,] }] }\n];\nMatTab.propDecorators = {\n    templateLabel: [{ type: ContentChild, args: [MatTabLabel,] }],\n    _explicitContent: [{ type: ContentChild, args: [MatTabContent, { read: TemplateRef, static: true },] }],\n    _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    textLabel: [{ type: Input, args: ['label',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTab.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTab.prototype._templateLabel;\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     * @type {?}\n     */\n    MatTab.prototype._explicitContent;\n    /**\n     * Template inside the MatTab view that contains an `<ng-content>`.\n     * @type {?}\n     */\n    MatTab.prototype._implicitContent;\n    /**\n     * Plain text label for the tab, used when there is no template label.\n     * @type {?}\n     */\n    MatTab.prototype.textLabel;\n    /**\n     * Aria label for the tab.\n     * @type {?}\n     */\n    MatTab.prototype.ariaLabel;\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     * @type {?}\n     */\n    MatTab.prototype.ariaLabelledby;\n    /**\n     * Portal that will be the hosted content of the tab\n     * @type {?}\n     * @private\n     */\n    MatTab.prototype._contentPortal;\n    /**\n     * Emits whenever the internal state of the tab changes.\n     * @type {?}\n     */\n    MatTab.prototype._stateChanges;\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     * @type {?}\n     */\n    MatTab.prototype.position;\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     * @type {?}\n     */\n    MatTab.prototype.origin;\n    /**\n     * Whether the tab is currently active.\n     * @type {?}\n     */\n    MatTab.prototype.isActive;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTab.prototype._viewContainerRef;\n    /**\n     * @deprecated `_closestTabGroup` parameter to become required.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatTab.prototype._closestTabGroup;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tabs-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material tabs.\n * \\@docs-private\n * @type {?}\n */\nconst matTabsAnimations = {\n    /**\n     * Animation translates a tab along the X axis.\n     */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-body.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The portal host directive for the contents of the tab.\n * \\@docs-private\n */\nclass MatTabBodyPortal extends CdkPortalOutlet {\n    /**\n     * @param {?} componentFactoryResolver\n     * @param {?} viewContainerRef\n     * @param {?} _host\n     * @param {?=} _document\n     */\n    constructor(componentFactoryResolver, viewContainerRef, _host, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super(componentFactoryResolver, viewContainerRef, _document);\n        this._host = _host;\n        /**\n         * Subscription to events for when the tab body begins centering.\n         */\n        this._centeringSub = Subscription.EMPTY;\n        /**\n         * Subscription to events for when the tab body finishes leaving from center position.\n         */\n        this._leavingSub = Subscription.EMPTY;\n    }\n    /**\n     * Set initial visibility or set up subscription for changing visibility.\n     * @return {?}\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        this._centeringSub = this._host._beforeCentering\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n            .subscribe((/**\n         * @param {?} isCentering\n         * @return {?}\n         */\n        (isCentering) => {\n            if (isCentering && !this.hasAttached()) {\n                this.attach(this._host._content);\n            }\n        }));\n        this._leavingSub = this._host._afterLeavingCenter.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.detach();\n        }));\n    }\n    /**\n     * Clean up centering subscription.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._centeringSub.unsubscribe();\n        this._leavingSub.unsubscribe();\n    }\n}\nMatTabBodyPortal.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabBodyHost]'\n            },] }\n];\n/** @nocollapse */\nMatTabBodyPortal.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef((/**\n                     * @return {?}\n                     */\n                    () => MatTabBody)),] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /**\n     * Subscription to events for when the tab body begins centering.\n     * @type {?}\n     * @private\n     */\n    MatTabBodyPortal.prototype._centeringSub;\n    /**\n     * Subscription to events for when the tab body finishes leaving from center position.\n     * @type {?}\n     * @private\n     */\n    MatTabBodyPortal.prototype._leavingSub;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTabBodyPortal.prototype._host;\n}\n/**\n * Base class with all of the `MatTabBody` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatTabBodyBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _dir\n     * @param {?} changeDetectorRef\n     */\n    constructor(_elementRef, _dir, changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        /**\n         * Subscription to the directionality change observable.\n         */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /**\n         * Emits when an animation on the tab is complete.\n         */\n        this._translateTabComplete = new Subject();\n        /**\n         * Event emitted when the tab begins to animate towards the center as the active tab.\n         */\n        this._onCentering = new EventEmitter();\n        /**\n         * Event emitted before the centering of the tab begins.\n         */\n        this._beforeCentering = new EventEmitter();\n        /**\n         * Event emitted before the centering of the tab begins.\n         */\n        this._afterLeavingCenter = new EventEmitter();\n        /**\n         * Event emitted when the tab completes its animation towards the center.\n         */\n        this._onCentered = new EventEmitter(true);\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\n        /**\n         * Duration for the tab's animation.\n         */\n        this.animationDuration = '500ms';\n        if (_dir) {\n            this._dirChangeSubscription = _dir.change.subscribe((/**\n             * @param {?} dir\n             * @return {?}\n             */\n            (dir) => {\n                this._computePositionAnimationState(dir);\n                changeDetectorRef.markForCheck();\n            }));\n        }\n        // Ensure that we get unique animation events, because the `.done` callback can get\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n        this._translateTabComplete.pipe(distinctUntilChanged((/**\n         * @param {?} x\n         * @param {?} y\n         * @return {?}\n         */\n        (x, y) => {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        }))).subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            // If the transition to the center is complete, emit an event.\n            if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n                this._onCentered.emit();\n            }\n            if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n                this._afterLeavingCenter.emit();\n            }\n        }));\n    }\n    /**\n     * The shifted index position of the tab body, where zero represents the active center tab.\n     * @param {?} position\n     * @return {?}\n     */\n    set position(position) {\n        this._positionIndex = position;\n        this._computePositionAnimationState();\n    }\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this._position == 'center' && this.origin != null) {\n            this._position = this._computePositionFromOrigin(this.origin);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dirChangeSubscription.unsubscribe();\n        this._translateTabComplete.complete();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onTranslateTabStarted(event) {\n        /** @type {?} */\n        const isCentering = this._isCenterPosition(event.toState);\n        this._beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n        }\n    }\n    /**\n     * The text direction of the containing app.\n     * @return {?}\n     */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Whether the provided position state is considered center, regardless of origin.\n     * @param {?} position\n     * @return {?}\n     */\n    _isCenterPosition(position) {\n        return position == 'center' ||\n            position == 'left-origin-center' ||\n            position == 'right-origin-center';\n    }\n    /**\n     * Computes the position state that will be used for the tab-body animation trigger.\n     * @private\n     * @param {?=} dir\n     * @return {?}\n     */\n    _computePositionAnimationState(dir = this._getLayoutDirection()) {\n        if (this._positionIndex < 0) {\n            this._position = dir == 'ltr' ? 'left' : 'right';\n        }\n        else if (this._positionIndex > 0) {\n            this._position = dir == 'ltr' ? 'right' : 'left';\n        }\n        else {\n            this._position = 'center';\n        }\n    }\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     * @private\n     * @param {?} origin\n     * @return {?}\n     */\n    _computePositionFromOrigin(origin) {\n        /** @type {?} */\n        const dir = this._getLayoutDirection();\n        if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n            return 'left-origin-center';\n        }\n        return 'right-origin-center';\n    }\n}\n_MatTabBodyBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatTabBodyBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\n_MatTabBodyBase.propDecorators = {\n    _onCentering: [{ type: Output }],\n    _beforeCentering: [{ type: Output }],\n    _afterLeavingCenter: [{ type: Output }],\n    _onCentered: [{ type: Output }],\n    _content: [{ type: Input, args: ['content',] }],\n    origin: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    position: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Current position of the tab-body in the tab-group. Zero means that the tab is visible.\n     * @type {?}\n     * @private\n     */\n    _MatTabBodyBase.prototype._positionIndex;\n    /**\n     * Subscription to the directionality change observable.\n     * @type {?}\n     * @private\n     */\n    _MatTabBodyBase.prototype._dirChangeSubscription;\n    /**\n     * Tab body position state. Used by the animation trigger for the current state.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._position;\n    /**\n     * Emits when an animation on the tab is complete.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._translateTabComplete;\n    /**\n     * Event emitted when the tab begins to animate towards the center as the active tab.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._onCentering;\n    /**\n     * Event emitted before the centering of the tab begins.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._beforeCentering;\n    /**\n     * Event emitted before the centering of the tab begins.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._afterLeavingCenter;\n    /**\n     * Event emitted when the tab completes its animation towards the center.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._onCentered;\n    /**\n     * The portal host inside of this container into which the tab body content will be loaded.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._portalHost;\n    /**\n     * The tab body content to display.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype._content;\n    /**\n     * Position that will be used when the tab is immediately becoming visible after creation.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype.origin;\n    /**\n     * Duration for the tab's animation.\n     * @type {?}\n     */\n    _MatTabBodyBase.prototype.animationDuration;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabBodyBase.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabBodyBase.prototype._dir;\n}\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nclass MatTabBody extends _MatTabBodyBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} dir\n     * @param {?} changeDetectorRef\n     */\n    constructor(elementRef, dir, changeDetectorRef) {\n        super(elementRef, dir, changeDetectorRef);\n    }\n}\nMatTabBody.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-body',\n                template: \"<div class=\\\"mat-tab-body-content\\\" #content\\n     [@translateTab]=\\\"{\\n        value: _position,\\n        params: {animationDuration: animationDuration}\\n     }\\\"\\n     (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\"\\n     (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\">\\n  <ng-template matTabBodyHost></ng-template>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matTabsAnimations.translateTab],\n                host: {\n                    'class': 'mat-tab-body',\n                },\n                styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatTabBody.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef }\n];\nMatTabBody.propDecorators = {\n    _portalHost: [{ type: ViewChild, args: [PortalHostDirective,] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTabBody.prototype._portalHost;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the default options for the tabs module.\n * @record\n */\nfunction MatTabsConfig() { }\nif (false) {\n    /**\n     * Duration for the tab animation. Must be a valid CSS value (e.g. 600ms).\n     * @type {?|undefined}\n     */\n    MatTabsConfig.prototype.animationDuration;\n    /**\n     * Whether pagination should be disabled. This can be used to avoid unnecessary\n     * layout recalculations if it's known that pagination won't be required.\n     * @type {?|undefined}\n     */\n    MatTabsConfig.prototype.disablePagination;\n    /**\n     * Whether the ink bar should fit its width to the size of the tab label content.\n     * This only applies to the MDC-based tabs.\n     * @type {?|undefined}\n     */\n    MatTabsConfig.prototype.fitInkBarToContent;\n}\n/**\n * Injection token that can be used to provide the default options the tabs module.\n * @type {?}\n */\nconst MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used to generate unique ID's for each tab component\n * @type {?}\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nclass MatTabChangeEvent {\n}\nif (false) {\n    /**\n     * Index of the currently-selected tab.\n     * @type {?}\n     */\n    MatTabChangeEvent.prototype.index;\n    /**\n     * Reference to the currently-selected tab.\n     * @type {?}\n     */\n    MatTabChangeEvent.prototype.tab;\n}\n// Boilerplate for applying mixins to MatTabGroup.\n/**\n * \\@docs-private\n */\nclass MatTabGroupMixinBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatTabGroupMixinBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\n/**\n * @record\n */\nfunction MatTabGroupBaseHeader() { }\nif (false) {\n    /** @type {?} */\n    MatTabGroupBaseHeader.prototype._alignInkBarToSelectedTab;\n    /** @type {?} */\n    MatTabGroupBaseHeader.prototype.focusIndex;\n}\n/**\n * Base class with all of the `MatTabGroupBase` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatTabGroupBase extends _MatTabGroupMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?=} defaultConfig\n     * @param {?=} _animationMode\n     */\n    constructor(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        /**\n         * All of the tabs that belong to the group.\n         */\n        this._tabs = new QueryList();\n        /**\n         * The tab index that should be selected after the content has been checked.\n         */\n        this._indexToSelect = 0;\n        /**\n         * Snapshot of the height of the tab body wrapper before another tab is activated.\n         */\n        this._tabBodyWrapperHeight = 0;\n        /**\n         * Subscription to tabs being added/removed.\n         */\n        this._tabsSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to changes in the tab labels.\n         */\n        this._tabLabelSubscription = Subscription.EMPTY;\n        this._dynamicHeight = false;\n        this._selectedIndex = null;\n        /**\n         * Position of the tab header.\n         */\n        this.headerPosition = 'above';\n        /**\n         * Output to enable support for two-way binding on `[(selectedIndex)]`\n         */\n        this.selectedIndexChange = new EventEmitter();\n        /**\n         * Event emitted when focus has changed within a tab group.\n         */\n        this.focusChange = new EventEmitter();\n        /**\n         * Event emitted when the body animation has completed\n         */\n        this.animationDone = new EventEmitter();\n        /**\n         * Event emitted when the tab selection has changed.\n         */\n        this.selectedTabChange = new EventEmitter(true);\n        this._groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '500ms';\n        this.disablePagination = defaultConfig && defaultConfig.disablePagination != null ?\n            defaultConfig.disablePagination : false;\n    }\n    /**\n     * Whether the tab group should grow to the size of the active tab.\n     * @return {?}\n     */\n    get dynamicHeight() { return this._dynamicHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dynamicHeight(value) { this._dynamicHeight = coerceBooleanProperty(value); }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n    get selectedIndex() { return this._selectedIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectedIndex(value) {\n        this._indexToSelect = coerceNumberProperty(value, null);\n    }\n    /**\n     * Duration for the tab animation. Will be normalized to milliseconds if no units are set.\n     * @return {?}\n     */\n    get animationDuration() { return this._animationDuration; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set animationDuration(value) {\n        this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\n    }\n    /**\n     * Background color of the tab group.\n     * @return {?}\n     */\n    get backgroundColor() { return this._backgroundColor; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set backgroundColor(value) {\n        /** @type {?} */\n        const nativeElement = this._elementRef.nativeElement;\n        nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            nativeElement.classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        /** @type {?} */\n        const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex != indexToSelect) {\n            /** @type {?} */\n            const isFirstRun = this._selectedIndex == null;\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n            }\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then((/**\n             * @return {?}\n             */\n            () => {\n                this._tabs.forEach((/**\n                 * @param {?} tab\n                 * @param {?} index\n                 * @return {?}\n                 */\n                (tab, index) => tab.isActive = index === indexToSelect));\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            }));\n        }\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this._tabs.forEach((/**\n         * @param {?} tab\n         * @param {?} index\n         * @return {?}\n         */\n        (tab, index) => {\n            tab.position = index - indexToSelect;\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        }));\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._subscribeToAllTabChanges();\n        this._subscribeToTabLabels();\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this._tabsSubscription = this._tabs.changes.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const indexToSelect = this._clampTabIndex(this._indexToSelect);\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                /** @type {?} */\n                const tabs = this._tabs.toArray();\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this._indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Listens to changes in all of the tabs.\n     * @private\n     * @return {?}\n     */\n    _subscribeToAllTabChanges() {\n        // Since we use a query with `descendants: true` to pick up the tabs, we may end up catching\n        // some that are inside of nested tab groups. We filter them out manually by checking that\n        // the closest group to the tab is the current one.\n        this._allTabs.changes\n            .pipe(startWith(this._allTabs))\n            .subscribe((/**\n         * @param {?} tabs\n         * @return {?}\n         */\n        (tabs) => {\n            this._tabs.reset(tabs.filter((/**\n             * @param {?} tab\n             * @return {?}\n             */\n            tab => {\n                // @breaking-change 10.0.0 Remove null check for `_closestTabGroup`\n                // once it becomes a required parameter in MatTab.\n                return !tab._closestTabGroup || tab._closestTabGroup === this;\n            })));\n            this._tabs.notifyOnChanges();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._tabs.destroy();\n        this._tabsSubscription.unsubscribe();\n        this._tabLabelSubscription.unsubscribe();\n    }\n    /**\n     * Re-aligns the ink bar to the selected tab element.\n     * @return {?}\n     */\n    realignInkBar() {\n        if (this._tabHeader) {\n            this._tabHeader._alignInkBarToSelectedTab();\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    _focusChanged(index) {\n        this.focusChange.emit(this._createChangeEvent(index));\n    }\n    /**\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _createChangeEvent(index) {\n        /** @type {?} */\n        const event = new MatTabChangeEvent;\n        event.index = index;\n        if (this._tabs && this._tabs.length) {\n            event.tab = this._tabs.toArray()[index];\n        }\n        return event;\n    }\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     * @private\n     * @return {?}\n     */\n    _subscribeToTabLabels() {\n        if (this._tabLabelSubscription) {\n            this._tabLabelSubscription.unsubscribe();\n        }\n        this._tabLabelSubscription = merge(...this._tabs.map((/**\n         * @param {?} tab\n         * @return {?}\n         */\n        tab => tab._stateChanges)))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._changeDetectorRef.markForCheck()));\n    }\n    /**\n     * Clamps the given index to the bounds of 0 and the tabs length.\n     * @private\n     * @param {?} index\n     * @return {?}\n     */\n    _clampTabIndex(index) {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Math.max(NaN, 0) === NaN).\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n    }\n    /**\n     * Returns a unique id for each tab label element\n     * @param {?} i\n     * @return {?}\n     */\n    _getTabLabelId(i) {\n        return `mat-tab-label-${this._groupId}-${i}`;\n    }\n    /**\n     * Returns a unique id for each tab content element\n     * @param {?} i\n     * @return {?}\n     */\n    _getTabContentId(i) {\n        return `mat-tab-content-${this._groupId}-${i}`;\n    }\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     * @param {?} tabHeight\n     * @return {?}\n     */\n    _setTabBodyWrapperHeight(tabHeight) {\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\n            return;\n        }\n        /** @type {?} */\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = tabHeight + 'px';\n        }\n    }\n    /**\n     * Removes the height of the tab body wrapper.\n     * @return {?}\n     */\n    _removeTabBodyWrapperHeight() {\n        /** @type {?} */\n        const wrapper = this._tabBodyWrapper.nativeElement;\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\n        wrapper.style.height = '';\n        this.animationDone.emit();\n    }\n    /**\n     * Handle click events, setting new selected index if appropriate.\n     * @param {?} tab\n     * @param {?} tabHeader\n     * @param {?} index\n     * @return {?}\n     */\n    _handleClick(tab, tabHeader, index) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n    /**\n     * Retrieves the tabindex for the tab.\n     * @param {?} tab\n     * @param {?} idx\n     * @return {?}\n     */\n    _getTabIndex(tab, idx) {\n        if (tab.disabled) {\n            return null;\n        }\n        return this.selectedIndex === idx ? 0 : -1;\n    }\n}\n_MatTabGroupBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatTabGroupBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabGroupBase.propDecorators = {\n    dynamicHeight: [{ type: Input }],\n    selectedIndex: [{ type: Input }],\n    headerPosition: [{ type: Input }],\n    animationDuration: [{ type: Input }],\n    disablePagination: [{ type: Input }],\n    backgroundColor: [{ type: Input }],\n    selectedIndexChange: [{ type: Output }],\n    focusChange: [{ type: Output }],\n    animationDone: [{ type: Output }],\n    selectedTabChange: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    _MatTabGroupBase.ngAcceptInputType_dynamicHeight;\n    /** @type {?} */\n    _MatTabGroupBase.ngAcceptInputType_animationDuration;\n    /** @type {?} */\n    _MatTabGroupBase.ngAcceptInputType_selectedIndex;\n    /** @type {?} */\n    _MatTabGroupBase.ngAcceptInputType_disableRipple;\n    /**\n     * All tabs inside the tab group. This includes tabs that belong to groups that are nested\n     * inside the current one. We filter out only the tabs that belong to this group in `_tabs`.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype._allTabs;\n    /** @type {?} */\n    _MatTabGroupBase.prototype._tabBodyWrapper;\n    /** @type {?} */\n    _MatTabGroupBase.prototype._tabHeader;\n    /**\n     * All of the tabs that belong to the group.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype._tabs;\n    /**\n     * The tab index that should be selected after the content has been checked.\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._indexToSelect;\n    /**\n     * Snapshot of the height of the tab body wrapper before another tab is activated.\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._tabBodyWrapperHeight;\n    /**\n     * Subscription to tabs being added/removed.\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._tabsSubscription;\n    /**\n     * Subscription to changes in the tab labels.\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._tabLabelSubscription;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._dynamicHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._selectedIndex;\n    /**\n     * Position of the tab header.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.headerPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._animationDuration;\n    /**\n     * Whether pagination should be disabled. This can be used to avoid unnecessary\n     * layout recalculations if it's known that pagination won't be required.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.disablePagination;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._backgroundColor;\n    /**\n     * Output to enable support for two-way binding on `[(selectedIndex)]`\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.selectedIndexChange;\n    /**\n     * Event emitted when focus has changed within a tab group.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.focusChange;\n    /**\n     * Event emitted when the body animation has completed\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.animationDone;\n    /**\n     * Event emitted when the tab selection has changed.\n     * @type {?}\n     */\n    _MatTabGroupBase.prototype.selectedTabChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabGroupBase.prototype._groupId;\n    /**\n     * @type {?}\n     * @protected\n     */\n    _MatTabGroupBase.prototype._changeDetectorRef;\n    /** @type {?} */\n    _MatTabGroupBase.prototype._animationMode;\n}\n/**\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\nclass MatTabGroup extends _MatTabGroupBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} changeDetectorRef\n     * @param {?=} defaultConfig\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, changeDetectorRef, defaultConfig, animationMode) {\n        super(elementRef, changeDetectorRef, defaultConfig, animationMode);\n    }\n}\nMatTabGroup.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-group',\n                exportAs: 'matTabGroup',\n                template: \"<mat-tab-header #tabHeader\\n               [selectedIndex]=\\\"selectedIndex || 0\\\"\\n               [disableRipple]=\\\"disableRipple\\\"\\n               [disablePagination]=\\\"disablePagination\\\"\\n               (indexFocused)=\\\"_focusChanged($event)\\\"\\n               (selectFocusedIndex)=\\\"selectedIndex = $event\\\">\\n  <div class=\\\"mat-tab-label mat-focus-indicator\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus\\n       *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n       [id]=\\\"_getTabLabelId(i)\\\"\\n       [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\"\\n       [attr.aria-posinset]=\\\"i + 1\\\"\\n       [attr.aria-setsize]=\\\"_tabs.length\\\"\\n       [attr.aria-controls]=\\\"_getTabContentId(i)\\\"\\n       [attr.aria-selected]=\\\"selectedIndex == i\\\"\\n       [attr.aria-label]=\\\"tab.ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\"\\n       [class.mat-tab-label-active]=\\\"selectedIndex == i\\\"\\n       [disabled]=\\\"tab.disabled\\\"\\n       [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\"\\n       (click)=\\\"_handleClick(tab, tabHeader, i)\\\">\\n\\n\\n    <div class=\\\"mat-tab-label-content\\\">\\n      <!-- If there is a label template, use it. -->\\n      <ng-template [ngIf]=\\\"tab.templateLabel\\\">\\n        <ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template>\\n      </ng-template>\\n\\n      <!-- If there is not a label template, fall back to the text label. -->\\n      <ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template>\\n    </div>\\n  </div>\\n</mat-tab-header>\\n\\n<div\\n  class=\\\"mat-tab-body-wrapper\\\"\\n  [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n  #tabBodyWrapper>\\n  <mat-tab-body role=\\\"tabpanel\\\"\\n               *ngFor=\\\"let tab of _tabs; let i = index\\\"\\n               [id]=\\\"_getTabContentId(i)\\\"\\n               [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\"\\n               [class.mat-tab-body-active]=\\\"selectedIndex == i\\\"\\n               [content]=\\\"tab.content!\\\"\\n               [position]=\\\"tab.position!\\\"\\n               [origin]=\\\"tab.origin\\\"\\n               [animationDuration]=\\\"animationDuration\\\"\\n               (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\"\\n               (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\">\\n  </mat-tab-body>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                inputs: ['color', 'disableRipple'],\n                providers: [{\n                        provide: MAT_TAB_GROUP,\n                        useExisting: MatTabGroup\n                    }],\n                host: {\n                    'class': 'mat-tab-group',\n                    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n                    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n                },\n                styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{padding:0 12px}}@media(max-width: 959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height 500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatTabGroup.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabGroup.propDecorators = {\n    _allTabs: [{ type: ContentChildren, args: [MatTab, { descendants: true },] }],\n    _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper',] }],\n    _tabHeader: [{ type: ViewChild, args: ['tabHeader',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTabGroup.prototype._allTabs;\n    /** @type {?} */\n    MatTabGroup.prototype._tabBodyWrapper;\n    /** @type {?} */\n    MatTabGroup.prototype._tabHeader;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-label-wrapper.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/**\n * \\@docs-private\n */\nclass MatTabLabelWrapperBase {\n}\n/** @type {?} */\nconst _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\nclass MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase {\n    /**\n     * @param {?} elementRef\n     */\n    constructor(elementRef) {\n        super();\n        this.elementRef = elementRef;\n    }\n    /**\n     * Sets focus on the wrapper element\n     * @return {?}\n     */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    getOffsetLeft() {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n    /**\n     * @return {?}\n     */\n    getOffsetWidth() {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\nMatTabLabelWrapper.decorators = [\n    { type: Directive, args: [{\n                selector: '[matTabLabelWrapper]',\n                inputs: ['disabled'],\n                host: {\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[attr.aria-disabled]': '!!disabled',\n                }\n            },] }\n];\n/** @nocollapse */\nMatTabLabelWrapper.ctorParameters = () => [\n    { type: ElementRef }\n];\nif (false) {\n    /** @type {?} */\n    MatTabLabelWrapper.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTabLabelWrapper.prototype.elementRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/paginated-tab-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Config used to bind passive event listeners\n * @type {?}\n */\nconst passiveEventListenerOptions = (/** @type {?} */ (normalizePassiveListenerOptions({ passive: true })));\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n * @type {?}\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * Amount of milliseconds to wait before starting to scroll the header automatically.\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\n * @type {?}\n */\nconst HEADER_SCROLL_DELAY = 650;\n/**\n * Interval in milliseconds at which to scroll the header\n * while the user is holding their pointer.\n * @type {?}\n */\nconst HEADER_SCROLL_INTERVAL = 100;\n/**\n * Base class for a tab header that supported pagination.\n * \\@docs-private\n * @abstract\n */\nclass MatPaginatedTabHeader {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _viewportRuler\n     * @param {?} _dir\n     * @param {?} _ngZone\n     * @param {?=} _platform\n     * @param {?=} _animationMode\n     */\n    constructor(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._viewportRuler = _viewportRuler;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._animationMode = _animationMode;\n        /**\n         * The distance in pixels that the tab labels should be translated to the left.\n         */\n        this._scrollDistance = 0;\n        /**\n         * Whether the header should scroll to the selected index after the view has been checked.\n         */\n        this._selectedIndexChanged = false;\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Whether the controls for pagination should be displayed\n         */\n        this._showPaginationControls = false;\n        /**\n         * Whether the tab list can be scrolled more towards the end of the tab label list.\n         */\n        this._disableScrollAfter = true;\n        /**\n         * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n         */\n        this._disableScrollBefore = true;\n        /**\n         * Stream that will stop the automated scrolling.\n         */\n        this._stopScrolling = new Subject();\n        /**\n         * Whether pagination should be disabled. This can be used to avoid unnecessary\n         * layout recalculations if it's known that pagination won't be required.\n         */\n        this.disablePagination = false;\n        this._selectedIndex = 0;\n        /**\n         * Event emitted when the option is selected.\n         */\n        this.selectFocusedIndex = new EventEmitter();\n        /**\n         * Event emitted when a label is focused.\n         */\n        this.indexFocused = new EventEmitter();\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\n        _ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\n                .pipe(takeUntil(this._destroyed))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._stopInterval();\n            }));\n        }));\n    }\n    /**\n     * The index of the active tab.\n     * @return {?}\n     */\n    get selectedIndex() { return this._selectedIndex; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set selectedIndex(value) {\n        value = coerceNumberProperty(value);\n        if (this._selectedIndex != value) {\n            this._selectedIndexChanged = true;\n            this._selectedIndex = value;\n            if (this._keyManager) {\n                this._keyManager.updateActiveItem(value);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to handle these events manually, because we want to bind passive event listeners.\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._handlePaginatorPress('before');\n        }));\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._handlePaginatorPress('after');\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        /** @type {?} */\n        const dirChange = this._dir ? this._dir.change : of(null);\n        /** @type {?} */\n        const resize = this._viewportRuler.change(150);\n        /** @type {?} */\n        const realign = (/**\n         * @return {?}\n         */\n        () => {\n            this.updatePagination();\n            this._alignInkBarToSelectedTab();\n        });\n        this._keyManager = new FocusKeyManager(this._items)\n            .withHorizontalOrientation(this._getLayoutDirection())\n            .withWrap();\n        this._keyManager.updateActiveItem(0);\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n        // On dir change or window resize, realign the ink bar and update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            // We need to defer this to give the browser some time to recalculate the element dimensions.\n            Promise.resolve().then(realign);\n            this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n        }));\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} newFocusIndex\n         * @return {?}\n         */\n        newFocusIndex => {\n            this.indexFocused.emit(newFocusIndex);\n            this._setTabFocus(newFocusIndex);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this._tabLabelCount != this._items.length) {\n            this.updatePagination();\n            this._tabLabelCount = this._items.length;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this._selectedIndexChanged) {\n            this._scrollToLabel(this._selectedIndex);\n            this._checkScrollingControls();\n            this._alignInkBarToSelectedTab();\n            this._selectedIndexChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this._scrollDistanceChanged) {\n            this._updateTabScrollPosition();\n            this._scrollDistanceChanged = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._stopScrolling.complete();\n    }\n    /**\n     * Handles keyboard events on the header.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        // We don't handle any key bindings with a modifier key.\n        if (hasModifierKey(event)) {\n            return;\n        }\n        switch (event.keyCode) {\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                if (this.focusIndex !== this.selectedIndex) {\n                    this.selectFocusedIndex.emit(this.focusIndex);\n                    this._itemSelected(event);\n                }\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     * @return {?}\n     */\n    _onContentChanges() {\n        /** @type {?} */\n        const textContent = this._elementRef.nativeElement.textContent;\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\n        if (textContent !== this._currentTextContent) {\n            this._currentTextContent = textContent || '';\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.updatePagination();\n                this._alignInkBarToSelectedTab();\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the view whether pagination should be enabled or not.\n     *\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     * @return {?}\n     */\n    updatePagination() {\n        this._checkPaginationEnabled();\n        this._checkScrollingControls();\n        this._updateTabScrollPosition();\n    }\n    /**\n     * Tracks which element has focus; used for keyboard navigation\n     * @return {?}\n     */\n    get focusIndex() {\n        return this._keyManager ? (/** @type {?} */ (this._keyManager.activeItemIndex)) : 0;\n    }\n    /**\n     * When the focus index is set, we must manually send focus to the correct label\n     * @param {?} value\n     * @return {?}\n     */\n    set focusIndex(value) {\n        if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n            return;\n        }\n        this._keyManager.setActiveItem(value);\n    }\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     * @param {?} index\n     * @return {?}\n     */\n    _isValidIndex(index) {\n        if (!this._items) {\n            return true;\n        }\n        /** @type {?} */\n        const tab = this._items ? this._items.toArray()[index] : null;\n        return !!tab && !tab.disabled;\n    }\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     * @param {?} tabIndex\n     * @return {?}\n     */\n    _setTabFocus(tabIndex) {\n        if (this._showPaginationControls) {\n            this._scrollToLabel(tabIndex);\n        }\n        if (this._items && this._items.length) {\n            this._items.toArray()[tabIndex].focus();\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            /** @type {?} */\n            const containerEl = this._tabListContainer.nativeElement;\n            /** @type {?} */\n            const dir = this._getLayoutDirection();\n            if (dir == 'ltr') {\n                containerEl.scrollLeft = 0;\n            }\n            else {\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n    /**\n     * The layout direction of the containing app.\n     * @return {?}\n     */\n    _getLayoutDirection() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /**\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\n     * @return {?}\n     */\n    _updateTabScrollPosition() {\n        if (this.disablePagination) {\n            return;\n        }\n        /** @type {?} */\n        const scrollDistance = this.scrollDistance;\n        /** @type {?} */\n        const platform = this._platform;\n        /** @type {?} */\n        const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n        // and ripples will exceed the boundaries of the visible tab bar.\n        // See: https://github.com/angular/components/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this._tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\n        // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\n        if (platform && (platform.TRIDENT || platform.EDGE)) {\n            this._tabListContainer.nativeElement.scrollLeft = 0;\n        }\n    }\n    /**\n     * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n     * @return {?}\n     */\n    get scrollDistance() { return this._scrollDistance; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set scrollDistance(value) {\n        this._scrollTo(value);\n    }\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} direction\n     * @return {?}\n     */\n    _scrollHeader(direction) {\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        /** @type {?} */\n        const scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\n        return this._scrollTo(this._scrollDistance + scrollAmount);\n    }\n    /**\n     * Handles click events on the pagination arrows.\n     * @param {?} direction\n     * @return {?}\n     */\n    _handlePaginatorClick(direction) {\n        this._stopInterval();\n        this._scrollHeader(direction);\n    }\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @param {?} labelIndex\n     * @return {?}\n     */\n    _scrollToLabel(labelIndex) {\n        if (this.disablePagination) {\n            return;\n        }\n        /** @type {?} */\n        const selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\n        if (!selectedLabel) {\n            return;\n        }\n        // The view length is the visible width of the tab labels.\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        const { offsetLeft, offsetWidth } = selectedLabel.elementRef.nativeElement;\n        /** @type {?} */\n        let labelBeforePos;\n        /** @type {?} */\n        let labelAfterPos;\n        if (this._getLayoutDirection() == 'ltr') {\n            labelBeforePos = offsetLeft;\n            labelAfterPos = labelBeforePos + offsetWidth;\n        }\n        else {\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\n            labelBeforePos = labelAfterPos - offsetWidth;\n        }\n        /** @type {?} */\n        const beforeVisiblePos = this.scrollDistance;\n        /** @type {?} */\n        const afterVisiblePos = this.scrollDistance + viewLength;\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        }\n        else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _checkPaginationEnabled() {\n        if (this.disablePagination) {\n            this._showPaginationControls = false;\n        }\n        else {\n            /** @type {?} */\n            const isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n            if (!isEnabled) {\n                this.scrollDistance = 0;\n            }\n            if (isEnabled !== this._showPaginationControls) {\n                this._changeDetectorRef.markForCheck();\n            }\n            this._showPaginationControls = isEnabled;\n        }\n    }\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _checkScrollingControls() {\n        if (this.disablePagination) {\n            this._disableScrollAfter = this._disableScrollBefore = true;\n        }\n        else {\n            // Check if the pagination arrows should be activated.\n            this._disableScrollBefore = this.scrollDistance == 0;\n            this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     * @return {?}\n     */\n    _getMaxScrollDistance() {\n        /** @type {?} */\n        const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n        /** @type {?} */\n        const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n        return (lengthOfTabList - viewLength) || 0;\n    }\n    /**\n     * Tells the ink-bar to align itself to the current label wrapper\n     * @return {?}\n     */\n    _alignInkBarToSelectedTab() {\n        /** @type {?} */\n        const selectedItem = this._items && this._items.length ?\n            this._items.toArray()[this.selectedIndex] : null;\n        /** @type {?} */\n        const selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\n        if (selectedLabelWrapper) {\n            this._inkBar.alignToElement(selectedLabelWrapper);\n        }\n        else {\n            this._inkBar.hide();\n        }\n    }\n    /**\n     * Stops the currently-running paginator interval.\n     * @return {?}\n     */\n    _stopInterval() {\n        this._stopScrolling.next();\n    }\n    /**\n     * Handles the user pressing down on one of the paginators.\n     * Starts scrolling the header after a certain amount of time.\n     * @param {?} direction In which direction the paginator should be scrolled.\n     * @param {?=} mouseEvent\n     * @return {?}\n     */\n    _handlePaginatorPress(direction, mouseEvent) {\n        // Don't start auto scrolling for right mouse button clicks. Note that we shouldn't have to\n        // null check the `button`, but we do it so we don't break tests that use fake events.\n        if (mouseEvent && mouseEvent.button != null && mouseEvent.button !== 0) {\n            return;\n        }\n        // Avoid overlapping timers.\n        this._stopInterval();\n        // Start a timer after the delay and keep firing based on the interval.\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\n            // Keep the timer going until something tells it to stop or the component is destroyed.\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            const { maxScrollDistance, distance } = this._scrollHeader(direction);\n            // Stop the timer if we've reached the start or the end.\n            if (distance === 0 || distance >= maxScrollDistance) {\n                this._stopInterval();\n            }\n        }));\n    }\n    /**\n     * Scrolls the header to a given position.\n     * @private\n     * @param {?} position Position to which to scroll.\n     * @return {?} Information on the current scroll distance and the maximum.\n     */\n    _scrollTo(position) {\n        if (this.disablePagination) {\n            return { maxScrollDistance: 0, distance: 0 };\n        }\n        /** @type {?} */\n        const maxScrollDistance = this._getMaxScrollDistance();\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this._scrollDistanceChanged = true;\n        this._checkScrollingControls();\n        return { maxScrollDistance, distance: this._scrollDistance };\n    }\n}\nMatPaginatedTabHeader.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\nMatPaginatedTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatPaginatedTabHeader.propDecorators = {\n    disablePagination: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    MatPaginatedTabHeader.ngAcceptInputType_selectedIndex;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._items;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._inkBar;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._tabListContainer;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._tabList;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._nextPaginator;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._previousPaginator;\n    /**\n     * The distance in pixels that the tab labels should be translated to the left.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._scrollDistance;\n    /**\n     * Whether the header should scroll to the selected index after the view has been checked.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._selectedIndexChanged;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @protected\n     */\n    MatPaginatedTabHeader.prototype._destroyed;\n    /**\n     * Whether the controls for pagination should be displayed\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype._showPaginationControls;\n    /**\n     * Whether the tab list can be scrolled more towards the end of the tab label list.\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype._disableScrollAfter;\n    /**\n     * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype._disableScrollBefore;\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._tabLabelCount;\n    /**\n     * Whether the scroll distance has changed and should be applied after the view is checked.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._scrollDistanceChanged;\n    /**\n     * Used to manage focus between the tabs.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._keyManager;\n    /**\n     * Cached text content of the header.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._currentTextContent;\n    /**\n     * Stream that will stop the automated scrolling.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._stopScrolling;\n    /**\n     * Whether pagination should be disabled. This can be used to avoid unnecessary\n     * layout recalculations if it's known that pagination won't be required.\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype.disablePagination;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._selectedIndex;\n    /**\n     * Event emitted when the option is selected.\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype.selectFocusedIndex;\n    /**\n     * Event emitted when a label is focused.\n     * @type {?}\n     */\n    MatPaginatedTabHeader.prototype.indexFocused;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatPaginatedTabHeader.prototype._elementRef;\n    /**\n     * @type {?}\n     * @protected\n     */\n    MatPaginatedTabHeader.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._ngZone;\n    /**\n     * @deprecated \\@breaking-change 9.0.0 `_platform` and `_animationMode`\n     * parameters to become required.\n     * @type {?}\n     * @private\n     */\n    MatPaginatedTabHeader.prototype._platform;\n    /** @type {?} */\n    MatPaginatedTabHeader.prototype._animationMode;\n    /**\n     * Called when the user has selected an item via the keyboard.\n     * @abstract\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n    MatPaginatedTabHeader.prototype._itemSelected = function (event) { };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-header.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class with all of the `MatTabHeader` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatTabHeaderBase extends MatPaginatedTabHeader {\n    /**\n     * @param {?} elementRef\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n    get disableRipple() { return this._disableRipple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    /**\n     * @protected\n     * @param {?} event\n     * @return {?}\n     */\n    _itemSelected(event) {\n        event.preventDefault();\n    }\n}\n_MatTabHeaderBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatTabHeaderBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabHeaderBase.propDecorators = {\n    disableRipple: [{ type: Input }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabHeaderBase.prototype._disableRipple;\n}\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nclass MatTabHeader extends _MatTabHeaderBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\n    animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n    }\n}\nMatTabHeader.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-tab-header',\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    #tabList\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    role=\\\"tablist\\\"\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-labels\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                inputs: ['selectedIndex'],\n                outputs: ['selectFocusedIndex', 'indexFocused'],\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                host: {\n                    'class': 'mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                },\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-labels{display:flex}[mat-align-tabs=center]>.mat-tab-header .mat-tab-labels{justify-content:center}[mat-align-tabs=end]>.mat-tab-header .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:none}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-label:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-label.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-label.mat-tab-disabled{opacity:.5}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-label{opacity:1}@media(max-width: 599px){.mat-tab-label{min-width:72px}}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatTabHeader.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: Platform },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabHeader.propDecorators = {\n    _items: [{ type: ContentChildren, args: [MatTabLabelWrapper, { descendants: false },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTabHeader.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatTabHeader.prototype._items;\n    /** @type {?} */\n    MatTabHeader.prototype._inkBar;\n    /** @type {?} */\n    MatTabHeader.prototype._tabListContainer;\n    /** @type {?} */\n    MatTabHeader.prototype._tabList;\n    /** @type {?} */\n    MatTabHeader.prototype._nextPaginator;\n    /** @type {?} */\n    MatTabHeader.prototype._previousPaginator;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-nav-bar/tab-nav-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Base class with all of the `MatTabNav` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatTabNavBase extends MatPaginatedTabHeader {\n    /**\n     * @param {?} elementRef\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    platform, animationMode) {\n        super(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode);\n        this._disableRipple = false;\n        /**\n         * Theme color of the nav bar.\n         */\n        this.color = 'primary';\n    }\n    /**\n     * Background color of the tab nav.\n     * @return {?}\n     */\n    get backgroundColor() { return this._backgroundColor; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set backgroundColor(value) {\n        /** @type {?} */\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-background-${this.backgroundColor}`);\n        if (value) {\n            classList.add(`mat-background-${value}`);\n        }\n        this._backgroundColor = value;\n    }\n    /**\n     * Whether the ripple effect is disabled or not.\n     * @return {?}\n     */\n    get disableRipple() { return this._disableRipple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\n    /**\n     * @protected\n     * @return {?}\n     */\n    _itemSelected() {\n        // noop\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // We need this to run before the `changes` subscription in parent to ensure that the\n        // selectedIndex is up-to-date by the time the super class starts looking for it.\n        this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.updateActiveLink();\n        }));\n        super.ngAfterContentInit();\n    }\n    /**\n     * Notifies the component that the active link has been changed.\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\n     * @param {?=} _element\n     * @return {?}\n     */\n    updateActiveLink(_element) {\n        if (!this._items) {\n            return;\n        }\n        /** @type {?} */\n        const items = this._items.toArray();\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].active) {\n                this.selectedIndex = i;\n                this._changeDetectorRef.markForCheck();\n                return;\n            }\n        }\n        // The ink bar should hide itself if no items are active.\n        this.selectedIndex = -1;\n        this._inkBar.hide();\n    }\n}\n_MatTabNavBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatTabNavBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabNavBase.propDecorators = {\n    backgroundColor: [{ type: Input }],\n    disableRipple: [{ type: Input }],\n    color: [{ type: Input }]\n};\nif (false) {\n    /**\n     * Query list of all tab links of the tab navigation.\n     * @type {?}\n     */\n    _MatTabNavBase.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabNavBase.prototype._backgroundColor;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabNavBase.prototype._disableRipple;\n    /**\n     * Theme color of the nav bar.\n     * @type {?}\n     */\n    _MatTabNavBase.prototype.color;\n}\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nclass MatTabNav extends _MatTabNavBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} dir\n     * @param {?} ngZone\n     * @param {?} changeDetectorRef\n     * @param {?} viewportRuler\n     * @param {?=} platform\n     * @param {?=} animationMode\n     */\n    constructor(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \n    /**\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\n     */\n    platform, animationMode) {\n        super(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode);\n    }\n}\nMatTabNav.decorators = [\n    { type: Component, args: [{\n                selector: '[mat-tab-nav-bar]',\n                exportAs: 'matTabNavBar, matTabNav',\n                inputs: ['color'],\n                template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\"\\n     #previousPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\"\\n     (click)=\\\"_handlePaginatorClick('before')\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('before', $event)\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\\n<div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\">\\n  <div\\n    class=\\\"mat-tab-list\\\"\\n    [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\"\\n    #tabList\\n    (cdkObserveContent)=\\\"_onContentChanges()\\\">\\n    <div class=\\\"mat-tab-links\\\">\\n      <ng-content></ng-content>\\n    </div>\\n    <mat-ink-bar></mat-ink-bar>\\n  </div>\\n</div>\\n\\n<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\"\\n     #nextPaginator\\n     aria-hidden=\\\"true\\\"\\n     mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\"\\n     [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\"\\n     (mousedown)=\\\"_handlePaginatorPress('after', $event)\\\"\\n     (click)=\\\"_handlePaginatorClick('after')\\\"\\n     (touchend)=\\\"_stopInterval()\\\">\\n  <div class=\\\"mat-tab-header-pagination-chevron\\\"></div>\\n</div>\\n\",\n                host: {\n                    'class': 'mat-tab-nav-bar mat-tab-header',\n                    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n                    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n                    '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                },\n                encapsulation: ViewEncapsulation.None,\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-rtl .mat-tab-header-pagination-before,.mat-tab-header-pagination-after{padding-right:4px}.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:\\\"\\\";height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform 500ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-tab-links{display:flex}[mat-align-tabs=center]>.mat-tab-link-container .mat-tab-links{justify-content:center}[mat-align-tabs=end]>.mat-tab-link-container .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:500ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}.cdk-high-contrast-active .mat-ink-bar{outline:solid 2px;height:0}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:none}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}.cdk-high-contrast-active .mat-tab-link:focus{outline:dotted 2px;outline-offset:-2px}.mat-tab-link.mat-tab-disabled{cursor:default}.cdk-high-contrast-active .mat-tab-link.mat-tab-disabled{opacity:.5}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}.cdk-high-contrast-active .mat-tab-link{opacity:1}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media(max-width: 599px){.mat-tab-link{min-width:72px}}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatTabNav.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: ViewportRuler },\n    { type: Platform, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatTabNav.propDecorators = {\n    _items: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatTabLink)), { descendants: true },] }],\n    _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\n    _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\n    _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\n    _nextPaginator: [{ type: ViewChild, args: ['nextPaginator',] }],\n    _previousPaginator: [{ type: ViewChild, args: ['previousPaginator',] }]\n};\nif (false) {\n    /** @type {?} */\n    MatTabNav.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatTabNav.prototype._items;\n    /** @type {?} */\n    MatTabNav.prototype._inkBar;\n    /** @type {?} */\n    MatTabNav.prototype._tabListContainer;\n    /** @type {?} */\n    MatTabNav.prototype._tabList;\n    /** @type {?} */\n    MatTabNav.prototype._nextPaginator;\n    /** @type {?} */\n    MatTabNav.prototype._previousPaginator;\n}\n// Boilerplate for applying mixins to MatTabLink.\nclass MatTabLinkMixinBase {\n}\n/** @type {?} */\nconst _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\n/**\n * Base class with all of the `MatTabLink` functionality.\n */\n// tslint:disable-next-line:class-name\nclass _MatTabLinkBase extends _MatTabLinkMixinBase {\n    /**\n     * @param {?} _tabNavBar\n     * @param {?} elementRef\n     * @param {?} globalRippleOptions\n     * @param {?} tabIndex\n     * @param {?} _focusMonitor\n     * @param {?=} animationMode\n     */\n    constructor(_tabNavBar, elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\n        super();\n        this._tabNavBar = _tabNavBar;\n        this.elementRef = elementRef;\n        this._focusMonitor = _focusMonitor;\n        /**\n         * Whether the tab link is active or not.\n         */\n        this._isActive = false;\n        this.rippleConfig = globalRippleOptions || {};\n        this.tabIndex = parseInt(tabIndex) || 0;\n        if (animationMode === 'NoopAnimations') {\n            this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\n        }\n        _focusMonitor.monitor(elementRef);\n    }\n    /**\n     * Whether the link is active.\n     * @return {?}\n     */\n    get active() { return this._isActive; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set active(value) {\n        if (value !== this._isActive) {\n            this._isActive = value;\n            this._tabNavBar.updateActiveLink(this.elementRef);\n        }\n    }\n    /**\n     * Whether ripples are disabled on interaction.\n     * \\@docs-private\n     * @return {?}\n     */\n    get rippleDisabled() {\n        return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n            !!this.rippleConfig.disabled;\n    }\n    /**\n     * @return {?}\n     */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef);\n    }\n}\n_MatTabLinkBase.decorators = [\n    { type: Directive }\n];\n/** @nocollapse */\n_MatTabLinkBase.ctorParameters = () => [\n    { type: _MatTabNavBase },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\n_MatTabLinkBase.propDecorators = {\n    active: [{ type: Input }]\n};\nif (false) {\n    /** @type {?} */\n    _MatTabLinkBase.ngAcceptInputType_disabled;\n    /** @type {?} */\n    _MatTabLinkBase.ngAcceptInputType_disableRipple;\n    /**\n     * Whether the tab link is active or not.\n     * @type {?}\n     * @protected\n     */\n    _MatTabLinkBase.prototype._isActive;\n    /**\n     * Ripple configuration for ripples that are launched on pointer down. The ripple config\n     * is set to the global ripple options since we don't have any configurable options for\n     * the tab link ripples.\n     * \\@docs-private\n     * @type {?}\n     */\n    _MatTabLinkBase.prototype.rippleConfig;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabLinkBase.prototype._tabNavBar;\n    /** @type {?} */\n    _MatTabLinkBase.prototype.elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatTabLinkBase.prototype._focusMonitor;\n}\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nclass MatTabLink extends _MatTabLinkBase {\n    /**\n     * @param {?} tabNavBar\n     * @param {?} elementRef\n     * @param {?} ngZone\n     * @param {?} platform\n     * @param {?} globalRippleOptions\n     * @param {?} tabIndex\n     * @param {?} focusMonitor\n     * @param {?=} animationMode\n     */\n    constructor(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\n        super(tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode);\n        this._tabLinkRipple = new RippleRenderer(this, ngZone, elementRef, platform);\n        this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._tabLinkRipple._removeTriggerEvents();\n    }\n}\nMatTabLink.decorators = [\n    { type: Directive, args: [{\n                selector: '[mat-tab-link], [matTabLink]',\n                exportAs: 'matTabLink',\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\n                host: {\n                    'class': 'mat-tab-link mat-focus-indicator',\n                    '[attr.aria-current]': 'active ? \"page\" : null',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.tabIndex]': 'tabIndex',\n                    '[class.mat-tab-disabled]': 'disabled',\n                    '[class.mat-tab-label-active]': 'active',\n                }\n            },] }\n];\n/** @nocollapse */\nMatTabLink.ctorParameters = () => [\n    { type: MatTabNav },\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nif (false) {\n    /**\n     * Reference to the RippleRenderer for the tab-link.\n     * @type {?}\n     * @private\n     */\n    MatTabLink.prototype._tabLinkRipple;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tabs-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTabsModule {\n}\nMatTabsModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [\n                    CommonModule,\n                    MatCommonModule,\n                    PortalModule,\n                    MatRippleModule,\n                    ObserversModule,\n                    A11yModule,\n                ],\n                // Don't export all components because some are only to be used internally.\n                exports: [\n                    MatCommonModule,\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabContent,\n                ],\n                declarations: [\n                    MatTabGroup,\n                    MatTabLabel,\n                    MatTab,\n                    MatInkBar,\n                    MatTabLabelWrapper,\n                    MatTabNav,\n                    MatTabLink,\n                    MatTabBody,\n                    MatTabBodyPortal,\n                    MatTabHeader,\n                    MatTabContent,\n                ],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/tab-nav-bar/index.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tabs/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TABS_CONFIG, MAT_TAB_GROUP, MatInkBar, MatTab, MatTabBody, MatTabBodyPortal, MatTabChangeEvent, MatTabContent, MatTabGroup, MatTabHeader, MatTabLabel, MatTabLabelWrapper, MatTabLink, MatTabNav, MatTabsModule, _MAT_INK_BAR_POSITIONER, _MatTabBodyBase, _MatTabGroupBase, _MatTabHeaderBase, _MatTabLinkBase, _MatTabNavBase, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵangular_material_src_material_tabs_tabs_a, MatPaginatedTabHeader as ɵangular_material_src_material_tabs_tabs_b };\n//# sourceMappingURL=tabs.js.map\n","import { Directive, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Inject, ContentChildren, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatToolbar.\n/**\n * \\@docs-private\n */\nclass MatToolbarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatToolbarBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nclass MatToolbarRow {\n}\nMatToolbarRow.decorators = [\n    { type: Directive, args: [{\n                selector: 'mat-toolbar-row',\n                exportAs: 'matToolbarRow',\n                host: { 'class': 'mat-toolbar-row' },\n            },] }\n];\nclass MatToolbar extends _MatToolbarMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _platform\n     * @param {?=} document\n     */\n    constructor(elementRef, _platform, document) {\n        super(elementRef);\n        this._platform = _platform;\n        // TODO: make the document a required param when doing breaking changes.\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!isDevMode() || !this._platform.isBrowser) {\n            return;\n        }\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe((/**\n         * @return {?}\n         */\n        () => this._checkToolbarMixedModes()));\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     * @private\n     * @return {?}\n     */\n    _checkToolbarMixedModes() {\n        if (!this._toolbarRows.length) {\n            return;\n        }\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        /** @type {?} */\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !(node.classList && node.classList.contains('mat-toolbar-row'))))\n            .filter((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)))\n            .some((/**\n         * @param {?} node\n         * @return {?}\n         */\n        node => !!(node.textContent && node.textContent.trim())));\n        if (isCombinedUsage) {\n            throwToolbarMixedModesError();\n        }\n    }\n}\nMatToolbar.decorators = [\n    { type: Component, args: [{\n                selector: 'mat-toolbar',\n                exportAs: 'matToolbar',\n                template: \"<ng-content></ng-content>\\n<ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\\n\",\n                inputs: ['color'],\n                host: {\n                    'class': 'mat-toolbar',\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".cdk-high-contrast-active .mat-toolbar{outline:solid 1px}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\\n\"]\n            }] }\n];\n/** @nocollapse */\nMatToolbar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nMatToolbar.propDecorators = {\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow, { descendants: true },] }]\n};\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatToolbar.prototype._document;\n    /**\n     * Reference to all toolbar row elements that have been projected.\n     * @type {?}\n     */\n    MatToolbar.prototype._toolbarRows;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatToolbar.prototype._platform;\n}\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * \\@docs-private\n * @return {?}\n */\nfunction throwToolbarMixedModesError() {\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n        'inside of a `<mat-toolbar>` for a single row.');\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/toolbar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatToolbarModule {\n}\nMatToolbarModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [MatCommonModule],\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n                declarations: [MatToolbar, MatToolbarRow],\n            },] }\n];\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/toolbar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n//# sourceMappingURL=toolbar.js.map\n","import {NgModule} from '@angular/core';\r\n\r\nimport {HttpClientModule} from '@angular/common/http';\r\n\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatMenuModule, MatMenuTrigger} from '@angular/material/menu';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatSnackBar, MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {TextAreaAutoResize} from \"./directives/text-area-auto-resize.directive\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextAreaAutoResize\r\n  ],\r\n  imports: [\r\n    HttpClientModule,\r\n\r\n    MatTabsModule,\r\n    MatSidenavModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatCardModule,\r\n    MatChipsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatGridListModule,\r\n    MatDialogModule,\r\n  ],\r\n  exports: [\r\n    HttpClientModule,\r\n\r\n    MatTabsModule,\r\n    MatSidenavModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatCardModule,\r\n    MatChipsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatGridListModule,\r\n    MatDialogModule,\r\n    TextAreaAutoResize\r\n  ],\r\n})\r\nexport class SharedModule {\r\n\r\n}\r\n"]}